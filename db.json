{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/408.md","hash":"6193ccb39cc19fd5495800a8b370dd29889feadd","modified":1756916359103},{"_id":"source/_posts/js高级.md","hash":"bf686d517bd733099fc685c79c665faeb145ec70","modified":1756913155332},{"_id":"source/categories/index.md","hash":"52864700e24afe1281304d89552525b1f340d399","modified":1756913376850},{"_id":"source/_posts/css.md","hash":"c3390f0057377479c3d6914efdd789b6031c91d1","modified":1756913124456},{"_id":"source/_posts/broswer.md","hash":"89d1a09e0251aee84de32b96d87869e1c0177a0f","modified":1756916964956},{"_id":"source/tags/index.md","hash":"c8dc63b2b7294df08d617ded4d18dd2cced59859","modified":1756913373441},{"_id":"source/_posts/seo.md","hash":"e2de9bb3945144cc1752a39840b610dd757358ea","modified":1756916387348},{"_id":"source/_posts/408/三次握手.png","hash":"ec08606980fd6611003e01d0015bc8c5e6f292b9","modified":1734274318988},{"_id":"source/_posts/408/四次挥手.png","hash":"f8ee679e8297c993b3bd521c06f326a85942010d","modified":1734275823940},{"_id":"source/_posts/broswer/v8.png","hash":"eb9e7afb42cbe11f5683ad35c179d5fcaeb8297f","modified":1734262794435},{"_id":"source/_posts/broswer/ast生成过程.png","hash":"86510a1d476b101844e95f6f6a2a17fcb585a0c4","modified":1734263559977},{"_id":"source/_posts/learn.md","hash":"172d2a319aa5ad4e5e200cc481253fc1c4879fd3","modified":1756913187932},{"_id":"source/_posts/react.md","hash":"2eeeae1dc07aa1f1fa8c48b42ddfc090e84b002b","modified":1756913221547},{"_id":"source/images/favicon.ico","hash":"f31e58ac2e3112737d2448915641a848124366df","modified":1756561023793},{"_id":"source/_posts/broswer/浏览器渲染过程.png","hash":"3a62588160bf2ad0d19fddaeaf5b2764a7a45c20","modified":1735523329731},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"8732cd296aa3e280a1f2cfe7935a9747ea7c8078","modified":1756913577892},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1756913577895},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1756913577897},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"e7e2aebec046dbeb5c8bddc9c3533a1c1f06b1ae","modified":1756913579921},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1756913579934},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"6d953cb0665451af0b6ef7441c40f730ce619666","modified":1756913579954},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1756913577389},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1756913579945},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"bde04a89febd0dbf320eac4da4ecd81624f2f29f","modified":1756913579947},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1756913579041},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1756913579937},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"3cdeb46ad36f3b76703b4f39c72a8aa1a15425cb","modified":1756913579966},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1756913579100},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"b59fedd9e1e65112d6a90dc7f55179085d0f1a6a","modified":1756913579974},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"70d6df7cf6472799faf4778405b332101ea822c1","modified":1756913579953},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1756913579958},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1756913579682},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1756913579183},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c93e510c7b119173226f3b0afb87c5f553f6eea8","modified":1756913579970},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1756913579644},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1756913579937},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1756913579628},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1756913579963},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1756913579925},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1756913579929},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"e1611a30df80cbe7ecf60be2e0cdd816ecabdd03","modified":1756913579017},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1756913579157},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"da95d64f44e1e6b516d1f96f57b4b0a537c29c19","modified":1756913579145},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1756913577703},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1756913577854},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1756913579194},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"062137cb4d078b27680da1ae28d524a9c963eebc","modified":1756913579633},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1756913577798},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1756913577801},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1756913577816},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1756913577856},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1756913577850},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"cead7891fbc0a53ffca4d68124e68efa855354a5","modified":1756913577837},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1756913577889},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1756913579671},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1756913577787},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1756913579661},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1756913577787},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1756913577870},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1756913577810},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1756913577821},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1756913577847},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1756913577866},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1756913577799},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1756913577792},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1756913577858},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1756913577805},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1756913577808},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1756913577812},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1756913577824},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1756913577844},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1756913577821},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1756913577841},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1756913577863},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1756913577874},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1756913577866},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1756913577877},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1756913577834},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1756913579842},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"b2ed9937fd00459c0e569db709a26cf8738ab18d","modified":1756913577887},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1756913577882},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1756913577699},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1756913579915},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1756913579162},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1756913578998},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1756913577468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1756913579166},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"d4d266eced4b9167bed86bcc5addc327f78cbdcc","modified":1756913579145},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1756913579202},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1756913579675},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1756913577465},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1756913579624},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1756913579640},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1756913579620},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1756913579002},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1756913579059},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f478a82ba4c15d4f6a5db38eca5c61f7054fa71d","modified":1756913579615},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1756913579100},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"c2156c77a011b20fafd34f03ca073397c21b099f","modified":1756913579032},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1756913579120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1756913579186},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1756913579118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1756913579115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1756913579651},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1756913579682},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1756913579669},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1756913579141},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1756913579157},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1756913579624},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1756913579063},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1756913579673},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1756913579644},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1756913579657},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1756913579063},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"8ef72cd688999bf3915be6724c12700a1e2724d9","modified":1756913579676},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1756913579067},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1756913579072},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1756913579076},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1756913579080},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1756913579636},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1756913579072},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1756913579084},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1756913579092},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1756913579080},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1756913579096},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1756913579088},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1756913579092},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1756913579183},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1756913579137},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1756913579035},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1756913579636},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1756913579648},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1756913579678},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1756913577829},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"209b8c04b88cf21f732ddb8bf23dbeaf2038ea1e","modified":1756913579796},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"97c3c3bc0272fd8483760a0efdcd2fd4ceed8a08","modified":1756913579830},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1756913577749},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1756913579696},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1756913579820},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1756913579754},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1756913579768},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"865fafbb12b83861b3fff572bacf053fe4eb6c07","modified":1756913579743},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1756913579902},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1756913579870},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1756913579758},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1756913579791},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1756913579854},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"7536c44e78115559a996d0384adec38b78d8dc25","modified":1756913579809},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1756913579874},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1756913579866},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1756913579870},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1756913579837},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1756913579880},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1756913579882},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1756913579858},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1756913579735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1756913579725},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1756913579893},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1756913577399},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1756913579750},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1756913579908},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1756913579737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1756913579762},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1756913579899},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1756913579786},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1756913579824},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1756913579890},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1756913579812},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1756913579845},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1756913579848},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1756913579750},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1756913579885},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1756913579814},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1756913579801},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1756913579895},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1756913579864},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1756913579166},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1756913579910},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1756913579120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1756913579170},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1756913579174},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"7df4d27cf9e576c6b9c1e4f76a100a41749ca8bb","modified":1756913579010},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1756913579108},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1756913579027},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1756913579686},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1756913579191},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1756913579106},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1756913579178},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1756913579198},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1756913579611},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1756913579194},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1756913579137},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1756913579166},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1756913579133},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1756913579653},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1756913579047},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1756913579127},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1756913579701},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"be45b522286bbc64724341f23a5056ad24d3f796","modified":1756913579690},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1756913579055},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1756913579124},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1756913579112},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1756913579154},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1756913579712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1756913579178},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1756913579688},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1756913579657},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1756913579051},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1756913579708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1756913579718},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1756913579129},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1756913579137},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1756913579150},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1756913579129},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1756913579153},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"332b532bafbaf369fde840883b77e5a23d050a39","modified":1756913579174},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1756913579190},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"9d84a681289175dec75a85f301d2fc9ce1b2bb7a","modified":1756913579194},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1756913579019},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"ea9766439b6b1936306916a8b08d2681afbc8ea9","modified":1756913579655},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1756913579699},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1756913579178},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1756913579695},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1756913579705},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1756913579665},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1756913579714},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1756913579774},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1756913579832},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1756913579782},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1756913579851},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1756913579832},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1756913578986},{"_id":"public/categories/index.html","hash":"b4f816d2bfd8153d9b324cb86e2dd3b7b2f67655","modified":1757242085008},{"_id":"public/tags/index.html","hash":"dee7bc92f0732f4a0fca0a4293c8ce2147ce4ef5","modified":1757242085008},{"_id":"public/2025/04/01/408/index.html","hash":"cafda7afb7ab3b63633682a334eedc31a0d4b516","modified":1757242085008},{"_id":"public/2025/04/04/broswer/index.html","hash":"6c37e3711a8d5a7962a4e9c9eb954de56e6fd88d","modified":1757242085008},{"_id":"public/2025/04/04/js高级/index.html","hash":"0319194857b0095ab0572af81dcb55b26f79d043","modified":1757242085008},{"_id":"public/2025/04/08/css/index.html","hash":"260e9403b97dab1782ea78006113d34812397b9e","modified":1757242085008},{"_id":"public/2025/04/08/learn/index.html","hash":"62b8603d3f095ef3503efd1c1d91c90ef3d1fdc0","modified":1757242085008},{"_id":"public/2025/04/19/react/index.html","hash":"05497f03ad7498c6985dfe8c5e357f84db88a716","modified":1757242085008},{"_id":"public/2025/04/25/seo/index.html","hash":"bffc04bae563bb32a9e0f34d7978222fbf9b6eac","modified":1757242085008},{"_id":"public/archives/index.html","hash":"3359b9c31463da8c8562c21b6f2301f254f15d87","modified":1757242085008},{"_id":"public/archives/2025/index.html","hash":"2f9076a797c96b1fe353d5ae4cf41ddb4205ce38","modified":1757242085008},{"_id":"public/archives/2025/04/index.html","hash":"4006dba6c9f8b35e3f27b3a7180f6f8523338330","modified":1757242085008},{"_id":"public/categories/浏览器/index.html","hash":"e207c64a80f1ff2d6ac6dcc42d0b44b0ab0af124","modified":1757242085008},{"_id":"public/categories/计算机网络/index.html","hash":"add40038c2870f545200eddb21ef63a32b66c217","modified":1757242085008},{"_id":"public/categories/编程/index.html","hash":"2bb835680c6f34e769739e900ad95627d6d7faec","modified":1757242085008},{"_id":"public/categories/SEO/index.html","hash":"0eb243ac4136a36e729b4f62265458e174d545b4","modified":1757242085008},{"_id":"public/index.html","hash":"a6d50de0a8453a51c940903a506473d0a2987c57","modified":1757242085008},{"_id":"public/tags/浏览器/index.html","hash":"86b77bb8709dee9c453b944afa83b9e8839502dc","modified":1757242085008},{"_id":"public/tags/渲染原理/index.html","hash":"2407e7800dabf2c1a6a0cfb06d036c88d862c00e","modified":1757242085008},{"_id":"public/tags/HTTP/index.html","hash":"6563c953a87a914b5385b0a2ada09052fcaab276","modified":1757242085008},{"_id":"public/tags/CSS/index.html","hash":"fbd319597b3247a3de8e42e471a67a589ea9b425","modified":1757242085008},{"_id":"public/tags/BFC/index.html","hash":"57bd7c855411bf4a3ffafae4d9b73a84be788769","modified":1757242085008},{"_id":"public/tags/JS/index.html","hash":"917cfa98c4f789a027140235c816a8fa34968c9d","modified":1757242085008},{"_id":"public/tags/React/index.html","hash":"de69c41f35383dc6b968f3b36261fc8b902dd6a7","modified":1757242085008},{"_id":"public/tags/SEO/index.html","hash":"790cdf4a051d6f204eb02b4cbe9324b9acf9b495","modified":1757242085008},{"_id":"public/tags/Node/index.html","hash":"e2530fbeac985ddb8cd0008b17f28dc078c008fb","modified":1757242085008},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1757242085008},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1757242085008},{"_id":"public/2025/04/04/broswer/ast生成过程.png","hash":"86510a1d476b101844e95f6f6a2a17fcb585a0c4","modified":1757242085008},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1757242085008},{"_id":"public/2025/04/04/broswer/v8.png","hash":"eb9e7afb42cbe11f5683ad35c179d5fcaeb8297f","modified":1757242085008},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1757242085008},{"_id":"public/2025/04/01/408/三次握手.png","hash":"ec08606980fd6611003e01d0015bc8c5e6f292b9","modified":1757242085008},{"_id":"public/2025/04/01/408/四次挥手.png","hash":"f8ee679e8297c993b3bd521c06f326a85942010d","modified":1757242085008},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1757242085008},{"_id":"public/css/index.css","hash":"4c5f9c63c1b38711421e7754dfcd43992b51bb1c","modified":1757242085008},{"_id":"public/js/utils.js","hash":"ce898acc9081131cdc3a97baf43cb7b1a25da47f","modified":1757242085008},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1757242085008},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1757242085008},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1757242085008},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1757242085008},{"_id":"public/images/favicon.ico","hash":"f31e58ac2e3112737d2448915641a848124366df","modified":1757242085008},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1757242085008},{"_id":"public/2025/04/04/broswer/浏览器渲染过程.png","hash":"3a62588160bf2ad0d19fddaeaf5b2764a7a45c20","modified":1757242085008}],"Category":[{"name":"浏览器","_id":"cmf9kkff30004r44y7v229d8d"},{"name":"计算机网络","_id":"cmf9kkffe0009r44y8ye773yo"},{"name":"编程","_id":"cmf9kkffh000er44ybikhbil3"},{"name":"SEO","_id":"cmf9kkffm000pr44y2kvug4jj"}],"Data":[],"Page":[{"title":"categories","date":"2025-09-03T15:28:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-09-03 23:28:58\ntype: \"categories\"\n---\n","updated":"2025-09-03T15:29:36.850Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmf9kkfel0000r44y92hy0k20","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-09-03T15:29:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-09-03 23:29:14\ntype: \"tags\"\n---\n","updated":"2025-09-03T15:29:33.441Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmf9kkfez0002r44y3jua8iw5","content":"","excerpt":"","more":""}],"Post":[{"title":"浏览器渲染原理","date":"2025-04-04T08:31:42.000Z","_content":"\n## 浏览器进程模型\n\n最主要的进程包括：\n\n1. 浏览器进程：主要负责界面展示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务\n2. 网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务\n3. 渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间互不影响\n\n### 渲染进程\n\n1. 在最开始的时候，渲染主线程会进入一个无限循环\n2. 每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完之后进入下一个循环，如果没有，则进入休眠状态\n3. 其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加入到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务\n\n### 异步\n\n- 单线程是异步产生的原因\n- 事件循环是异步实现的方式\n\nJS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。\n\n而渲染主线程承担着诸多的工作，渲染页面，执行 JS 都在其中运行。\n\n如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程拜拜的消耗事件，另一方面导致页面无法及时更新，给用户造成卡死现象。\n\n所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他任务完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。\n\n在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。\n\n### 任务队列\n\n**任务没有优先级，在消息队列中先进先出，消息队列是由有先级的** \n\n- 每个任务都有一个任务类型，**同一个类型的任务必须在同一个队列中，不同类型的任务可以分属于不同的队列**。在**一次事件循环中，浏览器可以根据实际的情况从不同的队列中取出任务执行。** \n- **浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行** \n\n*随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法* \n\n在目前的 chrome 的实现中，至少包含了下面的队列：\n\n1. 延时队列：用于存放计时器到达后的回调任务，优先级【中】\n\n2. 交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】\n\n3. 微队列：用户存放需要最快执行的任务，优先级【最高】\n\n   1. 添加任务到微任务队列的主要方式是使用 `Promise`、`MultationObserver` \n\n      ```js\n      Promise.resolve().then(function fn() {})\n      ```\n\n\n\n## JS 计时器\n\nJS 中的计时器不能做到精准计时：\n\n1. 计算机硬件没有原子钟，无法做到精准计时\n2. 操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差\n3. 按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 `4 ms` 的最少事时间，这样在计算时时间少于 `4 ms` 时又带来了偏差\n4. 受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差\n\n\n\n**嵌套`setTimeout`的延迟问题** \n\n- **最小延迟限制（4ms）**：为了防止滥用定时器导致过度频繁的任务调度，浏览器对于嵌套超过一定层级（通常是 5 层）的`setTimeout`函数设置了一个最小延迟，一般是 4ms。这是一种性能优化策略，目的是避免过多的短延迟定时器任务占用过多的系统资源，从而影响浏览器的性能和用户体验。\n- **具体原因分析**：当嵌套多个`setTimeout`时，可能会导致一系列非常短延迟的任务排队等待执行。如果没有这个最小延迟限制，这些任务可能会频繁地打断浏览器的其他重要任务，如页面渲染、用户输入响应等。通过添加 4ms 的最小延迟，可以让浏览器有足够的时间来处理其他任务，同时也能在一定程度上保证定时器任务的执行。例如，在一些复杂的动画效果或者频繁的异步任务场景中，如果没有这个限制，可能会导致浏览器卡顿或者资源耗尽。\n\n\n\n## [浏览器渲染](https://web.dev/articles/howbrowserswork?hl=zh-cn) \n\n### 浏览器渲染页面过程\n\n![](浏览器渲染过程.png)\n\n\n\n1. 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列\n2. 在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\n3. 整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成下一个阶段的输入。\n   - HTML 解析过程\n     - 解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件\n     - 如果主线程解析到 link 标签位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作时在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。\n     - 如果主线程解析到 script 标签位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML，这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停，这就是 JS 会阻塞 HTML 解析的根本原因。\n   - 样式计算\n     - 主线程会遍历得到的 DOM 树，依次微树中的每个节点计算出他最终的样式，称之为 Computed Style\n     - 在这一过程中，很多预设值会变成绝对值，例如 `red` 会变成 `rgb(255, 0, 0);` 相对单位会变成绝对单位，例如 `em` 会变成 `px` 。这一步完成后，会得到一棵带有样式的 DOM 树。\n   - 布局，布局完成后会得到布局树\n     - 布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含快的位置\n     - 大部分时候，DOM 树和布局树并非一一对应。比如 `display: none;` 的节点没有集合信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树种不存在这些为元素节点，但他们拥有几何信息，所以会生成到布局树种。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。\n   - 分层\n     - 主线程会使用一套复杂的渲染对整个布局树种进行分层\n     - 分层的好处在于，将来某一层改变后，仅会对该层进行后续处理，从而提升效率。\n     - 滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层的结果，也可以通过 `will-change` 属性更大程度的影响分层结果。\n   - 分块\n     - 主线程会为每个层单独生成绘制指令集，用于描述这一层的内容该如何画出来。\n     - 完成绘制后，主线程将每个图层的绘制信息交给合成线程，剩余的工作将由合成线程完成。\n     - 合成线程首先对每个图层进行分块，将其划分为更多的小区域，它会从线程池种拿取多个线程来完成分块工作\n   - 光栅化\n     - 合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化\n     - GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。\n     - 光栅化的结果就是一块一块的位图\n   - 画\n     - 合成线程拿到每个层，每个块的位图后，生成一个个指引（quad）信息。\n     - 指引会标识出每个位图应该画到哪个位置，以及会考虑旋转、缩放等变形\n     - 变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因\n     - 合成线程会把 quad 提交给 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像\n\n\n\n### reflow\n\nreflow 的本质就是重新计算 layout 树。\n\n当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout\n\n为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算，所以改动属性造成的 reflow 是异步完成的。当 JS 获取布局属性时，就可能照成无法获取到最新的布局信息。\n\n浏览器在反复权衡下，最终决定获取属性立即 reflow\n\n### repaint\n\nrepaint 的本质就是重新根据分层信息计算了绘制指令\n\n当改动了可见样式后，会引发 repaint\n\n由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint\n\n### transform 效率\n\n由于 transform 既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个 draw 阶段\n\n由于 draw 阶段在合成线程种，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。\n\n\n\n 浏览器渲染过程\n\n![WebKit 主要流程。](https://web.dev/static/articles/howbrowserswork/image/webkit-main-flow-b779d50c0cf28.png?hl=zh-cn) \n\n\n\n浏览器渲染DOM树\n\n```html\n<html>\n  <body>\n    <p>\n      Hello World\n    </p>\n    <div> <img src=\"example.png\"/></div>\n  </body>\n</html>\n```\n\n渲染的 DOM 树如下\n\n\n\n![](https://web.dev/static/articles/howbrowserswork/image/dom-tree-the-example-mar-70be67fe14c9a_960.png?hl=zh-cn)\n\n\n\n### 回流、重绘\n\n**回流 / 重排（reflow）** \n\n- 第一次确定节点的大小和位置，成为布局（Layout）\n- 之后对节点的大小，位置修改重新计算称之为回流\n\n引起回流：\n\n1. DOM 结构发生改变（添加新的节点或移除节点）\n2. 改变了布局（width、height、padding、font-size 等）\n3. 窗口 resize （修改窗口的尺寸等）\n4. 调用 getCompuedStyle 方法获取尺寸、位置信息\n\n**重绘（repaint）** \n\n- 第一次渲染内容称之为绘制\n- 之后重新渲染称之为重绘\n\n引起重绘：\n\n1. 修改背景颜色、文字颜色、边框颜色、样式等\n\n\n\n**回流一定会引起重绘，所以回流是一种很消耗性能的事情** \n\n避免回流的方式：\n\n- 修改样式时，尽量一次性修改\n  - 比如：通过 cssText 修改\n  - 比如：通过添加 class 修改\n- 尽量避免频繁的操作 DOM\n  - 可以在一个 DocumentFragment 或者父元素中将要操作的 DOM 操作完成，在一次性的操作\n- 尽量避免通过 getComputedStyle 获取尺寸、位置等信息\n- 对某些元素使用 position 的 absolute、fixed\n  - 并不是不会回流，而是开销相对较小，不会对其他元素造成影响\n\n\n\n### composite 合成\n\n- 绘制的过程，可以将布局后的元素绘制到多个合成图层中，这是浏览器的一种优化手段\n- 默认情况下， **标准流中的内容都是被绘制在同一个图层（Layer）中的** \n- 而一些特殊的属性，会创建一个新的合成层（Compositing Layer），并且新的图层可以利用 GPU 来加速绘制，因为 **每个合成层都是单独渲染的** \n- 常见的一些属性会导致形成新的合成层\n  - 3D transforms\n  - video、canvas、iframe\n  - opacity 动画转换时\n  - position: fixed\n  - will-change：一个实验性的属性，提前告知浏览器元素可能发生哪些变化\n  - animation 或 transition 设置 opacity、transform\n- 分层确实可以提高新能，但是它以 **内存管理为代价** ，因此不应作为 web 性能优化策略的一部分过度使用\n\n\n\n## 浏览器缓存\n\n浏览器缓存是一种将资源存储在本地的技术，其目的是为了减少网络请求，提高网页的加载速度和性能。当用户访问一个网页时，浏览器会将一些静态资源（如 JavaScript 文件、CSS 文件、图片、字体等）存储在本地，下次再访问相同网页或相关资源时，可以直接从本地获取，而不是每次都从服务器请求，从而节省时间和带宽。 \n\n### （一）强缓存\n\n- **Expires**：\n  - 这是 HTTP/1.0 中提出的缓存控制字段，它指定了资源的过期时间，是一个绝对时间，即资源在该时间之后失效。例如：`Expires: Wed, 21 Oct 2025 07:28:00 GMT`。\n  - 缺点：它依赖于客户端的本地时间，如果客户端的时间不准确，可能导致缓存失效或长期不失效的问题。\n- **Cache-Control**：\n  - 这是 HTTP/1.1 中引入的缓存控制字段，相比`Expires`更加灵活和可靠，它可以设置多个指令，常见的指令包括：\n    - `public`：表示该资源既可以被浏览器缓存，也可以被代理服务器缓存。\n    - `private`：表示该资源只能被浏览器缓存，不能被代理服务器缓存。\n    - `max-age`：这是一个相对时间，表示资源的有效时长，单位为秒。例如：`Cache-Control: max-age=3600`，表示资源在请求后的 3600 秒内有效。\n    - `no-cache`：表示需要先与服务器确认缓存是否有效，然后决定是否使用缓存，并非不缓存。\n    - `no-store`：表示不进行缓存，每次都需要从服务器请求新资源。\n  - 示例：`Cache-Control: public, max-age=3600`，表示资源可被公共缓存，且在请求后的 1 小时内有效。\n\n### （二）协商缓存\n\n- **Last-Modified 和 If-Modified-Since**：\n  - 当服务器响应资源时，会在响应头中添加`Last-Modified`字段，记录资源的最后修改时间。例如：`Last-Modified: Wed, 21 Oct 2024 07:28:00 GMT`。\n  - 当浏览器再次请求该资源时，会在请求头中带上`If-Modified-Since`字段，其值为之前服务器返回的`Last-Modified`的值。\n  - 服务器收到请求后，会将`If-Modified-Since`的值与资源的实际修改时间进行比较，如果未修改，则返回`304 Not Modified`状态码，浏览器会使用本地缓存；如果修改了，则返回新资源和新的`Last-Modified`时间。\n- **ETag 和 If-None-Match**：\n  - `ETag`是服务器为资源生成的一个唯一标识符，通常是资源的哈希值或版本号，它比`Last-Modified`更精确，因为有些资源可能会被修改但内容不变，仅通过修改时间无法准确判断。例如：`ETag: \"123456789abcdef\"`。\n  - 当浏览器再次请求资源时，会在请求头中带上`If-None-Match`字段，其值为之前服务器返回的`ETag`的值。\n  - 服务器收到请求后，会将`If-None-Match`的值与当前资源的`ETag`进行比较，如果匹配，返回`304 Not Modified`状态码，使用本地缓存；不匹配，则返回新资源和新的`ETag`。\n\n### 三、缓存策略的选择和使用\n\n- **静态资源**：\n  - 对于不经常更新的静态资源（如图片、CSS 文件、JavaScript 文件等），可以使用强缓存，通过设置较长的`max-age`，例如：`Cache-Control: public, max-age=31536000`（一年），减少网络请求，提高性能。\n- **频繁更新的资源**：\n  - 对于经常更新的资源，如 HTML 页面，可以使用协商缓存，通过`ETag`或`Last-Modified`进行验证，确保每次获取的都是最新的资源。\n- **缓存失效机制**：\n  - 对于可能会被更新的资源，使用`Cache-Control: no-cache`，让浏览器每次都向服务器发送请求，但服务器会根据协商缓存机制决定是否返回新资源。\n\n### 四、浏览器缓存的流程\n\n1. 浏览器第一次请求资源时，服务器根据资源的性质和配置，在响应头中设置相应的缓存控制信息（如`Cache-Control`、`Expires`、`ETag`、`Last-Modified`等）。\n2. 浏览器根据响应头中的信息决定是否将资源存储在本地缓存中。\n3. 当浏览器再次请求该资源时：\n\n- 对于强缓存，如果未过期，直接从本地缓存中获取资源，不向服务器发送请求。\n- 对于协商缓存，会带上相应的验证信息（如`If-Modified-Since`或`If-None-Match`）向服务器请求，服务器根据验证信息决定是否使用本地缓存或返回新资源。\n\n### 五、缓存的优缺点\n\n- **优点**：\n  - 提高网页加载速度，减少网络延迟和带宽使用，提高用户体验。\n  - 减轻服务器负载，减少服务器的请求处理量。\n- **缺点**：\n  - 可能导致用户获取到过期的资源，尤其是在使用强缓存时，更新资源可能无法及时生效，需要等待缓存过期或手动清除缓存。\n  - 对于一些动态内容，如果错误地使用了强缓存，可能会影响用户看到最新信息。\n\n### 六、缓存的清除和更新\n\n- **手动清除**：用户可以通过浏览器的清除缓存功能，将本地缓存清除，重新从服务器获取资源。\n- **自动更新：**\n  - 通过合理设置缓存策略，如协商缓存，确保资源更新时能够被服务器验证，及时更新到最新资源。\n  - 对于一些需要强制更新的情况，可以使用版本号或修改文件名的方式，如将`script.js`改为`script-v2.js`，使浏览器将其视为新的资源进行请求。\n\n\n\n## script 标签阻塞页面解析\n\n- 在浏览器解析 HTML 过程中，**遇到了 script 标签是不能继续构建 DOM 树的** \n- 他会停止继续构建，**首先下载 JavaScript 代码，并且执行 JavaScript 代码** \n- 只有 **等到 JavaScript 脚本执行结束后，才会继续解析 HTML，构建 DOM 树** \n\n原因：\n\n- JavaScript 的作用之一就是操作 DOM，并且可以修改 DOM\n- 如果我们 **等到 DOM 树构建完成并且渲染在执行 JavaScript，会造成严重的回流和重绘** ，影响页面的性能\n- 在**遇到 script 元素时，优先下载和执行 JavaScript 代码，再继续构建 DOM 树** \n\n带来的问题：\n\n- 再目前的开发模式中（Vue、React），脚本往往比 HTML 页面更 ”重“，处理时间要更长\n- 所以会造成页面解析阻塞，再脚本下载，执行完成之前，用户无法在界面上看到内容\n- 为了解决这个问题，**script 元素提供了两个属性（attribute）：defer 和 async** \n- *浏览器在解决这个问题时，做了一个优化操作，在解析 HTML 时，当 遇到 script 发生阻塞时，优先渲染已经生成的 DOM 树* \n\n\n\n## Defer 属性和 Async 属性\n\ndefer 属性 **告诉浏览器不要等待脚本下载** ，而 **继续解析 HTML ，构建 DOM 树** \n\n- **脚本会有浏览器来进行下载，但是不会阻塞 DOM Tree 的构建过程** \n- 如果**脚本提前下载好了，他会等待 DOM Tree 构建完成，在 `DOMContentLoaded` 事件之前先执行 defer 中的代码** \n- 在**使用 defer 属性的 script 文件中可以获取 DOM 元素** \n- defer 属性会**保证加载和执行 script 文件的顺序** \n- 从某种角度来说，defer 可以提高页面的性能，并且推荐放到 header 标签中\n- defer 仅适用于外部脚本，对于 script 默认内容会被忽略\n  - `<script defer> console.log('test') </script>` ，无意义，会被忽略\n\n```js\n// a.js\nconsole.log('a script execute')\n// b.js\nconsole.log('b script execute')\n```\n\n```html\n<!-- index.html -->\n<div>Hello</div>\n<script src=\"b.js\" defer></script>\n<script src=\"a.js\" defer></script>\n<script>\n\twindow.addEventListenser('DOMContentLoaded', () => {\n        console.log('dom content loaded')\n    })\n</script>\n<div>Content</div>\n```\n\n如上代码执行顺序为：\n\n1. 添加监听事件 `DOMContentLoaded` \n2. 渲染 Hello 和 Content 内容\n3. 输出 `b script execute` \n4. 输出 `a script execute` \n5. 输出 `dom content loaded` \n\n\n\n**async 特性与 defer 有些类似，它也能够让脚本不阻塞页面**\n\n- async 时让一个脚本完全独立\n  - 浏览器 **不会因为 async 脚本而阻塞**（与 defer 类似）\n  - **async 脚本不能够保证顺序，他是独立下载、独立运行、不会等待其他脚本** \n  - **async 不能保证在 `DOMContentLoaded` 之前或者之后执行** \n\n\n\n**defer 通常用于需要在文档解析后操作 DOM 的 JavaScript 代码，并且对于多个 script 文件有顺序的要求** \n\n**async 通常用于独立的脚本，对其他脚本，甚至 DOM 没有依赖** \n\n\n\n## JS 执行原理\n\n浏览器内核由两部分组成，以 `webkit` 为例\n\n- `WebCore`: 负责 HTML 解析、布局、渲染等相关的工作\n- `JavaScriptCore`: 解析、执行 JavaScript 代码\n\n**V8 引擎的执行原理：** \n\n- V8 是使用 C++ 编写的 Google 开源的 **高性能 JavaScript 和 `WebAssembly` 引擎**  ，它用于 Chrome 和 Node.js 等\n- 它实现了 ECMAScript 和 `WebAssembly` ，并支持跨平台操作\n- V8 可以独立运行，也可以嵌入到如何 C++ 应用程序中\n\n<!-- ![](v8.png) -->\n{% asset_img v8.png This is an image %}\n\nParse 模块会将 JavaScript 代码转化成 AST （抽象语法树），这是因为解释器并不直接认识 JavaScript 代码\n\n- **如果函数没有被调用，那么是不会被转换成 AST 的** \n\nIgnition 是一个解析器，会将 AST 转化成 `ByteCode`（字节码）\n\n- 同时**会收集 `TurboFan` 优化所需要的信息**（比如函数参数的类型信息，有了类型才能进行真实的计算）\n- 如果**函数只调用一次，Ignition 会解释执行 `ByteCode`**  \n\n`TurboFan` 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码\n\n- 如果一个函数被多次调用那么就会被标记为 **热点函数** ，那么就会 **通过 `TurboFan` 转化成优化后的机器码**，提高代码执行的性能\n- 但是，**机器码实际上也会被还原为 `ByteCode`**  这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转化为字节码\n\n![](ast生成过程.png)\n\n1. 词法分析（lexical analysis）\n   - 将字符序列转换成 token 序列的过程\n   - token 是记号化（tokenization）缩写\n   - 词法分析器（lexical analyzer 简称）也叫扫描器（scanner）\n2. 语法分析（syntactic analysis，也叫 parsing）\n   - 语法分析器也可以称之为 parser\n\n\n\n## JS 执行栈\n\n\n\n\n\n## 虚拟 DOM\n\n虚拟 DOM 可以更好的跨平台，通过生成相应的 AST（抽象语法树）进行可以在多平台复用\n\nVue/React 框架在数据更新时，不知道哪个组件使用了该数据，该要更新哪个组件，所以会使用 diff 算法进行对比进行渲染某个特定的组件。使用虚拟 DOM 不需要全量生成真实 DOM 渲染页面，从而能优化运行时速度\n\n","source":"_posts/broswer.md","raw":"---\ntitle: 浏览器渲染原理\ndate: 2025-04-04 16:31:42\ntags: [浏览器, 渲染原理]\ncategories: [浏览器]\n---\n\n## 浏览器进程模型\n\n最主要的进程包括：\n\n1. 浏览器进程：主要负责界面展示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务\n2. 网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务\n3. 渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间互不影响\n\n### 渲染进程\n\n1. 在最开始的时候，渲染主线程会进入一个无限循环\n2. 每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完之后进入下一个循环，如果没有，则进入休眠状态\n3. 其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加入到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务\n\n### 异步\n\n- 单线程是异步产生的原因\n- 事件循环是异步实现的方式\n\nJS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。\n\n而渲染主线程承担着诸多的工作，渲染页面，执行 JS 都在其中运行。\n\n如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程拜拜的消耗事件，另一方面导致页面无法及时更新，给用户造成卡死现象。\n\n所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他任务完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。\n\n在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。\n\n### 任务队列\n\n**任务没有优先级，在消息队列中先进先出，消息队列是由有先级的** \n\n- 每个任务都有一个任务类型，**同一个类型的任务必须在同一个队列中，不同类型的任务可以分属于不同的队列**。在**一次事件循环中，浏览器可以根据实际的情况从不同的队列中取出任务执行。** \n- **浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行** \n\n*随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法* \n\n在目前的 chrome 的实现中，至少包含了下面的队列：\n\n1. 延时队列：用于存放计时器到达后的回调任务，优先级【中】\n\n2. 交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】\n\n3. 微队列：用户存放需要最快执行的任务，优先级【最高】\n\n   1. 添加任务到微任务队列的主要方式是使用 `Promise`、`MultationObserver` \n\n      ```js\n      Promise.resolve().then(function fn() {})\n      ```\n\n\n\n## JS 计时器\n\nJS 中的计时器不能做到精准计时：\n\n1. 计算机硬件没有原子钟，无法做到精准计时\n2. 操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差\n3. 按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 `4 ms` 的最少事时间，这样在计算时时间少于 `4 ms` 时又带来了偏差\n4. 受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差\n\n\n\n**嵌套`setTimeout`的延迟问题** \n\n- **最小延迟限制（4ms）**：为了防止滥用定时器导致过度频繁的任务调度，浏览器对于嵌套超过一定层级（通常是 5 层）的`setTimeout`函数设置了一个最小延迟，一般是 4ms。这是一种性能优化策略，目的是避免过多的短延迟定时器任务占用过多的系统资源，从而影响浏览器的性能和用户体验。\n- **具体原因分析**：当嵌套多个`setTimeout`时，可能会导致一系列非常短延迟的任务排队等待执行。如果没有这个最小延迟限制，这些任务可能会频繁地打断浏览器的其他重要任务，如页面渲染、用户输入响应等。通过添加 4ms 的最小延迟，可以让浏览器有足够的时间来处理其他任务，同时也能在一定程度上保证定时器任务的执行。例如，在一些复杂的动画效果或者频繁的异步任务场景中，如果没有这个限制，可能会导致浏览器卡顿或者资源耗尽。\n\n\n\n## [浏览器渲染](https://web.dev/articles/howbrowserswork?hl=zh-cn) \n\n### 浏览器渲染页面过程\n\n![](浏览器渲染过程.png)\n\n\n\n1. 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列\n2. 在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\n3. 整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成下一个阶段的输入。\n   - HTML 解析过程\n     - 解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件\n     - 如果主线程解析到 link 标签位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作时在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。\n     - 如果主线程解析到 script 标签位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML，这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停，这就是 JS 会阻塞 HTML 解析的根本原因。\n   - 样式计算\n     - 主线程会遍历得到的 DOM 树，依次微树中的每个节点计算出他最终的样式，称之为 Computed Style\n     - 在这一过程中，很多预设值会变成绝对值，例如 `red` 会变成 `rgb(255, 0, 0);` 相对单位会变成绝对单位，例如 `em` 会变成 `px` 。这一步完成后，会得到一棵带有样式的 DOM 树。\n   - 布局，布局完成后会得到布局树\n     - 布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含快的位置\n     - 大部分时候，DOM 树和布局树并非一一对应。比如 `display: none;` 的节点没有集合信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树种不存在这些为元素节点，但他们拥有几何信息，所以会生成到布局树种。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。\n   - 分层\n     - 主线程会使用一套复杂的渲染对整个布局树种进行分层\n     - 分层的好处在于，将来某一层改变后，仅会对该层进行后续处理，从而提升效率。\n     - 滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层的结果，也可以通过 `will-change` 属性更大程度的影响分层结果。\n   - 分块\n     - 主线程会为每个层单独生成绘制指令集，用于描述这一层的内容该如何画出来。\n     - 完成绘制后，主线程将每个图层的绘制信息交给合成线程，剩余的工作将由合成线程完成。\n     - 合成线程首先对每个图层进行分块，将其划分为更多的小区域，它会从线程池种拿取多个线程来完成分块工作\n   - 光栅化\n     - 合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化\n     - GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。\n     - 光栅化的结果就是一块一块的位图\n   - 画\n     - 合成线程拿到每个层，每个块的位图后，生成一个个指引（quad）信息。\n     - 指引会标识出每个位图应该画到哪个位置，以及会考虑旋转、缩放等变形\n     - 变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因\n     - 合成线程会把 quad 提交给 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像\n\n\n\n### reflow\n\nreflow 的本质就是重新计算 layout 树。\n\n当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout\n\n为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算，所以改动属性造成的 reflow 是异步完成的。当 JS 获取布局属性时，就可能照成无法获取到最新的布局信息。\n\n浏览器在反复权衡下，最终决定获取属性立即 reflow\n\n### repaint\n\nrepaint 的本质就是重新根据分层信息计算了绘制指令\n\n当改动了可见样式后，会引发 repaint\n\n由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint\n\n### transform 效率\n\n由于 transform 既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个 draw 阶段\n\n由于 draw 阶段在合成线程种，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。\n\n\n\n 浏览器渲染过程\n\n![WebKit 主要流程。](https://web.dev/static/articles/howbrowserswork/image/webkit-main-flow-b779d50c0cf28.png?hl=zh-cn) \n\n\n\n浏览器渲染DOM树\n\n```html\n<html>\n  <body>\n    <p>\n      Hello World\n    </p>\n    <div> <img src=\"example.png\"/></div>\n  </body>\n</html>\n```\n\n渲染的 DOM 树如下\n\n\n\n![](https://web.dev/static/articles/howbrowserswork/image/dom-tree-the-example-mar-70be67fe14c9a_960.png?hl=zh-cn)\n\n\n\n### 回流、重绘\n\n**回流 / 重排（reflow）** \n\n- 第一次确定节点的大小和位置，成为布局（Layout）\n- 之后对节点的大小，位置修改重新计算称之为回流\n\n引起回流：\n\n1. DOM 结构发生改变（添加新的节点或移除节点）\n2. 改变了布局（width、height、padding、font-size 等）\n3. 窗口 resize （修改窗口的尺寸等）\n4. 调用 getCompuedStyle 方法获取尺寸、位置信息\n\n**重绘（repaint）** \n\n- 第一次渲染内容称之为绘制\n- 之后重新渲染称之为重绘\n\n引起重绘：\n\n1. 修改背景颜色、文字颜色、边框颜色、样式等\n\n\n\n**回流一定会引起重绘，所以回流是一种很消耗性能的事情** \n\n避免回流的方式：\n\n- 修改样式时，尽量一次性修改\n  - 比如：通过 cssText 修改\n  - 比如：通过添加 class 修改\n- 尽量避免频繁的操作 DOM\n  - 可以在一个 DocumentFragment 或者父元素中将要操作的 DOM 操作完成，在一次性的操作\n- 尽量避免通过 getComputedStyle 获取尺寸、位置等信息\n- 对某些元素使用 position 的 absolute、fixed\n  - 并不是不会回流，而是开销相对较小，不会对其他元素造成影响\n\n\n\n### composite 合成\n\n- 绘制的过程，可以将布局后的元素绘制到多个合成图层中，这是浏览器的一种优化手段\n- 默认情况下， **标准流中的内容都是被绘制在同一个图层（Layer）中的** \n- 而一些特殊的属性，会创建一个新的合成层（Compositing Layer），并且新的图层可以利用 GPU 来加速绘制，因为 **每个合成层都是单独渲染的** \n- 常见的一些属性会导致形成新的合成层\n  - 3D transforms\n  - video、canvas、iframe\n  - opacity 动画转换时\n  - position: fixed\n  - will-change：一个实验性的属性，提前告知浏览器元素可能发生哪些变化\n  - animation 或 transition 设置 opacity、transform\n- 分层确实可以提高新能，但是它以 **内存管理为代价** ，因此不应作为 web 性能优化策略的一部分过度使用\n\n\n\n## 浏览器缓存\n\n浏览器缓存是一种将资源存储在本地的技术，其目的是为了减少网络请求，提高网页的加载速度和性能。当用户访问一个网页时，浏览器会将一些静态资源（如 JavaScript 文件、CSS 文件、图片、字体等）存储在本地，下次再访问相同网页或相关资源时，可以直接从本地获取，而不是每次都从服务器请求，从而节省时间和带宽。 \n\n### （一）强缓存\n\n- **Expires**：\n  - 这是 HTTP/1.0 中提出的缓存控制字段，它指定了资源的过期时间，是一个绝对时间，即资源在该时间之后失效。例如：`Expires: Wed, 21 Oct 2025 07:28:00 GMT`。\n  - 缺点：它依赖于客户端的本地时间，如果客户端的时间不准确，可能导致缓存失效或长期不失效的问题。\n- **Cache-Control**：\n  - 这是 HTTP/1.1 中引入的缓存控制字段，相比`Expires`更加灵活和可靠，它可以设置多个指令，常见的指令包括：\n    - `public`：表示该资源既可以被浏览器缓存，也可以被代理服务器缓存。\n    - `private`：表示该资源只能被浏览器缓存，不能被代理服务器缓存。\n    - `max-age`：这是一个相对时间，表示资源的有效时长，单位为秒。例如：`Cache-Control: max-age=3600`，表示资源在请求后的 3600 秒内有效。\n    - `no-cache`：表示需要先与服务器确认缓存是否有效，然后决定是否使用缓存，并非不缓存。\n    - `no-store`：表示不进行缓存，每次都需要从服务器请求新资源。\n  - 示例：`Cache-Control: public, max-age=3600`，表示资源可被公共缓存，且在请求后的 1 小时内有效。\n\n### （二）协商缓存\n\n- **Last-Modified 和 If-Modified-Since**：\n  - 当服务器响应资源时，会在响应头中添加`Last-Modified`字段，记录资源的最后修改时间。例如：`Last-Modified: Wed, 21 Oct 2024 07:28:00 GMT`。\n  - 当浏览器再次请求该资源时，会在请求头中带上`If-Modified-Since`字段，其值为之前服务器返回的`Last-Modified`的值。\n  - 服务器收到请求后，会将`If-Modified-Since`的值与资源的实际修改时间进行比较，如果未修改，则返回`304 Not Modified`状态码，浏览器会使用本地缓存；如果修改了，则返回新资源和新的`Last-Modified`时间。\n- **ETag 和 If-None-Match**：\n  - `ETag`是服务器为资源生成的一个唯一标识符，通常是资源的哈希值或版本号，它比`Last-Modified`更精确，因为有些资源可能会被修改但内容不变，仅通过修改时间无法准确判断。例如：`ETag: \"123456789abcdef\"`。\n  - 当浏览器再次请求资源时，会在请求头中带上`If-None-Match`字段，其值为之前服务器返回的`ETag`的值。\n  - 服务器收到请求后，会将`If-None-Match`的值与当前资源的`ETag`进行比较，如果匹配，返回`304 Not Modified`状态码，使用本地缓存；不匹配，则返回新资源和新的`ETag`。\n\n### 三、缓存策略的选择和使用\n\n- **静态资源**：\n  - 对于不经常更新的静态资源（如图片、CSS 文件、JavaScript 文件等），可以使用强缓存，通过设置较长的`max-age`，例如：`Cache-Control: public, max-age=31536000`（一年），减少网络请求，提高性能。\n- **频繁更新的资源**：\n  - 对于经常更新的资源，如 HTML 页面，可以使用协商缓存，通过`ETag`或`Last-Modified`进行验证，确保每次获取的都是最新的资源。\n- **缓存失效机制**：\n  - 对于可能会被更新的资源，使用`Cache-Control: no-cache`，让浏览器每次都向服务器发送请求，但服务器会根据协商缓存机制决定是否返回新资源。\n\n### 四、浏览器缓存的流程\n\n1. 浏览器第一次请求资源时，服务器根据资源的性质和配置，在响应头中设置相应的缓存控制信息（如`Cache-Control`、`Expires`、`ETag`、`Last-Modified`等）。\n2. 浏览器根据响应头中的信息决定是否将资源存储在本地缓存中。\n3. 当浏览器再次请求该资源时：\n\n- 对于强缓存，如果未过期，直接从本地缓存中获取资源，不向服务器发送请求。\n- 对于协商缓存，会带上相应的验证信息（如`If-Modified-Since`或`If-None-Match`）向服务器请求，服务器根据验证信息决定是否使用本地缓存或返回新资源。\n\n### 五、缓存的优缺点\n\n- **优点**：\n  - 提高网页加载速度，减少网络延迟和带宽使用，提高用户体验。\n  - 减轻服务器负载，减少服务器的请求处理量。\n- **缺点**：\n  - 可能导致用户获取到过期的资源，尤其是在使用强缓存时，更新资源可能无法及时生效，需要等待缓存过期或手动清除缓存。\n  - 对于一些动态内容，如果错误地使用了强缓存，可能会影响用户看到最新信息。\n\n### 六、缓存的清除和更新\n\n- **手动清除**：用户可以通过浏览器的清除缓存功能，将本地缓存清除，重新从服务器获取资源。\n- **自动更新：**\n  - 通过合理设置缓存策略，如协商缓存，确保资源更新时能够被服务器验证，及时更新到最新资源。\n  - 对于一些需要强制更新的情况，可以使用版本号或修改文件名的方式，如将`script.js`改为`script-v2.js`，使浏览器将其视为新的资源进行请求。\n\n\n\n## script 标签阻塞页面解析\n\n- 在浏览器解析 HTML 过程中，**遇到了 script 标签是不能继续构建 DOM 树的** \n- 他会停止继续构建，**首先下载 JavaScript 代码，并且执行 JavaScript 代码** \n- 只有 **等到 JavaScript 脚本执行结束后，才会继续解析 HTML，构建 DOM 树** \n\n原因：\n\n- JavaScript 的作用之一就是操作 DOM，并且可以修改 DOM\n- 如果我们 **等到 DOM 树构建完成并且渲染在执行 JavaScript，会造成严重的回流和重绘** ，影响页面的性能\n- 在**遇到 script 元素时，优先下载和执行 JavaScript 代码，再继续构建 DOM 树** \n\n带来的问题：\n\n- 再目前的开发模式中（Vue、React），脚本往往比 HTML 页面更 ”重“，处理时间要更长\n- 所以会造成页面解析阻塞，再脚本下载，执行完成之前，用户无法在界面上看到内容\n- 为了解决这个问题，**script 元素提供了两个属性（attribute）：defer 和 async** \n- *浏览器在解决这个问题时，做了一个优化操作，在解析 HTML 时，当 遇到 script 发生阻塞时，优先渲染已经生成的 DOM 树* \n\n\n\n## Defer 属性和 Async 属性\n\ndefer 属性 **告诉浏览器不要等待脚本下载** ，而 **继续解析 HTML ，构建 DOM 树** \n\n- **脚本会有浏览器来进行下载，但是不会阻塞 DOM Tree 的构建过程** \n- 如果**脚本提前下载好了，他会等待 DOM Tree 构建完成，在 `DOMContentLoaded` 事件之前先执行 defer 中的代码** \n- 在**使用 defer 属性的 script 文件中可以获取 DOM 元素** \n- defer 属性会**保证加载和执行 script 文件的顺序** \n- 从某种角度来说，defer 可以提高页面的性能，并且推荐放到 header 标签中\n- defer 仅适用于外部脚本，对于 script 默认内容会被忽略\n  - `<script defer> console.log('test') </script>` ，无意义，会被忽略\n\n```js\n// a.js\nconsole.log('a script execute')\n// b.js\nconsole.log('b script execute')\n```\n\n```html\n<!-- index.html -->\n<div>Hello</div>\n<script src=\"b.js\" defer></script>\n<script src=\"a.js\" defer></script>\n<script>\n\twindow.addEventListenser('DOMContentLoaded', () => {\n        console.log('dom content loaded')\n    })\n</script>\n<div>Content</div>\n```\n\n如上代码执行顺序为：\n\n1. 添加监听事件 `DOMContentLoaded` \n2. 渲染 Hello 和 Content 内容\n3. 输出 `b script execute` \n4. 输出 `a script execute` \n5. 输出 `dom content loaded` \n\n\n\n**async 特性与 defer 有些类似，它也能够让脚本不阻塞页面**\n\n- async 时让一个脚本完全独立\n  - 浏览器 **不会因为 async 脚本而阻塞**（与 defer 类似）\n  - **async 脚本不能够保证顺序，他是独立下载、独立运行、不会等待其他脚本** \n  - **async 不能保证在 `DOMContentLoaded` 之前或者之后执行** \n\n\n\n**defer 通常用于需要在文档解析后操作 DOM 的 JavaScript 代码，并且对于多个 script 文件有顺序的要求** \n\n**async 通常用于独立的脚本，对其他脚本，甚至 DOM 没有依赖** \n\n\n\n## JS 执行原理\n\n浏览器内核由两部分组成，以 `webkit` 为例\n\n- `WebCore`: 负责 HTML 解析、布局、渲染等相关的工作\n- `JavaScriptCore`: 解析、执行 JavaScript 代码\n\n**V8 引擎的执行原理：** \n\n- V8 是使用 C++ 编写的 Google 开源的 **高性能 JavaScript 和 `WebAssembly` 引擎**  ，它用于 Chrome 和 Node.js 等\n- 它实现了 ECMAScript 和 `WebAssembly` ，并支持跨平台操作\n- V8 可以独立运行，也可以嵌入到如何 C++ 应用程序中\n\n<!-- ![](v8.png) -->\n{% asset_img v8.png This is an image %}\n\nParse 模块会将 JavaScript 代码转化成 AST （抽象语法树），这是因为解释器并不直接认识 JavaScript 代码\n\n- **如果函数没有被调用，那么是不会被转换成 AST 的** \n\nIgnition 是一个解析器，会将 AST 转化成 `ByteCode`（字节码）\n\n- 同时**会收集 `TurboFan` 优化所需要的信息**（比如函数参数的类型信息，有了类型才能进行真实的计算）\n- 如果**函数只调用一次，Ignition 会解释执行 `ByteCode`**  \n\n`TurboFan` 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码\n\n- 如果一个函数被多次调用那么就会被标记为 **热点函数** ，那么就会 **通过 `TurboFan` 转化成优化后的机器码**，提高代码执行的性能\n- 但是，**机器码实际上也会被还原为 `ByteCode`**  这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转化为字节码\n\n![](ast生成过程.png)\n\n1. 词法分析（lexical analysis）\n   - 将字符序列转换成 token 序列的过程\n   - token 是记号化（tokenization）缩写\n   - 词法分析器（lexical analyzer 简称）也叫扫描器（scanner）\n2. 语法分析（syntactic analysis，也叫 parsing）\n   - 语法分析器也可以称之为 parser\n\n\n\n## JS 执行栈\n\n\n\n\n\n## 虚拟 DOM\n\n虚拟 DOM 可以更好的跨平台，通过生成相应的 AST（抽象语法树）进行可以在多平台复用\n\nVue/React 框架在数据更新时，不知道哪个组件使用了该数据，该要更新哪个组件，所以会使用 diff 算法进行对比进行渲染某个特定的组件。使用虚拟 DOM 不需要全量生成真实 DOM 渲染页面，从而能优化运行时速度\n\n","slug":"broswer","published":1,"updated":"2025-09-03T16:29:24.956Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkfeo0001r44ygnm4ekmi","content":"<h2 id=\"浏览器进程模型\"><a href=\"#浏览器进程模型\" class=\"headerlink\" title=\"浏览器进程模型\"></a>浏览器进程模型</h2><p>最主要的进程包括：</p>\n<ol>\n<li>浏览器进程：主要负责界面展示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务</li>\n<li>网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务</li>\n<li>渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间互不影响</li>\n</ol>\n<h3 id=\"渲染进程\"><a href=\"#渲染进程\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h3><ol>\n<li>在最开始的时候，渲染主线程会进入一个无限循环</li>\n<li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完之后进入下一个循环，如果没有，则进入休眠状态</li>\n<li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加入到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li>\n</ol>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><ul>\n<li>单线程是异步产生的原因</li>\n<li>事件循环是异步实现的方式</li>\n</ul>\n<p>JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p>\n<p>而渲染主线程承担着诸多的工作，渲染页面，执行 JS 都在其中运行。</p>\n<p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程拜拜的消耗事件，另一方面导致页面无法及时更新，给用户造成卡死现象。</p>\n<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他任务完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p>\n<p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p><strong>任务没有优先级，在消息队列中先进先出，消息队列是由有先级的</strong> </p>\n<ul>\n<li>每个任务都有一个任务类型，<strong>同一个类型的任务必须在同一个队列中，不同类型的任务可以分属于不同的队列</strong>。在<strong>一次事件循环中，浏览器可以根据实际的情况从不同的队列中取出任务执行。</strong> </li>\n<li><strong>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</strong></li>\n</ul>\n<p><em>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</em> </p>\n<p>在目前的 chrome 的实现中，至少包含了下面的队列：</p>\n<ol>\n<li><p>延时队列：用于存放计时器到达后的回调任务，优先级【中】</p>\n</li>\n<li><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】</p>\n</li>\n<li><p>微队列：用户存放需要最快执行的任务，优先级【最高】</p>\n<ol>\n<li><p>添加任务到微任务队列的主要方式是使用 <code>Promise</code>、<code>MultationObserver</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"JS-计时器\"><a href=\"#JS-计时器\" class=\"headerlink\" title=\"JS 计时器\"></a>JS 计时器</h2><p>JS 中的计时器不能做到精准计时：</p>\n<ol>\n<li>计算机硬件没有原子钟，无法做到精准计时</li>\n<li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li>\n<li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 <code>4 ms</code> 的最少事时间，这样在计算时时间少于 <code>4 ms</code> 时又带来了偏差</li>\n<li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li>\n</ol>\n<p><strong>嵌套<code>setTimeout</code>的延迟问题</strong> </p>\n<ul>\n<li><strong>最小延迟限制（4ms）</strong>：为了防止滥用定时器导致过度频繁的任务调度，浏览器对于嵌套超过一定层级（通常是 5 层）的<code>setTimeout</code>函数设置了一个最小延迟，一般是 4ms。这是一种性能优化策略，目的是避免过多的短延迟定时器任务占用过多的系统资源，从而影响浏览器的性能和用户体验。</li>\n<li><strong>具体原因分析</strong>：当嵌套多个<code>setTimeout</code>时，可能会导致一系列非常短延迟的任务排队等待执行。如果没有这个最小延迟限制，这些任务可能会频繁地打断浏览器的其他重要任务，如页面渲染、用户输入响应等。通过添加 4ms 的最小延迟，可以让浏览器有足够的时间来处理其他任务，同时也能在一定程度上保证定时器任务的执行。例如，在一些复杂的动画效果或者频繁的异步任务场景中，如果没有这个限制，可能会导致浏览器卡顿或者资源耗尽。</li>\n</ul>\n<h2 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a><a href=\"https://web.dev/articles/howbrowserswork?hl=zh-cn\">浏览器渲染</a></h2><h3 id=\"浏览器渲染页面过程\"><a href=\"#浏览器渲染页面过程\" class=\"headerlink\" title=\"浏览器渲染页面过程\"></a>浏览器渲染页面过程</h3><p><img src=\"/paw/2025/04/04/broswer/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png\"></p>\n<ol>\n<li>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列</li>\n<li>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</li>\n<li>整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成下一个阶段的输入。<ul>\n<li>HTML 解析过程<ul>\n<li>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件</li>\n<li>如果主线程解析到 link 标签位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作时在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</li>\n<li>如果主线程解析到 script 标签位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML，这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停，这就是 JS 会阻塞 HTML 解析的根本原因。</li>\n</ul>\n</li>\n<li>样式计算<ul>\n<li>主线程会遍历得到的 DOM 树，依次微树中的每个节点计算出他最终的样式，称之为 Computed Style</li>\n<li>在这一过程中，很多预设值会变成绝对值，例如 <code>red</code> 会变成 <code>rgb(255, 0, 0);</code> 相对单位会变成绝对单位，例如 <code>em</code> 会变成 <code>px</code> 。这一步完成后，会得到一棵带有样式的 DOM 树。</li>\n</ul>\n</li>\n<li>布局，布局完成后会得到布局树<ul>\n<li>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含快的位置</li>\n<li>大部分时候，DOM 树和布局树并非一一对应。比如 <code>display: none;</code> 的节点没有集合信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树种不存在这些为元素节点，但他们拥有几何信息，所以会生成到布局树种。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</li>\n</ul>\n</li>\n<li>分层<ul>\n<li>主线程会使用一套复杂的渲染对整个布局树种进行分层</li>\n<li>分层的好处在于，将来某一层改变后，仅会对该层进行后续处理，从而提升效率。</li>\n<li>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层的结果，也可以通过 <code>will-change</code> 属性更大程度的影响分层结果。</li>\n</ul>\n</li>\n<li>分块<ul>\n<li>主线程会为每个层单独生成绘制指令集，用于描述这一层的内容该如何画出来。</li>\n<li>完成绘制后，主线程将每个图层的绘制信息交给合成线程，剩余的工作将由合成线程完成。</li>\n<li>合成线程首先对每个图层进行分块，将其划分为更多的小区域，它会从线程池种拿取多个线程来完成分块工作</li>\n</ul>\n</li>\n<li>光栅化<ul>\n<li>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化</li>\n<li>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</li>\n<li>光栅化的结果就是一块一块的位图</li>\n</ul>\n</li>\n<li>画<ul>\n<li>合成线程拿到每个层，每个块的位图后，生成一个个指引（quad）信息。</li>\n<li>指引会标识出每个位图应该画到哪个位置，以及会考虑旋转、缩放等变形</li>\n<li>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因</li>\n<li>合成线程会把 quad 提交给 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"reflow\"><a href=\"#reflow\" class=\"headerlink\" title=\"reflow\"></a>reflow</h3><p>reflow 的本质就是重新计算 layout 树。</p>\n<p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout</p>\n<p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算，所以改动属性造成的 reflow 是异步完成的。当 JS 获取布局属性时，就可能照成无法获取到最新的布局信息。</p>\n<p>浏览器在反复权衡下，最终决定获取属性立即 reflow</p>\n<h3 id=\"repaint\"><a href=\"#repaint\" class=\"headerlink\" title=\"repaint\"></a>repaint</h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令</p>\n<p>当改动了可见样式后，会引发 repaint</p>\n<p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</p>\n<h3 id=\"transform-效率\"><a href=\"#transform-效率\" class=\"headerlink\" title=\"transform 效率\"></a>transform 效率</h3><p>由于 transform 既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个 draw 阶段</p>\n<p>由于 draw 阶段在合成线程种，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>\n<p> 浏览器渲染过程</p>\n<p><img src=\"https://web.dev/static/articles/howbrowserswork/image/webkit-main-flow-b779d50c0cf28.png?hl=zh-cn\" alt=\"WebKit 主要流程。\"> </p>\n<p>浏览器渲染DOM树</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Hello World</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;example.png&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染的 DOM 树如下</p>\n<p><img src=\"https://web.dev/static/articles/howbrowserswork/image/dom-tree-the-example-mar-70be67fe14c9a_960.png?hl=zh-cn\"></p>\n<h3 id=\"回流、重绘\"><a href=\"#回流、重绘\" class=\"headerlink\" title=\"回流、重绘\"></a>回流、重绘</h3><p><strong>回流 &#x2F; 重排（reflow）</strong> </p>\n<ul>\n<li>第一次确定节点的大小和位置，成为布局（Layout）</li>\n<li>之后对节点的大小，位置修改重新计算称之为回流</li>\n</ul>\n<p>引起回流：</p>\n<ol>\n<li>DOM 结构发生改变（添加新的节点或移除节点）</li>\n<li>改变了布局（width、height、padding、font-size 等）</li>\n<li>窗口 resize （修改窗口的尺寸等）</li>\n<li>调用 getCompuedStyle 方法获取尺寸、位置信息</li>\n</ol>\n<p><strong>重绘（repaint）</strong> </p>\n<ul>\n<li>第一次渲染内容称之为绘制</li>\n<li>之后重新渲染称之为重绘</li>\n</ul>\n<p>引起重绘：</p>\n<ol>\n<li>修改背景颜色、文字颜色、边框颜色、样式等</li>\n</ol>\n<p><strong>回流一定会引起重绘，所以回流是一种很消耗性能的事情</strong> </p>\n<p>避免回流的方式：</p>\n<ul>\n<li>修改样式时，尽量一次性修改<ul>\n<li>比如：通过 cssText 修改</li>\n<li>比如：通过添加 class 修改</li>\n</ul>\n</li>\n<li>尽量避免频繁的操作 DOM<ul>\n<li>可以在一个 DocumentFragment 或者父元素中将要操作的 DOM 操作完成，在一次性的操作</li>\n</ul>\n</li>\n<li>尽量避免通过 getComputedStyle 获取尺寸、位置等信息</li>\n<li>对某些元素使用 position 的 absolute、fixed<ul>\n<li>并不是不会回流，而是开销相对较小，不会对其他元素造成影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"composite-合成\"><a href=\"#composite-合成\" class=\"headerlink\" title=\"composite 合成\"></a>composite 合成</h3><ul>\n<li>绘制的过程，可以将布局后的元素绘制到多个合成图层中，这是浏览器的一种优化手段</li>\n<li>默认情况下， <strong>标准流中的内容都是被绘制在同一个图层（Layer）中的</strong> </li>\n<li>而一些特殊的属性，会创建一个新的合成层（Compositing Layer），并且新的图层可以利用 GPU 来加速绘制，因为 <strong>每个合成层都是单独渲染的</strong> </li>\n<li>常见的一些属性会导致形成新的合成层<ul>\n<li>3D transforms</li>\n<li>video、canvas、iframe</li>\n<li>opacity 动画转换时</li>\n<li>position: fixed</li>\n<li>will-change：一个实验性的属性，提前告知浏览器元素可能发生哪些变化</li>\n<li>animation 或 transition 设置 opacity、transform</li>\n</ul>\n</li>\n<li>分层确实可以提高新能，但是它以 <strong>内存管理为代价</strong> ，因此不应作为 web 性能优化策略的一部分过度使用</li>\n</ul>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存是一种将资源存储在本地的技术，其目的是为了减少网络请求，提高网页的加载速度和性能。当用户访问一个网页时，浏览器会将一些静态资源（如 JavaScript 文件、CSS 文件、图片、字体等）存储在本地，下次再访问相同网页或相关资源时，可以直接从本地获取，而不是每次都从服务器请求，从而节省时间和带宽。 </p>\n<h3 id=\"（一）强缓存\"><a href=\"#（一）强缓存\" class=\"headerlink\" title=\"（一）强缓存\"></a>（一）强缓存</h3><ul>\n<li><strong>Expires</strong>：<ul>\n<li>这是 HTTP&#x2F;1.0 中提出的缓存控制字段，它指定了资源的过期时间，是一个绝对时间，即资源在该时间之后失效。例如：<code>Expires: Wed, 21 Oct 2025 07:28:00 GMT</code>。</li>\n<li>缺点：它依赖于客户端的本地时间，如果客户端的时间不准确，可能导致缓存失效或长期不失效的问题。</li>\n</ul>\n</li>\n<li><strong>Cache-Control</strong>：<ul>\n<li>这是 HTTP&#x2F;1.1 中引入的缓存控制字段，相比<code>Expires</code>更加灵活和可靠，它可以设置多个指令，常见的指令包括：<ul>\n<li><code>public</code>：表示该资源既可以被浏览器缓存，也可以被代理服务器缓存。</li>\n<li><code>private</code>：表示该资源只能被浏览器缓存，不能被代理服务器缓存。</li>\n<li><code>max-age</code>：这是一个相对时间，表示资源的有效时长，单位为秒。例如：<code>Cache-Control: max-age=3600</code>，表示资源在请求后的 3600 秒内有效。</li>\n<li><code>no-cache</code>：表示需要先与服务器确认缓存是否有效，然后决定是否使用缓存，并非不缓存。</li>\n<li><code>no-store</code>：表示不进行缓存，每次都需要从服务器请求新资源。</li>\n</ul>\n</li>\n<li>示例：<code>Cache-Control: public, max-age=3600</code>，表示资源可被公共缓存，且在请求后的 1 小时内有效。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（二）协商缓存\"><a href=\"#（二）协商缓存\" class=\"headerlink\" title=\"（二）协商缓存\"></a>（二）协商缓存</h3><ul>\n<li><strong>Last-Modified 和 If-Modified-Since</strong>：<ul>\n<li>当服务器响应资源时，会在响应头中添加<code>Last-Modified</code>字段，记录资源的最后修改时间。例如：<code>Last-Modified: Wed, 21 Oct 2024 07:28:00 GMT</code>。</li>\n<li>当浏览器再次请求该资源时，会在请求头中带上<code>If-Modified-Since</code>字段，其值为之前服务器返回的<code>Last-Modified</code>的值。</li>\n<li>服务器收到请求后，会将<code>If-Modified-Since</code>的值与资源的实际修改时间进行比较，如果未修改，则返回<code>304 Not Modified</code>状态码，浏览器会使用本地缓存；如果修改了，则返回新资源和新的<code>Last-Modified</code>时间。</li>\n</ul>\n</li>\n<li><strong>ETag 和 If-None-Match</strong>：<ul>\n<li><code>ETag</code>是服务器为资源生成的一个唯一标识符，通常是资源的哈希值或版本号，它比<code>Last-Modified</code>更精确，因为有些资源可能会被修改但内容不变，仅通过修改时间无法准确判断。例如：<code>ETag: &quot;123456789abcdef&quot;</code>。</li>\n<li>当浏览器再次请求资源时，会在请求头中带上<code>If-None-Match</code>字段，其值为之前服务器返回的<code>ETag</code>的值。</li>\n<li>服务器收到请求后，会将<code>If-None-Match</code>的值与当前资源的<code>ETag</code>进行比较，如果匹配，返回<code>304 Not Modified</code>状态码，使用本地缓存；不匹配，则返回新资源和新的<code>ETag</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、缓存策略的选择和使用\"><a href=\"#三、缓存策略的选择和使用\" class=\"headerlink\" title=\"三、缓存策略的选择和使用\"></a>三、缓存策略的选择和使用</h3><ul>\n<li><strong>静态资源</strong>：<ul>\n<li>对于不经常更新的静态资源（如图片、CSS 文件、JavaScript 文件等），可以使用强缓存，通过设置较长的<code>max-age</code>，例如：<code>Cache-Control: public, max-age=31536000</code>（一年），减少网络请求，提高性能。</li>\n</ul>\n</li>\n<li><strong>频繁更新的资源</strong>：<ul>\n<li>对于经常更新的资源，如 HTML 页面，可以使用协商缓存，通过<code>ETag</code>或<code>Last-Modified</code>进行验证，确保每次获取的都是最新的资源。</li>\n</ul>\n</li>\n<li><strong>缓存失效机制</strong>：<ul>\n<li>对于可能会被更新的资源，使用<code>Cache-Control: no-cache</code>，让浏览器每次都向服务器发送请求，但服务器会根据协商缓存机制决定是否返回新资源。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、浏览器缓存的流程\"><a href=\"#四、浏览器缓存的流程\" class=\"headerlink\" title=\"四、浏览器缓存的流程\"></a>四、浏览器缓存的流程</h3><ol>\n<li>浏览器第一次请求资源时，服务器根据资源的性质和配置，在响应头中设置相应的缓存控制信息（如<code>Cache-Control</code>、<code>Expires</code>、<code>ETag</code>、<code>Last-Modified</code>等）。</li>\n<li>浏览器根据响应头中的信息决定是否将资源存储在本地缓存中。</li>\n<li>当浏览器再次请求该资源时：</li>\n</ol>\n<ul>\n<li>对于强缓存，如果未过期，直接从本地缓存中获取资源，不向服务器发送请求。</li>\n<li>对于协商缓存，会带上相应的验证信息（如<code>If-Modified-Since</code>或<code>If-None-Match</code>）向服务器请求，服务器根据验证信息决定是否使用本地缓存或返回新资源。</li>\n</ul>\n<h3 id=\"五、缓存的优缺点\"><a href=\"#五、缓存的优缺点\" class=\"headerlink\" title=\"五、缓存的优缺点\"></a>五、缓存的优缺点</h3><ul>\n<li><strong>优点</strong>：<ul>\n<li>提高网页加载速度，减少网络延迟和带宽使用，提高用户体验。</li>\n<li>减轻服务器负载，减少服务器的请求处理量。</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：<ul>\n<li>可能导致用户获取到过期的资源，尤其是在使用强缓存时，更新资源可能无法及时生效，需要等待缓存过期或手动清除缓存。</li>\n<li>对于一些动态内容，如果错误地使用了强缓存，可能会影响用户看到最新信息。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、缓存的清除和更新\"><a href=\"#六、缓存的清除和更新\" class=\"headerlink\" title=\"六、缓存的清除和更新\"></a>六、缓存的清除和更新</h3><ul>\n<li><strong>手动清除</strong>：用户可以通过浏览器的清除缓存功能，将本地缓存清除，重新从服务器获取资源。</li>\n<li><strong>自动更新：</strong><ul>\n<li>通过合理设置缓存策略，如协商缓存，确保资源更新时能够被服务器验证，及时更新到最新资源。</li>\n<li>对于一些需要强制更新的情况，可以使用版本号或修改文件名的方式，如将<code>script.js</code>改为<code>script-v2.js</code>，使浏览器将其视为新的资源进行请求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"script-标签阻塞页面解析\"><a href=\"#script-标签阻塞页面解析\" class=\"headerlink\" title=\"script 标签阻塞页面解析\"></a>script 标签阻塞页面解析</h2><ul>\n<li>在浏览器解析 HTML 过程中，<strong>遇到了 script 标签是不能继续构建 DOM 树的</strong> </li>\n<li>他会停止继续构建，<strong>首先下载 JavaScript 代码，并且执行 JavaScript 代码</strong> </li>\n<li>只有 <strong>等到 JavaScript 脚本执行结束后，才会继续解析 HTML，构建 DOM 树</strong></li>\n</ul>\n<p>原因：</p>\n<ul>\n<li>JavaScript 的作用之一就是操作 DOM，并且可以修改 DOM</li>\n<li>如果我们 <strong>等到 DOM 树构建完成并且渲染在执行 JavaScript，会造成严重的回流和重绘</strong> ，影响页面的性能</li>\n<li>在<strong>遇到 script 元素时，优先下载和执行 JavaScript 代码，再继续构建 DOM 树</strong></li>\n</ul>\n<p>带来的问题：</p>\n<ul>\n<li>再目前的开发模式中（Vue、React），脚本往往比 HTML 页面更 ”重“，处理时间要更长</li>\n<li>所以会造成页面解析阻塞，再脚本下载，执行完成之前，用户无法在界面上看到内容</li>\n<li>为了解决这个问题，<strong>script 元素提供了两个属性（attribute）：defer 和 async</strong> </li>\n<li><em>浏览器在解决这个问题时，做了一个优化操作，在解析 HTML 时，当 遇到 script 发生阻塞时，优先渲染已经生成的 DOM 树</em></li>\n</ul>\n<h2 id=\"Defer-属性和-Async-属性\"><a href=\"#Defer-属性和-Async-属性\" class=\"headerlink\" title=\"Defer 属性和 Async 属性\"></a>Defer 属性和 Async 属性</h2><p>defer 属性 <strong>告诉浏览器不要等待脚本下载</strong> ，而 <strong>继续解析 HTML ，构建 DOM 树</strong> </p>\n<ul>\n<li><strong>脚本会有浏览器来进行下载，但是不会阻塞 DOM Tree 的构建过程</strong> </li>\n<li>如果<strong>脚本提前下载好了，他会等待 DOM Tree 构建完成，在 <code>DOMContentLoaded</code> 事件之前先执行 defer 中的代码</strong> </li>\n<li>在<strong>使用 defer 属性的 script 文件中可以获取 DOM 元素</strong> </li>\n<li>defer 属性会<strong>保证加载和执行 script 文件的顺序</strong> </li>\n<li>从某种角度来说，defer 可以提高页面的性能，并且推荐放到 header 标签中</li>\n<li>defer 仅适用于外部脚本，对于 script 默认内容会被忽略<ul>\n<li><code>&lt;script defer&gt; console.log(&#39;test&#39;) &lt;/script&gt;</code> ，无意义，会被忽略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a script execute&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b script execute&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListenser</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dom content loaded&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码执行顺序为：</p>\n<ol>\n<li>添加监听事件 <code>DOMContentLoaded</code> </li>\n<li>渲染 Hello 和 Content 内容</li>\n<li>输出 <code>b script execute</code> </li>\n<li>输出 <code>a script execute</code> </li>\n<li>输出 <code>dom content loaded</code></li>\n</ol>\n<p><strong>async 特性与 defer 有些类似，它也能够让脚本不阻塞页面</strong></p>\n<ul>\n<li>async 时让一个脚本完全独立<ul>\n<li>浏览器 <strong>不会因为 async 脚本而阻塞</strong>（与 defer 类似）</li>\n<li><strong>async 脚本不能够保证顺序，他是独立下载、独立运行、不会等待其他脚本</strong> </li>\n<li><strong>async 不能保证在 <code>DOMContentLoaded</code> 之前或者之后执行</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>defer 通常用于需要在文档解析后操作 DOM 的 JavaScript 代码，并且对于多个 script 文件有顺序的要求</strong> </p>\n<p><strong>async 通常用于独立的脚本，对其他脚本，甚至 DOM 没有依赖</strong> </p>\n<h2 id=\"JS-执行原理\"><a href=\"#JS-执行原理\" class=\"headerlink\" title=\"JS 执行原理\"></a>JS 执行原理</h2><p>浏览器内核由两部分组成，以 <code>webkit</code> 为例</p>\n<ul>\n<li><code>WebCore</code>: 负责 HTML 解析、布局、渲染等相关的工作</li>\n<li><code>JavaScriptCore</code>: 解析、执行 JavaScript 代码</li>\n</ul>\n<p><strong>V8 引擎的执行原理：</strong> </p>\n<ul>\n<li>V8 是使用 C++ 编写的 Google 开源的 <strong>高性能 JavaScript 和 <code>WebAssembly</code> 引擎</strong>  ，它用于 Chrome 和 Node.js 等</li>\n<li>它实现了 ECMAScript 和 <code>WebAssembly</code> ，并支持跨平台操作</li>\n<li>V8 可以独立运行，也可以嵌入到如何 C++ 应用程序中</li>\n</ul>\n<!-- ![](v8.png) -->\n<img src=\"/paw/2025/04/04/broswer/v8.png\" class=\"\" title=\"This is an image\">\n\n<p>Parse 模块会将 JavaScript 代码转化成 AST （抽象语法树），这是因为解释器并不直接认识 JavaScript 代码</p>\n<ul>\n<li><strong>如果函数没有被调用，那么是不会被转换成 AST 的</strong></li>\n</ul>\n<p>Ignition 是一个解析器，会将 AST 转化成 <code>ByteCode</code>（字节码）</p>\n<ul>\n<li>同时<strong>会收集 <code>TurboFan</code> 优化所需要的信息</strong>（比如函数参数的类型信息，有了类型才能进行真实的计算）</li>\n<li>如果<strong>函数只调用一次，Ignition 会解释执行 <code>ByteCode</code></strong></li>\n</ul>\n<p><code>TurboFan</code> 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码</p>\n<ul>\n<li>如果一个函数被多次调用那么就会被标记为 <strong>热点函数</strong> ，那么就会 <strong>通过 <code>TurboFan</code> 转化成优化后的机器码</strong>，提高代码执行的性能</li>\n<li>但是，<strong>机器码实际上也会被还原为 <code>ByteCode</code></strong>  这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转化为字节码</li>\n</ul>\n<p><img src=\"/paw/2025/04/04/broswer/ast%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B.png\"></p>\n<ol>\n<li>词法分析（lexical analysis）<ul>\n<li>将字符序列转换成 token 序列的过程</li>\n<li>token 是记号化（tokenization）缩写</li>\n<li>词法分析器（lexical analyzer 简称）也叫扫描器（scanner）</li>\n</ul>\n</li>\n<li>语法分析（syntactic analysis，也叫 parsing）<ul>\n<li>语法分析器也可以称之为 parser</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"JS-执行栈\"><a href=\"#JS-执行栈\" class=\"headerlink\" title=\"JS 执行栈\"></a>JS 执行栈</h2><h2 id=\"虚拟-DOM\"><a href=\"#虚拟-DOM\" class=\"headerlink\" title=\"虚拟 DOM\"></a>虚拟 DOM</h2><p>虚拟 DOM 可以更好的跨平台，通过生成相应的 AST（抽象语法树）进行可以在多平台复用</p>\n<p>Vue&#x2F;React 框架在数据更新时，不知道哪个组件使用了该数据，该要更新哪个组件，所以会使用 diff 算法进行对比进行渲染某个特定的组件。使用虚拟 DOM 不需要全量生成真实 DOM 渲染页面，从而能优化运行时速度</p>\n","excerpt":"","more":"<h2 id=\"浏览器进程模型\"><a href=\"#浏览器进程模型\" class=\"headerlink\" title=\"浏览器进程模型\"></a>浏览器进程模型</h2><p>最主要的进程包括：</p>\n<ol>\n<li>浏览器进程：主要负责界面展示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务</li>\n<li>网络进程：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务</li>\n<li>渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间互不影响</li>\n</ol>\n<h3 id=\"渲染进程\"><a href=\"#渲染进程\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h3><ol>\n<li>在最开始的时候，渲染主线程会进入一个无限循环</li>\n<li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完之后进入下一个循环，如果没有，则进入休眠状态</li>\n<li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加入到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li>\n</ol>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><ul>\n<li>单线程是异步产生的原因</li>\n<li>事件循环是异步实现的方式</li>\n</ul>\n<p>JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p>\n<p>而渲染主线程承担着诸多的工作，渲染页面，执行 JS 都在其中运行。</p>\n<p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程拜拜的消耗事件，另一方面导致页面无法及时更新，给用户造成卡死现象。</p>\n<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他任务完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p>\n<p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p><strong>任务没有优先级，在消息队列中先进先出，消息队列是由有先级的</strong> </p>\n<ul>\n<li>每个任务都有一个任务类型，<strong>同一个类型的任务必须在同一个队列中，不同类型的任务可以分属于不同的队列</strong>。在<strong>一次事件循环中，浏览器可以根据实际的情况从不同的队列中取出任务执行。</strong> </li>\n<li><strong>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</strong></li>\n</ul>\n<p><em>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</em> </p>\n<p>在目前的 chrome 的实现中，至少包含了下面的队列：</p>\n<ol>\n<li><p>延时队列：用于存放计时器到达后的回调任务，优先级【中】</p>\n</li>\n<li><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】</p>\n</li>\n<li><p>微队列：用户存放需要最快执行的任务，优先级【最高】</p>\n<ol>\n<li><p>添加任务到微任务队列的主要方式是使用 <code>Promise</code>、<code>MultationObserver</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"JS-计时器\"><a href=\"#JS-计时器\" class=\"headerlink\" title=\"JS 计时器\"></a>JS 计时器</h2><p>JS 中的计时器不能做到精准计时：</p>\n<ol>\n<li>计算机硬件没有原子钟，无法做到精准计时</li>\n<li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li>\n<li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 <code>4 ms</code> 的最少事时间，这样在计算时时间少于 <code>4 ms</code> 时又带来了偏差</li>\n<li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li>\n</ol>\n<p><strong>嵌套<code>setTimeout</code>的延迟问题</strong> </p>\n<ul>\n<li><strong>最小延迟限制（4ms）</strong>：为了防止滥用定时器导致过度频繁的任务调度，浏览器对于嵌套超过一定层级（通常是 5 层）的<code>setTimeout</code>函数设置了一个最小延迟，一般是 4ms。这是一种性能优化策略，目的是避免过多的短延迟定时器任务占用过多的系统资源，从而影响浏览器的性能和用户体验。</li>\n<li><strong>具体原因分析</strong>：当嵌套多个<code>setTimeout</code>时，可能会导致一系列非常短延迟的任务排队等待执行。如果没有这个最小延迟限制，这些任务可能会频繁地打断浏览器的其他重要任务，如页面渲染、用户输入响应等。通过添加 4ms 的最小延迟，可以让浏览器有足够的时间来处理其他任务，同时也能在一定程度上保证定时器任务的执行。例如，在一些复杂的动画效果或者频繁的异步任务场景中，如果没有这个限制，可能会导致浏览器卡顿或者资源耗尽。</li>\n</ul>\n<h2 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a><a href=\"https://web.dev/articles/howbrowserswork?hl=zh-cn\">浏览器渲染</a></h2><h3 id=\"浏览器渲染页面过程\"><a href=\"#浏览器渲染页面过程\" class=\"headerlink\" title=\"浏览器渲染页面过程\"></a>浏览器渲染页面过程</h3><p><img src=\"/paw/2025/04/04/broswer/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png\"></p>\n<ol>\n<li>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列</li>\n<li>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</li>\n<li>整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成下一个阶段的输入。<ul>\n<li>HTML 解析过程<ul>\n<li>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件</li>\n<li>如果主线程解析到 link 标签位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作时在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</li>\n<li>如果主线程解析到 script 标签位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML，这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停，这就是 JS 会阻塞 HTML 解析的根本原因。</li>\n</ul>\n</li>\n<li>样式计算<ul>\n<li>主线程会遍历得到的 DOM 树，依次微树中的每个节点计算出他最终的样式，称之为 Computed Style</li>\n<li>在这一过程中，很多预设值会变成绝对值，例如 <code>red</code> 会变成 <code>rgb(255, 0, 0);</code> 相对单位会变成绝对单位，例如 <code>em</code> 会变成 <code>px</code> 。这一步完成后，会得到一棵带有样式的 DOM 树。</li>\n</ul>\n</li>\n<li>布局，布局完成后会得到布局树<ul>\n<li>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含快的位置</li>\n<li>大部分时候，DOM 树和布局树并非一一对应。比如 <code>display: none;</code> 的节点没有集合信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树种不存在这些为元素节点，但他们拥有几何信息，所以会生成到布局树种。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</li>\n</ul>\n</li>\n<li>分层<ul>\n<li>主线程会使用一套复杂的渲染对整个布局树种进行分层</li>\n<li>分层的好处在于，将来某一层改变后，仅会对该层进行后续处理，从而提升效率。</li>\n<li>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层的结果，也可以通过 <code>will-change</code> 属性更大程度的影响分层结果。</li>\n</ul>\n</li>\n<li>分块<ul>\n<li>主线程会为每个层单独生成绘制指令集，用于描述这一层的内容该如何画出来。</li>\n<li>完成绘制后，主线程将每个图层的绘制信息交给合成线程，剩余的工作将由合成线程完成。</li>\n<li>合成线程首先对每个图层进行分块，将其划分为更多的小区域，它会从线程池种拿取多个线程来完成分块工作</li>\n</ul>\n</li>\n<li>光栅化<ul>\n<li>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化</li>\n<li>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</li>\n<li>光栅化的结果就是一块一块的位图</li>\n</ul>\n</li>\n<li>画<ul>\n<li>合成线程拿到每个层，每个块的位图后，生成一个个指引（quad）信息。</li>\n<li>指引会标识出每个位图应该画到哪个位置，以及会考虑旋转、缩放等变形</li>\n<li>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因</li>\n<li>合成线程会把 quad 提交给 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"reflow\"><a href=\"#reflow\" class=\"headerlink\" title=\"reflow\"></a>reflow</h3><p>reflow 的本质就是重新计算 layout 树。</p>\n<p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout</p>\n<p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算，所以改动属性造成的 reflow 是异步完成的。当 JS 获取布局属性时，就可能照成无法获取到最新的布局信息。</p>\n<p>浏览器在反复权衡下，最终决定获取属性立即 reflow</p>\n<h3 id=\"repaint\"><a href=\"#repaint\" class=\"headerlink\" title=\"repaint\"></a>repaint</h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令</p>\n<p>当改动了可见样式后，会引发 repaint</p>\n<p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</p>\n<h3 id=\"transform-效率\"><a href=\"#transform-效率\" class=\"headerlink\" title=\"transform 效率\"></a>transform 效率</h3><p>由于 transform 既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个 draw 阶段</p>\n<p>由于 draw 阶段在合成线程种，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>\n<p> 浏览器渲染过程</p>\n<p><img src=\"https://web.dev/static/articles/howbrowserswork/image/webkit-main-flow-b779d50c0cf28.png?hl=zh-cn\" alt=\"WebKit 主要流程。\"> </p>\n<p>浏览器渲染DOM树</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Hello World</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;example.png&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染的 DOM 树如下</p>\n<p><img src=\"https://web.dev/static/articles/howbrowserswork/image/dom-tree-the-example-mar-70be67fe14c9a_960.png?hl=zh-cn\"></p>\n<h3 id=\"回流、重绘\"><a href=\"#回流、重绘\" class=\"headerlink\" title=\"回流、重绘\"></a>回流、重绘</h3><p><strong>回流 &#x2F; 重排（reflow）</strong> </p>\n<ul>\n<li>第一次确定节点的大小和位置，成为布局（Layout）</li>\n<li>之后对节点的大小，位置修改重新计算称之为回流</li>\n</ul>\n<p>引起回流：</p>\n<ol>\n<li>DOM 结构发生改变（添加新的节点或移除节点）</li>\n<li>改变了布局（width、height、padding、font-size 等）</li>\n<li>窗口 resize （修改窗口的尺寸等）</li>\n<li>调用 getCompuedStyle 方法获取尺寸、位置信息</li>\n</ol>\n<p><strong>重绘（repaint）</strong> </p>\n<ul>\n<li>第一次渲染内容称之为绘制</li>\n<li>之后重新渲染称之为重绘</li>\n</ul>\n<p>引起重绘：</p>\n<ol>\n<li>修改背景颜色、文字颜色、边框颜色、样式等</li>\n</ol>\n<p><strong>回流一定会引起重绘，所以回流是一种很消耗性能的事情</strong> </p>\n<p>避免回流的方式：</p>\n<ul>\n<li>修改样式时，尽量一次性修改<ul>\n<li>比如：通过 cssText 修改</li>\n<li>比如：通过添加 class 修改</li>\n</ul>\n</li>\n<li>尽量避免频繁的操作 DOM<ul>\n<li>可以在一个 DocumentFragment 或者父元素中将要操作的 DOM 操作完成，在一次性的操作</li>\n</ul>\n</li>\n<li>尽量避免通过 getComputedStyle 获取尺寸、位置等信息</li>\n<li>对某些元素使用 position 的 absolute、fixed<ul>\n<li>并不是不会回流，而是开销相对较小，不会对其他元素造成影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"composite-合成\"><a href=\"#composite-合成\" class=\"headerlink\" title=\"composite 合成\"></a>composite 合成</h3><ul>\n<li>绘制的过程，可以将布局后的元素绘制到多个合成图层中，这是浏览器的一种优化手段</li>\n<li>默认情况下， <strong>标准流中的内容都是被绘制在同一个图层（Layer）中的</strong> </li>\n<li>而一些特殊的属性，会创建一个新的合成层（Compositing Layer），并且新的图层可以利用 GPU 来加速绘制，因为 <strong>每个合成层都是单独渲染的</strong> </li>\n<li>常见的一些属性会导致形成新的合成层<ul>\n<li>3D transforms</li>\n<li>video、canvas、iframe</li>\n<li>opacity 动画转换时</li>\n<li>position: fixed</li>\n<li>will-change：一个实验性的属性，提前告知浏览器元素可能发生哪些变化</li>\n<li>animation 或 transition 设置 opacity、transform</li>\n</ul>\n</li>\n<li>分层确实可以提高新能，但是它以 <strong>内存管理为代价</strong> ，因此不应作为 web 性能优化策略的一部分过度使用</li>\n</ul>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存是一种将资源存储在本地的技术，其目的是为了减少网络请求，提高网页的加载速度和性能。当用户访问一个网页时，浏览器会将一些静态资源（如 JavaScript 文件、CSS 文件、图片、字体等）存储在本地，下次再访问相同网页或相关资源时，可以直接从本地获取，而不是每次都从服务器请求，从而节省时间和带宽。 </p>\n<h3 id=\"（一）强缓存\"><a href=\"#（一）强缓存\" class=\"headerlink\" title=\"（一）强缓存\"></a>（一）强缓存</h3><ul>\n<li><strong>Expires</strong>：<ul>\n<li>这是 HTTP&#x2F;1.0 中提出的缓存控制字段，它指定了资源的过期时间，是一个绝对时间，即资源在该时间之后失效。例如：<code>Expires: Wed, 21 Oct 2025 07:28:00 GMT</code>。</li>\n<li>缺点：它依赖于客户端的本地时间，如果客户端的时间不准确，可能导致缓存失效或长期不失效的问题。</li>\n</ul>\n</li>\n<li><strong>Cache-Control</strong>：<ul>\n<li>这是 HTTP&#x2F;1.1 中引入的缓存控制字段，相比<code>Expires</code>更加灵活和可靠，它可以设置多个指令，常见的指令包括：<ul>\n<li><code>public</code>：表示该资源既可以被浏览器缓存，也可以被代理服务器缓存。</li>\n<li><code>private</code>：表示该资源只能被浏览器缓存，不能被代理服务器缓存。</li>\n<li><code>max-age</code>：这是一个相对时间，表示资源的有效时长，单位为秒。例如：<code>Cache-Control: max-age=3600</code>，表示资源在请求后的 3600 秒内有效。</li>\n<li><code>no-cache</code>：表示需要先与服务器确认缓存是否有效，然后决定是否使用缓存，并非不缓存。</li>\n<li><code>no-store</code>：表示不进行缓存，每次都需要从服务器请求新资源。</li>\n</ul>\n</li>\n<li>示例：<code>Cache-Control: public, max-age=3600</code>，表示资源可被公共缓存，且在请求后的 1 小时内有效。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（二）协商缓存\"><a href=\"#（二）协商缓存\" class=\"headerlink\" title=\"（二）协商缓存\"></a>（二）协商缓存</h3><ul>\n<li><strong>Last-Modified 和 If-Modified-Since</strong>：<ul>\n<li>当服务器响应资源时，会在响应头中添加<code>Last-Modified</code>字段，记录资源的最后修改时间。例如：<code>Last-Modified: Wed, 21 Oct 2024 07:28:00 GMT</code>。</li>\n<li>当浏览器再次请求该资源时，会在请求头中带上<code>If-Modified-Since</code>字段，其值为之前服务器返回的<code>Last-Modified</code>的值。</li>\n<li>服务器收到请求后，会将<code>If-Modified-Since</code>的值与资源的实际修改时间进行比较，如果未修改，则返回<code>304 Not Modified</code>状态码，浏览器会使用本地缓存；如果修改了，则返回新资源和新的<code>Last-Modified</code>时间。</li>\n</ul>\n</li>\n<li><strong>ETag 和 If-None-Match</strong>：<ul>\n<li><code>ETag</code>是服务器为资源生成的一个唯一标识符，通常是资源的哈希值或版本号，它比<code>Last-Modified</code>更精确，因为有些资源可能会被修改但内容不变，仅通过修改时间无法准确判断。例如：<code>ETag: &quot;123456789abcdef&quot;</code>。</li>\n<li>当浏览器再次请求资源时，会在请求头中带上<code>If-None-Match</code>字段，其值为之前服务器返回的<code>ETag</code>的值。</li>\n<li>服务器收到请求后，会将<code>If-None-Match</code>的值与当前资源的<code>ETag</code>进行比较，如果匹配，返回<code>304 Not Modified</code>状态码，使用本地缓存；不匹配，则返回新资源和新的<code>ETag</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、缓存策略的选择和使用\"><a href=\"#三、缓存策略的选择和使用\" class=\"headerlink\" title=\"三、缓存策略的选择和使用\"></a>三、缓存策略的选择和使用</h3><ul>\n<li><strong>静态资源</strong>：<ul>\n<li>对于不经常更新的静态资源（如图片、CSS 文件、JavaScript 文件等），可以使用强缓存，通过设置较长的<code>max-age</code>，例如：<code>Cache-Control: public, max-age=31536000</code>（一年），减少网络请求，提高性能。</li>\n</ul>\n</li>\n<li><strong>频繁更新的资源</strong>：<ul>\n<li>对于经常更新的资源，如 HTML 页面，可以使用协商缓存，通过<code>ETag</code>或<code>Last-Modified</code>进行验证，确保每次获取的都是最新的资源。</li>\n</ul>\n</li>\n<li><strong>缓存失效机制</strong>：<ul>\n<li>对于可能会被更新的资源，使用<code>Cache-Control: no-cache</code>，让浏览器每次都向服务器发送请求，但服务器会根据协商缓存机制决定是否返回新资源。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、浏览器缓存的流程\"><a href=\"#四、浏览器缓存的流程\" class=\"headerlink\" title=\"四、浏览器缓存的流程\"></a>四、浏览器缓存的流程</h3><ol>\n<li>浏览器第一次请求资源时，服务器根据资源的性质和配置，在响应头中设置相应的缓存控制信息（如<code>Cache-Control</code>、<code>Expires</code>、<code>ETag</code>、<code>Last-Modified</code>等）。</li>\n<li>浏览器根据响应头中的信息决定是否将资源存储在本地缓存中。</li>\n<li>当浏览器再次请求该资源时：</li>\n</ol>\n<ul>\n<li>对于强缓存，如果未过期，直接从本地缓存中获取资源，不向服务器发送请求。</li>\n<li>对于协商缓存，会带上相应的验证信息（如<code>If-Modified-Since</code>或<code>If-None-Match</code>）向服务器请求，服务器根据验证信息决定是否使用本地缓存或返回新资源。</li>\n</ul>\n<h3 id=\"五、缓存的优缺点\"><a href=\"#五、缓存的优缺点\" class=\"headerlink\" title=\"五、缓存的优缺点\"></a>五、缓存的优缺点</h3><ul>\n<li><strong>优点</strong>：<ul>\n<li>提高网页加载速度，减少网络延迟和带宽使用，提高用户体验。</li>\n<li>减轻服务器负载，减少服务器的请求处理量。</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：<ul>\n<li>可能导致用户获取到过期的资源，尤其是在使用强缓存时，更新资源可能无法及时生效，需要等待缓存过期或手动清除缓存。</li>\n<li>对于一些动态内容，如果错误地使用了强缓存，可能会影响用户看到最新信息。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、缓存的清除和更新\"><a href=\"#六、缓存的清除和更新\" class=\"headerlink\" title=\"六、缓存的清除和更新\"></a>六、缓存的清除和更新</h3><ul>\n<li><strong>手动清除</strong>：用户可以通过浏览器的清除缓存功能，将本地缓存清除，重新从服务器获取资源。</li>\n<li><strong>自动更新：</strong><ul>\n<li>通过合理设置缓存策略，如协商缓存，确保资源更新时能够被服务器验证，及时更新到最新资源。</li>\n<li>对于一些需要强制更新的情况，可以使用版本号或修改文件名的方式，如将<code>script.js</code>改为<code>script-v2.js</code>，使浏览器将其视为新的资源进行请求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"script-标签阻塞页面解析\"><a href=\"#script-标签阻塞页面解析\" class=\"headerlink\" title=\"script 标签阻塞页面解析\"></a>script 标签阻塞页面解析</h2><ul>\n<li>在浏览器解析 HTML 过程中，<strong>遇到了 script 标签是不能继续构建 DOM 树的</strong> </li>\n<li>他会停止继续构建，<strong>首先下载 JavaScript 代码，并且执行 JavaScript 代码</strong> </li>\n<li>只有 <strong>等到 JavaScript 脚本执行结束后，才会继续解析 HTML，构建 DOM 树</strong></li>\n</ul>\n<p>原因：</p>\n<ul>\n<li>JavaScript 的作用之一就是操作 DOM，并且可以修改 DOM</li>\n<li>如果我们 <strong>等到 DOM 树构建完成并且渲染在执行 JavaScript，会造成严重的回流和重绘</strong> ，影响页面的性能</li>\n<li>在<strong>遇到 script 元素时，优先下载和执行 JavaScript 代码，再继续构建 DOM 树</strong></li>\n</ul>\n<p>带来的问题：</p>\n<ul>\n<li>再目前的开发模式中（Vue、React），脚本往往比 HTML 页面更 ”重“，处理时间要更长</li>\n<li>所以会造成页面解析阻塞，再脚本下载，执行完成之前，用户无法在界面上看到内容</li>\n<li>为了解决这个问题，<strong>script 元素提供了两个属性（attribute）：defer 和 async</strong> </li>\n<li><em>浏览器在解决这个问题时，做了一个优化操作，在解析 HTML 时，当 遇到 script 发生阻塞时，优先渲染已经生成的 DOM 树</em></li>\n</ul>\n<h2 id=\"Defer-属性和-Async-属性\"><a href=\"#Defer-属性和-Async-属性\" class=\"headerlink\" title=\"Defer 属性和 Async 属性\"></a>Defer 属性和 Async 属性</h2><p>defer 属性 <strong>告诉浏览器不要等待脚本下载</strong> ，而 <strong>继续解析 HTML ，构建 DOM 树</strong> </p>\n<ul>\n<li><strong>脚本会有浏览器来进行下载，但是不会阻塞 DOM Tree 的构建过程</strong> </li>\n<li>如果<strong>脚本提前下载好了，他会等待 DOM Tree 构建完成，在 <code>DOMContentLoaded</code> 事件之前先执行 defer 中的代码</strong> </li>\n<li>在<strong>使用 defer 属性的 script 文件中可以获取 DOM 元素</strong> </li>\n<li>defer 属性会<strong>保证加载和执行 script 文件的顺序</strong> </li>\n<li>从某种角度来说，defer 可以提高页面的性能，并且推荐放到 header 标签中</li>\n<li>defer 仅适用于外部脚本，对于 script 默认内容会被忽略<ul>\n<li><code>&lt;script defer&gt; console.log(&#39;test&#39;) &lt;/script&gt;</code> ，无意义，会被忽略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a script execute&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b script execute&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListenser</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dom content loaded&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码执行顺序为：</p>\n<ol>\n<li>添加监听事件 <code>DOMContentLoaded</code> </li>\n<li>渲染 Hello 和 Content 内容</li>\n<li>输出 <code>b script execute</code> </li>\n<li>输出 <code>a script execute</code> </li>\n<li>输出 <code>dom content loaded</code></li>\n</ol>\n<p><strong>async 特性与 defer 有些类似，它也能够让脚本不阻塞页面</strong></p>\n<ul>\n<li>async 时让一个脚本完全独立<ul>\n<li>浏览器 <strong>不会因为 async 脚本而阻塞</strong>（与 defer 类似）</li>\n<li><strong>async 脚本不能够保证顺序，他是独立下载、独立运行、不会等待其他脚本</strong> </li>\n<li><strong>async 不能保证在 <code>DOMContentLoaded</code> 之前或者之后执行</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>defer 通常用于需要在文档解析后操作 DOM 的 JavaScript 代码，并且对于多个 script 文件有顺序的要求</strong> </p>\n<p><strong>async 通常用于独立的脚本，对其他脚本，甚至 DOM 没有依赖</strong> </p>\n<h2 id=\"JS-执行原理\"><a href=\"#JS-执行原理\" class=\"headerlink\" title=\"JS 执行原理\"></a>JS 执行原理</h2><p>浏览器内核由两部分组成，以 <code>webkit</code> 为例</p>\n<ul>\n<li><code>WebCore</code>: 负责 HTML 解析、布局、渲染等相关的工作</li>\n<li><code>JavaScriptCore</code>: 解析、执行 JavaScript 代码</li>\n</ul>\n<p><strong>V8 引擎的执行原理：</strong> </p>\n<ul>\n<li>V8 是使用 C++ 编写的 Google 开源的 <strong>高性能 JavaScript 和 <code>WebAssembly</code> 引擎</strong>  ，它用于 Chrome 和 Node.js 等</li>\n<li>它实现了 ECMAScript 和 <code>WebAssembly</code> ，并支持跨平台操作</li>\n<li>V8 可以独立运行，也可以嵌入到如何 C++ 应用程序中</li>\n</ul>\n<!-- ![](v8.png) -->\n<img src=\"/paw/2025/04/04/broswer/v8.png\" class=\"\" title=\"This is an image\">\n\n<p>Parse 模块会将 JavaScript 代码转化成 AST （抽象语法树），这是因为解释器并不直接认识 JavaScript 代码</p>\n<ul>\n<li><strong>如果函数没有被调用，那么是不会被转换成 AST 的</strong></li>\n</ul>\n<p>Ignition 是一个解析器，会将 AST 转化成 <code>ByteCode</code>（字节码）</p>\n<ul>\n<li>同时<strong>会收集 <code>TurboFan</code> 优化所需要的信息</strong>（比如函数参数的类型信息，有了类型才能进行真实的计算）</li>\n<li>如果<strong>函数只调用一次，Ignition 会解释执行 <code>ByteCode</code></strong></li>\n</ul>\n<p><code>TurboFan</code> 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码</p>\n<ul>\n<li>如果一个函数被多次调用那么就会被标记为 <strong>热点函数</strong> ，那么就会 <strong>通过 <code>TurboFan</code> 转化成优化后的机器码</strong>，提高代码执行的性能</li>\n<li>但是，<strong>机器码实际上也会被还原为 <code>ByteCode</code></strong>  这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转化为字节码</li>\n</ul>\n<p><img src=\"/paw/2025/04/04/broswer/ast%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B.png\"></p>\n<ol>\n<li>词法分析（lexical analysis）<ul>\n<li>将字符序列转换成 token 序列的过程</li>\n<li>token 是记号化（tokenization）缩写</li>\n<li>词法分析器（lexical analyzer 简称）也叫扫描器（scanner）</li>\n</ul>\n</li>\n<li>语法分析（syntactic analysis，也叫 parsing）<ul>\n<li>语法分析器也可以称之为 parser</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"JS-执行栈\"><a href=\"#JS-执行栈\" class=\"headerlink\" title=\"JS 执行栈\"></a>JS 执行栈</h2><h2 id=\"虚拟-DOM\"><a href=\"#虚拟-DOM\" class=\"headerlink\" title=\"虚拟 DOM\"></a>虚拟 DOM</h2><p>虚拟 DOM 可以更好的跨平台，通过生成相应的 AST（抽象语法树）进行可以在多平台复用</p>\n<p>Vue&#x2F;React 框架在数据更新时，不知道哪个组件使用了该数据，该要更新哪个组件，所以会使用 diff 算法进行对比进行渲染某个特定的组件。使用虚拟 DOM 不需要全量生成真实 DOM 渲染页面，从而能优化运行时速度</p>\n"},{"title":"HTTP 发展史","date":"2025-04-01T15:31:42.000Z","_content":"\n## Http1.0 / Http1.1 / Https\n\n1. HTTP0.9\n\n   - 发布于 1991 年\n   - **只支持 GET 请求方法获取文本数据**，当时主要是为了获取 HTML 页面内容\n\n2. HTTP1.0\n\n   - 发布于 1996 年\n   - **支持 POST、HEAD 等请求方法**，**支持请求头，响应头等，支持更多种数据类型**，不再局限于文本数据\n   - 但是**浏览器的每次请求都需要与服务器建立一个 TCP 链接**，**请求处理完成之后立即断开连接**，每次建立连接增加了性能损耗\n\n   - 基本特性\n     - **简单的请求 - 响应模式**：HTTP1.0 采用了基本的请求 - 响应通信模式。客户端发送一个请求到服务器，服务器处理请求后返回一个响应。例如，当浏览器请求一个网页时，会发送一个包含请求方法（如 GET）、请求的资源路径（如 /index.html）等信息的请求报文，服务器根据请求内容查找资源并返回包含 HTML 文档的响应报文。\n     - **有限的连接复用能力**：在 HTTP1.0 中，每个请求 - 响应过程通常需要建立一个新的 TCP 连接。这意味着如果一个网页包含多个资源（如多个图片、CSS 文件、JavaScript 文件），浏览器需要为每个资源建立单独的 TCP 连接，效率较低。例如，一个网页有 10 个图片，就可能需要建立 10 个 TCP 连接来获取这些图片。\n     - **无状态协议**：HTTP1.0 是无状态的，服务器不会在多个请求之间记住客户端的状态。每次请求都是独立的，服务器不会知道之前是否处理过来自这个客户端的请求。这在一些需要用户登录状态等场景下，就需要通过额外的机制（如使用 Cookie）来维护状态。\n   - 内容协商机制\n     - HTTP1.0 支持简单的内容协商，通过请求头中的`Accept`字段，客户端可以告知服务器它所能接受的内容类型（如`text/html`、`application/json`等）。服务器根据客户端的请求和自身的资源情况，返回符合客户端要求的内容。例如，客户端在`Accept`头中指定`application/json`，服务器如果有对应的 JSON 格式的资源，就会返回 JSON 数据，否则可能返回错误信息。\n   - 缓存机制\n     - HTTP1.0 引入了基本的缓存机制，主要通过响应头中的`Expires`字段来实现。`Expires`字段指定了资源过期的时间，客户端（如浏览器）可以根据这个时间来判断是否需要重新请求资源。例如，如果`Expires`字段的值是未来的某个时间点，浏览器在这个时间之前访问相同资源时，可以直接使用本地缓存，而无需向服务器发送请求。\n\n3. HTTP1.1\n   - 发布于 1997 年\n   - **增加了 PUT、DELETE 等请求方法** \n   - **采用持久连接（Connect: keep-alive），多个请求可以公用同一个 TCP 连接 ** \n   - 改进的连接复用特性\n     - **持久连接（Keep - Alive）**：HTTP1.1 最重要的改进之一是引入了持久连接。这允许在一个 TCP 连接上进行多个请求 - 响应的交互，减少了频繁建立和断开连接的开销。例如，对于一个包含多个图片的网页，浏览器可以通过一个 TCP 连接依次请求这些图片，提高了性能。通过在请求头中添加`Connection: Keep - Alive`字段，客户端可以请求服务器保持连接打开，服务器在响应头中也可以通过相同的字段来确认是否同意保持连接。\n     - **管道化（Pipelining）**：HTTP1.1 还支持管道化操作，客户端可以连续发送多个请求而无需等待每个请求的响应，服务器会按照收到请求的顺序依次返回响应。不过，管道化在实际应用中存在一些问题，如对头阻塞（Head - of - Line Blocking）的情况，当一个请求的响应延迟时，会影响后续请求的响应处理。\n   - 增强的缓存机制\n     - **Cache - Control 头**：HTTP1.1 引入了`Cache - Control`头，它提供了更灵活和强大的缓存控制功能。与 HTTP1.0 的`Expires`相比，`Cache - Control`可以通过多个指令（如`max - age`、`no - cache`、`private`等）来精确控制缓存行为。例如，`Cache - Control: max - age = 3600`表示资源在 3600 秒内可以使用缓存，无需重新请求。\n     - **有条件的请求（Conditional Requests）**：通过`If - Modified - Since`和`If - None - Match`等请求头，客户端可以有条件地向服务器请求资源。例如，客户端可以发送带有`If - Modified - Since`头的请求，告知服务器只有在资源自指定时间之后被修改过才返回新的资源，否则返回 304 Not Modified 状态码，表示可以使用缓存资源，这种机制进一步提高了缓存效率。\n   - 新增的状态码和请求方法\n     - **新增状态码**：HTTP1.1 新增了一些状态码来更好地处理各种网络情况。例如，100 Continue 状态码，当客户端发送一个可能包含大量数据的请求（如 POST 请求带有大量数据）时，它可以先发送请求头部分，服务器返回 100 Continue 表示可以继续发送请求体，这对于处理大数据量的请求很有帮助。\n     - **新增请求方法**：新增了一些请求方法，如 PUT 和 DELETE。PUT 方法用于将数据上传到指定的资源位置并替换原有内容，DELETE 方法用于删除指定的资源。这些方法使得 HTTP 协议在资源操作上更加灵活。\n   - 带宽优化机制\n     - **字节范围请求（Byte - Ranges）**：HTTP1.1 支持字节范围请求，客户端可以通过`Range`请求头指定请求资源的字节范围。例如，当下载一个大文件时，如果下载中断，客户端可以使用字节范围请求来续传文件，只请求还未下载的部分，而不是重新下载整个文件，提高了带宽的利用率。\n\n4. HTTP2.0\n   - 二进制分帧层（Binary Framing Layer）\n     - **帧格式**：HTTP2.0 在应用层和传输层之间引入了二进制分帧层。数据被分割成更小的单位，称为帧（Frame）。帧有多种类型，如 HEADERS 帧用于传输头部信息，DATA 帧用于传输实际的数据内容。每个帧都有自己的帧头，包含帧的长度、类型、流标识符等信息。这种二进制格式使得协议解析更加高效，计算机能够更快速地处理二进制数据，相比于 HTTP1.x 的文本格式，减少了解析的复杂性和开销。\n     - **多路复用（Multiplexing）**：通过二进制分帧，HTTP2.0 实现了真正的多路复用。在一个 TCP 连接上可以同时发送和接收多个请求和响应的帧，这些请求和响应的帧相互独立，不会像 HTTP1.1 的管道化那样出现头阻塞（Head - of - Line Blocking）问题。例如，浏览器可以同时发送多个资源的请求（如多个图片、CSS 和 JavaScript 文件），服务器可以根据资源的准备情况，以任意顺序返回这些资源的响应帧，大大提高了网络资源的利用效率。\n   - 头部压缩（Header Compression）\n     - **HPACK 算法**：HTTP2.0 使用 HPACK 算法对 HTTP 头部进行压缩。在 HTTP 通信中，头部信息（如请求头和响应头）往往包含了许多重复的字段，如用户代理（User - Agent）、Cookie 等。HPACK 算法会对这些头部信息进行分析和压缩，通过建立静态和动态的头部表，对重复出现的头部字段进行索引和替换，从而减少头部数据的传输量。例如，在一个网页的多次请求中，用户代理信息通常是不变的，使用 HPACK 算法可以避免每次都传输完整的用户代理字符串，有效节省了带宽。\n   - 服务器推送（Server Push）\n     - **推送机制**：HTTP2.0 的服务器推送是一个重要的特性。服务器可以在客户端没有明确请求的情况下，主动向客户端推送相关的资源。例如，当浏览器请求一个 HTML 网页时，服务器可以根据对网页内容的了解，预先推送网页可能会用到的 CSS 文件、JavaScript 文件或图片等资源。这样可以减少客户端等待资源请求的时间，进一步提高网页的加载速度。服务器推送是通过 PUSH_PROMISE 帧来实现的，服务器在发送响应之前，可以先发送 PUSH_PROMISE 帧告知客户端即将推送的资源。\n   - 流量控制（Flow Control）\n     - **基于窗口的流量控制**：HTTP2.0 引入了流量控制机制，以确保发送端不会因为发送过多的数据而淹没接收端。它采用基于窗口的流量控制方式，每个接收端都有一个接收窗口，发送端在发送数据时需要考虑接收窗口的大小。例如，如果接收端的接收窗口已满，发送端就会暂停发送数据，直到接收窗口有足够的空间。这种流量控制机制可以避免网络拥塞，保证数据传输的平稳性。\n\n5. HTTPS\n   - 基本概念和加密原理\n     - **SSL/TLS 协议**：HTTPS（Hypertext Transfer Protocol Secure）是在 HTTP 协议基础上加入 SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）协议，用于提供安全的通信通道。SSL 和 TLS 协议的功能相似，TLS 是 SSL 的继任者。这些协议通过加密和身份验证机制来保护数据传输的安全。在通信开始时，客户端和服务器会进行握手（Handshake）过程，协商加密算法和密钥。\n     - **非对称加密和对称加密结合**：在握手过程中，首先使用非对称加密（如 RSA 算法）进行密钥交换。服务器会向客户端发送包含公钥的证书，客户端使用这个公钥来加密一个随机生成的对称密钥，然后将加密后的对称密钥发送回服务器。之后，双方就使用这个对称密钥进行数据的加密和解密。对称加密（如 AES 算法）用于后续的数据传输，因为对称加密在性能上比非对称加密更高效，这样的结合方式既保证了密钥交换的安全性，又兼顾了数据加密的效率。\n   - 数字证书（Digital Certificates）\n     - **证书颁发机构（CA）**：数字证书是 HTTPS 的关键组成部分。证书是由受信任的第三方机构，即证书颁发机构（CA）颁发的。这些 CA 机构会对服务器的身份进行验证，验证通过后会颁发包含服务器公钥、服务器信息（如域名等）以及 CA 签名的证书。客户端在与服务器建立连接时，会验证证书的有效性，包括检查证书是否过期、证书的签名是否由受信任的 CA 机构颁发等。如果证书验证不通过，客户端会发出警告，提示可能存在安全风险。\n   - 安全优势\n     - **数据保密性**：通过加密机制，HTTPS 可以确保在网络传输过程中的数据不被窃取。即使数据被中间人拦截，由于数据是加密的，中间人也无法获取其中的内容。例如，用户在网上银行进行交易时，账号、密码等敏感信息通过 HTTPS 加密传输，保障了用户的隐私和资金安全。\n     - **数据完整性**：HTTPS 还可以防止数据在传输过程中被篡改。通过消息认证码（MAC）等技术，接收方可以验证收到的数据是否与发送方发送的数据一致。如果数据被篡改，接收方可以检测到并拒绝接收，从而保证了数据的完整性。\n     - **身份验证**：数字证书提供了服务器的身份验证功能。客户端可以确认与之通信的服务器确实是声称的服务器，而不是假冒的服务器。这对于防止钓鱼网站等安全威胁非常重要，例如，用户访问银行网站时，通过验证证书可以确认是真正的银行服务器，而不是恶意攻击者伪装的网站。\n\n6. 请求方式 RFC\n\n   - GET，请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据\n   - HEAD：请求一个于 GET 请求的响应相同的响应，但没有响应体\n     - 比如在准备下载一个文件前，先获取文件的大小，在决定是否进行下载\n   - POST：用于将实体提交到指定的资源\n   - PUT：请求有效载荷（payload）替换目标资源的所有当前表示\n   - DELETE：删除指定的资源\n   - PATCH：用于对资源部分修改\n   - CONNECT：建立一个到目标资源标识的服务器的隧道，通常用在代理服务器，网页开发很少用到\n   - TRACE：沿着到目标资源的路径执行的一个消息回环测试\n\n\n\n## 响应状态码\n\nHTTP 响应状态码用来表明特定 [HTTP](https://developer.mozilla.org/zh-CN/docs/Web/HTTP) 请求是否成功完成。 响应被归为以下五大类：\n\n1. 信息响应 (`100`–`199`)\n2. 成功响应 (`200`–`299`)\n3. 重定向消息 (`300`–`399`)\n4. 客户端错误响应 (`400`–`499`)\n5. 服务端错误响应 (`500`–`599`)\n\n以下状态码由 [section 10 of RFC 2616](https://datatracker.ietf.org/doc/html/rfc2616#section-10)定义。你可以在[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-6)中找到更新后的规范。\n\n**备注：**如果你收到的响应不在 [此列表](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#信息响应) 中，则它为非标准响应，可能是服务器软件的自定义响应。\n\n### 信息响应\n\n- `100 Continue` \n\n  这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。\n\n- `101 Switching Protocols ` \n\n  该代码是响应客户端的 [`Upgrade`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade) 请求头发送的，指明服务器即将切换的协议。\n\n- `102 Processing` \n\n  此代码表示服务器已收到并正在处理该请求，但当前没有响应可用。\n\n- `103 Early Hints` \n\n  此状态代码主要用于与 [`Link`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link) 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 [preloading](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload) 资源。\n\n### 成功响应\n\n- `200 OK` \n\n  请求成功。成功的含义取决于 HTTP 方法：`GET`: 资源已被提取并在消息正文中传输。`HEAD`: 实体标头位于消息正文中。`PUT` or `POST`: 描述动作结果的资源在消息体中传输。`TRACE`: 消息正文包含服务器收到的请求消息。\n\n- `201 Created` \n\n  该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。\n\n- `202 Accepted` \n\n  请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。\n\n- `203 Non-Authoritative Information` \n\n  服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回`200 OK`的情况下才是合适的。\n\n- `204 No Content` \n\n  对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。\n\n- `205 Reset Content` \n\n  告诉用户代理重置发送此请求的文档。\n\n- `206 Partial Content` \n\n  当从客户端发送[`Range`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range)范围标头以只请求资源的一部分时，将使用此响应代码。\n\n- `207 Multi-Status` \n\n  对于多个状态代码都可能合适的情况，传输有关多个资源的信息。\n\n- `208 Already Reported` \n\n  在 DAV 里面使用 `` 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。\n\n- `226 IM Used` \n\n  服务器已经完成了对资源的`GET`请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。\n\n### 重定向消息\n\n- `300 Multiple Choice` \n\n  请求拥有多个可能的响应。用户代理或者用户应当从中选择一个。（没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。）\n\n- `301 Moved Permanently` \n\n  请求资源的 URL 已永久更改。在响应中给出了新的 URL。\n\n- `302 Found` \n\n  此响应代码表示所请求资源的 URI 已 *暂时* 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。\n\n- `303 See Other` \n\n  服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源。\n\n- `304 Not Modified` \n\n  这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。\n\n- `305 Use Proxy` 已弃用\n\n  在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用。\n\n- `306 unused` \n\n  此响应代码不再使用；它只是保留。它曾在 HTTP/1.1 规范的早期版本中使用过。\n\n- `307 Temporary Redirect` \n\n  服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 `302 Found` HTTP 响应代码具有相同的语义，但用户代理 *不能* 更改所使用的 HTTP 方法：如果在第一个请求中使用了 `POST`，则在第二个请求中必须使用 `POST`\n\n- `308 Permanent Redirect` \n\n  这意味着资源现在永久位于由`Location:` HTTP Response 标头指定的另一个 URI。这与 `301 Moved Permanently` HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 `POST`，则必须在第二个请求中使用 `POST`。\n\n### 客户端错误响应\n\n- `400 Bad Request` \n\n  由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。\n\n- `401 Unauthorized` \n\n  虽然 HTTP 标准指定了\"unauthorized\"，但从语义上来说，这个响应意味着\"unauthenticated\"。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。\n\n- `402 Payment Required` 实验性\n\n  此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。\n\n- `403 Forbidden` \n\n  客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 `401 Unauthorized` 不同，服务器知道客户端的身份。\n\n- `404 Not Found` \n\n  服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 `403 Forbidden`，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。\n\n- `405 Method Not Allowed` \n\n  服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用`DELETE`来删除资源。\n\n- `406 Not Acceptable` \n\n  当 web 服务器在执行[服务端驱动型内容协商机制](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation#服务端驱动型内容协商机制)后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。\n\n- `407 Proxy Authentication Required` \n\n  类似于 `401 Unauthorized` 但是认证需要由代理完成。\n\n- `408 Request Timeout` \n\n  此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。\n\n- `409 Conflict` \n\n  当请求与服务器的当前状态冲突时，将发送此响应。\n\n- `410 Gone` \n\n  当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。\n\n- `411 Length Required` \n\n  服务端拒绝该请求因为 `Content-Length` 头部字段未定义但是服务端需要它。\n\n- `412 Precondition Failed` \n\n  客户端在其头文件中指出了服务器不满足的先决条件。\n\n- `413 Payload Too Large` \n\n  请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 `Retry-After`。\n\n- `414 URI Too Long` \n\n  客户端请求的 URI 比服务器愿意接收的长度长。\n\n- `415 Unsupported Media Type` \n\n  服务器不支持请求数据的媒体格式，因此服务器拒绝请求。\n\n- `416 Range Not Satisfiable` \n\n  无法满足请求中 `Range` 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。\n\n- `417 Expectation Failed` \n\n  此响应代码表示服务器无法满足 `Expect` 请求标头字段所指示的期望。\n\n- `418 I'm a teapot` \n\n  服务端拒绝用茶壶煮咖啡。笑话，典故来源[茶壶冲泡咖啡](https://zh.wikipedia.org/wiki/超文本咖啡壶控制协议)\n\n- `421 Misdirected Request` \n\n  请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。\n\n- `422 Unprocessable Entity` \n\n  请求格式正确，但由于语义错误而无法遵循。\n\n- `423 Locked` \n\n  正在访问的资源已锁定。\n\n- `424 Failed Dependency` \n\n  由于前一个请求失败，请求失败。\n\n- `425 Too Early` 实验性\n\n  表示服务器不愿意冒险处理可能被重播的请求。\n\n- `426 Upgrade Required` \n\n  服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有[`Upgrade`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade) 字段的 426 响应 来表明它所需的协议（们）。\n\n- `428 Precondition Required` \n\n  源服务器要求请求是有条件的。此响应旨在防止'丢失更新'问题，即当第三方修改服务器上的状态时，客户端 `GET` 获取资源的状态，对其进行修改并将其 `PUT` 放回服务器，从而导致冲突。\n\n- `429 Too Many Requests` \n\n  用户在给定的时间内发送了太多请求（\"限制请求速率\"）\n\n- `431 Request Header Fields Too Large` \n\n  服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。\n\n- `451 Unavailable For Legal Reasons` \n\n  用户代理请求了无法合法提供的资源，例如政府审查的网页。\n\n### 服务端错误响应\n\n- `500 Internal Server Error` \n\n  服务器遇到了不知道如何处理的情况。\n\n- `501 Not Implemented` \n\n  服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 `GET` and `HEAD`.\n\n- `502 Bad Gateway` \n\n  此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。\n\n- `503 Service Unavailable` \n\n  服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 `Retry-After` 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。\n\n- `504 Gateway Timeout` \n\n  当服务器充当网关且无法及时获得响应时，会给出此错误响应。\n\n- `505 HTTP Version Not Supported` \n\n  服务器不支持请求中使用的 HTTP 版本。\n\n- `506 Variant Also Negotiates` \n\n  服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点。\n\n- `507 Insufficient Storage` \n\n  无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。\n\n- `508 Loop Detected` \n\n  服务器在处理请求时检测到无限循环。\n\n- `510 Not Extended` \n\n  服务器需要对请求进行进一步扩展才能完成请求。\n\n- `511 Network Authentication Required` \n\n  指示客户端需要进行身份验证才能获得网络访问权限。\n\n\n\n## 三次握手\n\n![](三次握手.png)\n\n\n\n## 四次挥手\n\n![](四次挥手.png)\n\n\n\n## 进程线程\n\n1. 进程（Process）\n   - 基本概念\n     - 进程是计算机中正在运行的程序的实例，它是操作系统进行资源分配和调度的基本单位。每个进程都有自己独立的地址空间，包括代码段、数据段、堆栈段等。这意味着不同进程之间的内存是相互隔离的，一个进程无法直接访问另一个进程的内存空间。例如，当同时运行一个文本编辑器和一个浏览器时，它们就是两个独立的进程，各自拥有独立的内存区域来存储程序代码、用户数据等。\n   - 进程的状态\n     - **就绪（Ready）状态**：进程已经准备好运行，只要 CPU 资源可用，就可以立即执行。例如，在一个多任务操作系统中，有多个进程在等待 CPU 的分配，这些进程就处于就绪状态。\n     - **运行（Running）状态**：进程正在 CPU 上执行指令。在单核 CPU 系统中，同一时刻只有一个进程处于运行状态；在多核 CPU 系统中，可以有多个进程同时处于运行状态，具体数量取决于 CPU 的核心数。\n     - **阻塞（Blocked）状态**：进程由于等待某些事件的发生（如等待 I/O 操作完成、等待获取某个锁等）而暂时无法继续执行。例如，一个进程正在等待从磁盘读取文件数据，在数据读取完成之前，它就处于阻塞状态。\n   - 进程的资源分配\n     - 操作系统会为每个进程分配一系列的资源，包括内存空间、文件描述符、CPU 时间片等。内存空间用于存储进程的代码和数据，文件描述符用于和外部文件进行交互，CPU 时间片则决定了进程能够在 CPU 上运行的时间长度。不同进程之间的资源分配是独立的，这有助于保证系统的稳定性和安全性，防止一个进程的错误操作影响到其他进程。\n2. 线程（Thread）\n   - 基本概念\n     - 线程是进程内部的一个执行单元，它是比进程更小的能够独立运行的基本单位。一个进程可以包含多个线程，这些线程共享进程的地址空间和大部分资源，如代码段、数据段、打开的文件和设备等。例如，在一个多线程的文本编辑器进程中，一个线程可能负责接收用户的输入，另一个线程负责在后台保存文件，它们共享进程的内存和文件资源。\n   - 线程的状态与进程类似\n     - 线程也有就绪、运行和阻塞等状态，并且其状态转换的原理和进程状态转换类似。不同的是，线程之间的切换相对进程切换来说开销更小，因为线程共享进程的大部分资源，不需要像进程切换那样重新加载内存映射等操作。\n   - 多线程的优势与挑战\n     - **优势**：多线程可以提高程序的执行效率，特别是在处理一些可以并发执行的任务时。例如，在一个网络服务器程序中，一个线程可以负责接收客户端的连接请求，另一个线程可以负责处理已经连接的客户端的数据请求，这样可以同时处理多个客户端的请求，提高服务器的并发处理能力。\n     - **挑战**：由于多个线程共享进程的资源，可能会出现线程安全问题。例如，当多个线程同时访问和修改同一块共享数据时，可能会导致数据不一致的情况。需要使用同步机制（如互斥锁、信号量等）来确保线程安全。\n3. 进程与进程之间的通信（IPC，Inter - Process Communication）\n   - 管道（Pipe）\n     - **匿名管道（Anonymous Pipe）**：主要用于具有亲缘关系（如父子进程）之间的通信。它是一个半双工的通信通道，即数据只能单向流动。例如，在一个父进程和子进程之间，父进程可以通过管道将数据发送给子进程，或者子进程将数据发送给父进程，但不能同时双向通信。匿名管道通过`pipe`系统调用创建，一端用于写入数据，另一端用于读取数据。\n     - **命名管道（Named Pipe）**：可以用于无亲缘关系的进程之间的通信。它在文件系统中有一个对应的文件名，多个进程可以通过这个文件名来打开管道进行通信。命名管道是全双工的通信通道，数据可以双向流动。例如，两个不同的服务器程序可以通过命名管道交换数据，一个程序将处理后的结果发送给另一个程序进行进一步的处理。\n   - 消息队列（Message Queue）\n     - 消息队列是一个由操作系统维护的消息存储区域。进程可以向消息队列发送消息，也可以从消息队列接收消息。消息队列中的消息具有一定的格式，通常包括消息类型和消息内容。不同的进程可以通过消息队列的标识符来访问和操作消息队列。例如，在一个分布式系统中，不同的进程可以通过消息队列来传递任务请求和结果，实现任务的异步处理。\n   - 共享内存（Shared Memory）\n     - 共享内存是一种高效的进程间通信方式。它允许不同的进程访问同一块物理内存区域，通过在这块共享内存区域中读写数据来实现通信。为了确保数据的一致性和安全性，通常需要结合同步机制（如互斥锁）来使用。例如，在一个多进程的数据库系统中，多个进程可以通过共享内存来快速访问和修改数据库的缓存数据，提高系统的性能。\n   - 信号量（Semaphore）和互斥锁（Mutex）（间接用于通信）\n     - 信号量和互斥锁主要用于控制多个进程对共享资源的访问。信号量可以用于控制同时访问某个资源的进程数量，互斥锁用于确保在同一时刻只有一个进程可以访问某个临界资源。虽然它们本身不是直接用于通信的工具，但在进程间共享资源的过程中，可以通过对信号量和互斥锁的操作来协调进程之间的行为，实现间接的通信。例如，两个进程需要访问一个打印机设备，通过互斥锁可以确保在一个进程使用打印机时，另一个进程需要等待。\n   - 套接字（Socket）\n     - 套接字主要用于网络通信，也可以用于本地进程之间的通信。它提供了一种通用的通信端点，可以在不同的主机之间或者同一主机的不同进程之间建立通信连接。例如，在一个客户端 - 服务器架构的应用中，客户端进程和服务器进程可以通过套接字建立 TCP 或 UDP 连接，实现数据的发送和接收。\n4. 线程与线程之间的通信\n   - 共享变量\n     - 由于同一进程中的线程共享进程的地址空间，所以线程之间可以通过共享变量来进行通信。例如，在一个多线程的计数器程序中，多个线程可以访问和修改同一个计数器变量。但是，需要注意线程安全问题，因为多个线程同时访问和修改共享变量可能会导致数据不一致。可以使用同步机制（如互斥锁）来确保只有一个线程能够访问共享变量的临界区。\n   - 消息传递（通过线程安全的队列等）\n     - 线程之间也可以通过消息传递的方式进行通信。例如，通过一个线程安全的队列（如 Java 中的`BlockingQueue`），一个线程可以将消息放入队列，另一个线程从队列中取出消息进行处理。这种方式可以有效地避免共享变量带来的线程安全问题，并且可以实现线程之间的异步通信。\n5. 进程与线程之间的通信（本质上是进程间通信）\n   - 因为线程是在进程内部运行的，所以进程与线程之间的通信通常可以归结为进程之间的通信方式。例如，如果一个进程中的线程需要与另一个进程中的线程进行通信，可以通过进程间通信的方法（如管道、消息队列等）来实现。不过，在实际操作中，需要考虑到进程和线程的不同特点，以及通信的效率和安全性等因素。\n\n\n\n## 死锁\n\n1. 死锁的定义和产生原因\n\n   - **定义**：死锁是指在多线程或多进程环境下，两个或多个执行单元（线程或进程）在等待对方释放资源，导致所有相关执行单元都无法继续执行的一种僵持状态。简单来说，就像是两个人互相等待对方手中的东西，结果谁也无法前进。\n   - 产生原因：\n     - **互斥条件**：资源在同一时刻只能被一个执行单元（线程或进程）使用。例如，一个打印机在某一时刻只能被一个进程用于打印任务。\n     - **请求和保持条件**：执行单元已经持有了至少一个资源，并且又请求新的资源，而且在等待新资源的同时不会释放已经持有的资源。比如，一个进程已经占用了打印机，又请求使用扫描仪，在没有得到扫描仪之前不会释放打印机。\n     - **不可剥夺条件**：资源只能由持有资源的执行单元自己释放，其他执行单元不能强行剥夺。例如，一个线程获得了某个锁，在它自己没有解锁之前，其他线程不能强制获取这个锁。\n     - **循环等待条件**：存在一组执行单元，每个执行单元都在等待下一个执行单元所占有的资源。例如，有进程 P1、P2 和资源 R1、R2，P1 等待 P2 释放 R2，P2 等待 P1 释放 R1，这样就形成了一个循环等待链。\n\n2. 死锁的示例场景（以进程为例）\n\n   - 假设有两个进程 P1 和 P2，以及两个资源 R1 和 R2（如打印机和扫描仪）。\n   - P1 首先请求并获得了 R1（打印机），然后它请求 R2（扫描仪）。\n   - 与此同时，P2 请求并获得了 R2（扫描仪），然后它请求 R1（打印机）。\n   - 此时，P1 在等待 P2 释放 R2，P2 在等待 P1 释放 R1，就形成了死锁状态，两个进程都无法继续执行它们所期望的任务。\n\n3. 死锁的解决方法\n\n   - 预防死锁\n\n     - **破坏互斥条件（较难实现）**：这个方法在实际中很难操作，因为很多资源本身的性质决定了它们在同一时刻只能被一个执行单元使用，比如打印机、键盘等独占性设备。不过，在某些情况下，可以通过虚拟技术来模拟共享资源。例如，使用假脱机打印技术，将打印机的输出任务先存储在磁盘缓冲区，多个进程可以同时 “使用” 这个缓冲区，而真正的打印机可以按照顺序处理缓冲区中的任务，从而在一定程度上打破互斥条件。\n\n     - 破坏请求和保持条件：\n\n       - **资源预分配策略**：要求进程在开始执行之前一次性申请它所需要的所有资源。如果系统无法满足全部资源请求，就不分配任何资源给该进程，让它等待。这样可以避免进程在持有部分资源的情况下又请求其他资源而导致死锁。例如，一个数据库应用程序，进程在开始查询和更新数据之前，就申请好数据库连接、缓存空间等所有可能需要的资源。\n       - **缺点**：这种方法可能会导致资源利用率较低，因为进程可能会在一段时间内占用一些它暂时不需要使用的资源，而且有些资源的需求可能很难在进程开始时就准确预估。\n\n     - 破坏不可剥夺条件：\n\n       - **允许资源剥夺**：当一个执行单元请求的资源无法立即获得时，可以剥夺它已经持有的资源。例如，在操作系统中，对于一些优先级较低的进程所占用的资源，如果有高优先级的进程需要，可以将低优先级进程的资源剥夺，分配给高优先级进程。不过，这种方法实现起来比较复杂，需要考虑资源的恢复和执行单元状态的保存等问题。\n\n     - 破坏循环等待条件：\n\n       - **资源有序分配策略**：对系统中的所有资源进行编号，要求每个执行单元按照资源编号递增（或递减）的顺序请求资源。例如，如果有资源 R1（编号为 1）、R2（编号为 2）、R3（编号为 3），进程必须先请求 R1，然后才能请求 R2，最后才能请求 R3。这样可以避免出现循环等待的情况。\n- **缺点**：这种方法可能会限制资源的使用灵活性，而且在资源编号和请求顺序的管理上需要一定的开销。\n     \n   - 避免死锁（银行家算法）\n\n     - **基本原理**：银行家算法是一种经典的死锁避免算法，它的主要思想是在进程请求资源时，系统会预先判断这次分配是否会导致系统进入死锁状态。如果不会导致死锁，就进行资源分配；如果可能导致死锁，就拒绝分配。\n\n     - 实现步骤：\n\n       - **系统状态记录**：系统维护一些信息，包括每个进程已经拥有的资源数量、每个进程还需要的资源数量、系统中可用的资源数量等。\n- **安全性检查**：当一个进程请求资源时，系统会检查如果把资源分配给这个进程后，是否还能找到一个安全序列。安全序列是指系统能够按照某种顺序为每个进程分配足够的资源，使得每个进程都能最终完成并释放其所有资源。如果存在这样的安全序列，那么系统就认为当前状态是安全的，可以进行资源分配；否则，就拒绝分配资源。\n     \n- 检测死锁\n   \n     - **资源分配图（Resource - Allocation Graph）**：通过构建资源分配图来检测死锁。资源分配图是一种有向图，其中节点包括进程节点和资源节点，边表示进程对资源的请求或者资源的分配情况。如果在资源分配图中出现了环，并且每个环中的资源都只有一个实例，那么就表示出现了死锁。如果环中的资源有多个实例，还需要进一步分析才能确定是否死锁。\n  - **定期检查机制**：系统可以定期（例如每隔一段时间或者在特定的事件发生后）运行死锁检测算法，通过检查资源分配图或者其他系统状态信息来判断是否出现了死锁。\n   \n- 解除死锁\n   \n     - **资源剥夺法**：剥夺死锁进程所占用的资源，将这些资源分配给其他进程，以打破死锁状态。这可能需要回滚被剥夺资源的进程的部分操作，并且在合适的时候恢复这些操作。例如，在数据库系统中，当出现死锁时，可以强制回滚一个事务（进程），释放它所占用的数据库锁，让其他事务能够继续执行。\n  - **撤销进程法**：直接撤销部分或全部死锁进程，以解除死锁。撤销进程时，需要考虑进程的优先级、已经执行的工作量等因素。例如，优先撤销优先级较低或者刚刚开始执行的进程，尽量减少对系统整体性能的影响。\n     - **进程回退法**：让一个或多个死锁进程回退到足以打破死锁的地步，例如，让一个进程释放它之前请求的某个资源，使得其他进程能够继续执行。这种方法需要系统能够记录每个进程的执行历史和资源请求顺序，以便准确地进行回退操作。","source":"_posts/408.md","raw":"---\ntitle: HTTP 发展史\ndate: 2025-04-01 23:31:42\ntags: [HTTP]\ncategories: [计算机网络]\n---\n\n## Http1.0 / Http1.1 / Https\n\n1. HTTP0.9\n\n   - 发布于 1991 年\n   - **只支持 GET 请求方法获取文本数据**，当时主要是为了获取 HTML 页面内容\n\n2. HTTP1.0\n\n   - 发布于 1996 年\n   - **支持 POST、HEAD 等请求方法**，**支持请求头，响应头等，支持更多种数据类型**，不再局限于文本数据\n   - 但是**浏览器的每次请求都需要与服务器建立一个 TCP 链接**，**请求处理完成之后立即断开连接**，每次建立连接增加了性能损耗\n\n   - 基本特性\n     - **简单的请求 - 响应模式**：HTTP1.0 采用了基本的请求 - 响应通信模式。客户端发送一个请求到服务器，服务器处理请求后返回一个响应。例如，当浏览器请求一个网页时，会发送一个包含请求方法（如 GET）、请求的资源路径（如 /index.html）等信息的请求报文，服务器根据请求内容查找资源并返回包含 HTML 文档的响应报文。\n     - **有限的连接复用能力**：在 HTTP1.0 中，每个请求 - 响应过程通常需要建立一个新的 TCP 连接。这意味着如果一个网页包含多个资源（如多个图片、CSS 文件、JavaScript 文件），浏览器需要为每个资源建立单独的 TCP 连接，效率较低。例如，一个网页有 10 个图片，就可能需要建立 10 个 TCP 连接来获取这些图片。\n     - **无状态协议**：HTTP1.0 是无状态的，服务器不会在多个请求之间记住客户端的状态。每次请求都是独立的，服务器不会知道之前是否处理过来自这个客户端的请求。这在一些需要用户登录状态等场景下，就需要通过额外的机制（如使用 Cookie）来维护状态。\n   - 内容协商机制\n     - HTTP1.0 支持简单的内容协商，通过请求头中的`Accept`字段，客户端可以告知服务器它所能接受的内容类型（如`text/html`、`application/json`等）。服务器根据客户端的请求和自身的资源情况，返回符合客户端要求的内容。例如，客户端在`Accept`头中指定`application/json`，服务器如果有对应的 JSON 格式的资源，就会返回 JSON 数据，否则可能返回错误信息。\n   - 缓存机制\n     - HTTP1.0 引入了基本的缓存机制，主要通过响应头中的`Expires`字段来实现。`Expires`字段指定了资源过期的时间，客户端（如浏览器）可以根据这个时间来判断是否需要重新请求资源。例如，如果`Expires`字段的值是未来的某个时间点，浏览器在这个时间之前访问相同资源时，可以直接使用本地缓存，而无需向服务器发送请求。\n\n3. HTTP1.1\n   - 发布于 1997 年\n   - **增加了 PUT、DELETE 等请求方法** \n   - **采用持久连接（Connect: keep-alive），多个请求可以公用同一个 TCP 连接 ** \n   - 改进的连接复用特性\n     - **持久连接（Keep - Alive）**：HTTP1.1 最重要的改进之一是引入了持久连接。这允许在一个 TCP 连接上进行多个请求 - 响应的交互，减少了频繁建立和断开连接的开销。例如，对于一个包含多个图片的网页，浏览器可以通过一个 TCP 连接依次请求这些图片，提高了性能。通过在请求头中添加`Connection: Keep - Alive`字段，客户端可以请求服务器保持连接打开，服务器在响应头中也可以通过相同的字段来确认是否同意保持连接。\n     - **管道化（Pipelining）**：HTTP1.1 还支持管道化操作，客户端可以连续发送多个请求而无需等待每个请求的响应，服务器会按照收到请求的顺序依次返回响应。不过，管道化在实际应用中存在一些问题，如对头阻塞（Head - of - Line Blocking）的情况，当一个请求的响应延迟时，会影响后续请求的响应处理。\n   - 增强的缓存机制\n     - **Cache - Control 头**：HTTP1.1 引入了`Cache - Control`头，它提供了更灵活和强大的缓存控制功能。与 HTTP1.0 的`Expires`相比，`Cache - Control`可以通过多个指令（如`max - age`、`no - cache`、`private`等）来精确控制缓存行为。例如，`Cache - Control: max - age = 3600`表示资源在 3600 秒内可以使用缓存，无需重新请求。\n     - **有条件的请求（Conditional Requests）**：通过`If - Modified - Since`和`If - None - Match`等请求头，客户端可以有条件地向服务器请求资源。例如，客户端可以发送带有`If - Modified - Since`头的请求，告知服务器只有在资源自指定时间之后被修改过才返回新的资源，否则返回 304 Not Modified 状态码，表示可以使用缓存资源，这种机制进一步提高了缓存效率。\n   - 新增的状态码和请求方法\n     - **新增状态码**：HTTP1.1 新增了一些状态码来更好地处理各种网络情况。例如，100 Continue 状态码，当客户端发送一个可能包含大量数据的请求（如 POST 请求带有大量数据）时，它可以先发送请求头部分，服务器返回 100 Continue 表示可以继续发送请求体，这对于处理大数据量的请求很有帮助。\n     - **新增请求方法**：新增了一些请求方法，如 PUT 和 DELETE。PUT 方法用于将数据上传到指定的资源位置并替换原有内容，DELETE 方法用于删除指定的资源。这些方法使得 HTTP 协议在资源操作上更加灵活。\n   - 带宽优化机制\n     - **字节范围请求（Byte - Ranges）**：HTTP1.1 支持字节范围请求，客户端可以通过`Range`请求头指定请求资源的字节范围。例如，当下载一个大文件时，如果下载中断，客户端可以使用字节范围请求来续传文件，只请求还未下载的部分，而不是重新下载整个文件，提高了带宽的利用率。\n\n4. HTTP2.0\n   - 二进制分帧层（Binary Framing Layer）\n     - **帧格式**：HTTP2.0 在应用层和传输层之间引入了二进制分帧层。数据被分割成更小的单位，称为帧（Frame）。帧有多种类型，如 HEADERS 帧用于传输头部信息，DATA 帧用于传输实际的数据内容。每个帧都有自己的帧头，包含帧的长度、类型、流标识符等信息。这种二进制格式使得协议解析更加高效，计算机能够更快速地处理二进制数据，相比于 HTTP1.x 的文本格式，减少了解析的复杂性和开销。\n     - **多路复用（Multiplexing）**：通过二进制分帧，HTTP2.0 实现了真正的多路复用。在一个 TCP 连接上可以同时发送和接收多个请求和响应的帧，这些请求和响应的帧相互独立，不会像 HTTP1.1 的管道化那样出现头阻塞（Head - of - Line Blocking）问题。例如，浏览器可以同时发送多个资源的请求（如多个图片、CSS 和 JavaScript 文件），服务器可以根据资源的准备情况，以任意顺序返回这些资源的响应帧，大大提高了网络资源的利用效率。\n   - 头部压缩（Header Compression）\n     - **HPACK 算法**：HTTP2.0 使用 HPACK 算法对 HTTP 头部进行压缩。在 HTTP 通信中，头部信息（如请求头和响应头）往往包含了许多重复的字段，如用户代理（User - Agent）、Cookie 等。HPACK 算法会对这些头部信息进行分析和压缩，通过建立静态和动态的头部表，对重复出现的头部字段进行索引和替换，从而减少头部数据的传输量。例如，在一个网页的多次请求中，用户代理信息通常是不变的，使用 HPACK 算法可以避免每次都传输完整的用户代理字符串，有效节省了带宽。\n   - 服务器推送（Server Push）\n     - **推送机制**：HTTP2.0 的服务器推送是一个重要的特性。服务器可以在客户端没有明确请求的情况下，主动向客户端推送相关的资源。例如，当浏览器请求一个 HTML 网页时，服务器可以根据对网页内容的了解，预先推送网页可能会用到的 CSS 文件、JavaScript 文件或图片等资源。这样可以减少客户端等待资源请求的时间，进一步提高网页的加载速度。服务器推送是通过 PUSH_PROMISE 帧来实现的，服务器在发送响应之前，可以先发送 PUSH_PROMISE 帧告知客户端即将推送的资源。\n   - 流量控制（Flow Control）\n     - **基于窗口的流量控制**：HTTP2.0 引入了流量控制机制，以确保发送端不会因为发送过多的数据而淹没接收端。它采用基于窗口的流量控制方式，每个接收端都有一个接收窗口，发送端在发送数据时需要考虑接收窗口的大小。例如，如果接收端的接收窗口已满，发送端就会暂停发送数据，直到接收窗口有足够的空间。这种流量控制机制可以避免网络拥塞，保证数据传输的平稳性。\n\n5. HTTPS\n   - 基本概念和加密原理\n     - **SSL/TLS 协议**：HTTPS（Hypertext Transfer Protocol Secure）是在 HTTP 协议基础上加入 SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）协议，用于提供安全的通信通道。SSL 和 TLS 协议的功能相似，TLS 是 SSL 的继任者。这些协议通过加密和身份验证机制来保护数据传输的安全。在通信开始时，客户端和服务器会进行握手（Handshake）过程，协商加密算法和密钥。\n     - **非对称加密和对称加密结合**：在握手过程中，首先使用非对称加密（如 RSA 算法）进行密钥交换。服务器会向客户端发送包含公钥的证书，客户端使用这个公钥来加密一个随机生成的对称密钥，然后将加密后的对称密钥发送回服务器。之后，双方就使用这个对称密钥进行数据的加密和解密。对称加密（如 AES 算法）用于后续的数据传输，因为对称加密在性能上比非对称加密更高效，这样的结合方式既保证了密钥交换的安全性，又兼顾了数据加密的效率。\n   - 数字证书（Digital Certificates）\n     - **证书颁发机构（CA）**：数字证书是 HTTPS 的关键组成部分。证书是由受信任的第三方机构，即证书颁发机构（CA）颁发的。这些 CA 机构会对服务器的身份进行验证，验证通过后会颁发包含服务器公钥、服务器信息（如域名等）以及 CA 签名的证书。客户端在与服务器建立连接时，会验证证书的有效性，包括检查证书是否过期、证书的签名是否由受信任的 CA 机构颁发等。如果证书验证不通过，客户端会发出警告，提示可能存在安全风险。\n   - 安全优势\n     - **数据保密性**：通过加密机制，HTTPS 可以确保在网络传输过程中的数据不被窃取。即使数据被中间人拦截，由于数据是加密的，中间人也无法获取其中的内容。例如，用户在网上银行进行交易时，账号、密码等敏感信息通过 HTTPS 加密传输，保障了用户的隐私和资金安全。\n     - **数据完整性**：HTTPS 还可以防止数据在传输过程中被篡改。通过消息认证码（MAC）等技术，接收方可以验证收到的数据是否与发送方发送的数据一致。如果数据被篡改，接收方可以检测到并拒绝接收，从而保证了数据的完整性。\n     - **身份验证**：数字证书提供了服务器的身份验证功能。客户端可以确认与之通信的服务器确实是声称的服务器，而不是假冒的服务器。这对于防止钓鱼网站等安全威胁非常重要，例如，用户访问银行网站时，通过验证证书可以确认是真正的银行服务器，而不是恶意攻击者伪装的网站。\n\n6. 请求方式 RFC\n\n   - GET，请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据\n   - HEAD：请求一个于 GET 请求的响应相同的响应，但没有响应体\n     - 比如在准备下载一个文件前，先获取文件的大小，在决定是否进行下载\n   - POST：用于将实体提交到指定的资源\n   - PUT：请求有效载荷（payload）替换目标资源的所有当前表示\n   - DELETE：删除指定的资源\n   - PATCH：用于对资源部分修改\n   - CONNECT：建立一个到目标资源标识的服务器的隧道，通常用在代理服务器，网页开发很少用到\n   - TRACE：沿着到目标资源的路径执行的一个消息回环测试\n\n\n\n## 响应状态码\n\nHTTP 响应状态码用来表明特定 [HTTP](https://developer.mozilla.org/zh-CN/docs/Web/HTTP) 请求是否成功完成。 响应被归为以下五大类：\n\n1. 信息响应 (`100`–`199`)\n2. 成功响应 (`200`–`299`)\n3. 重定向消息 (`300`–`399`)\n4. 客户端错误响应 (`400`–`499`)\n5. 服务端错误响应 (`500`–`599`)\n\n以下状态码由 [section 10 of RFC 2616](https://datatracker.ietf.org/doc/html/rfc2616#section-10)定义。你可以在[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-6)中找到更新后的规范。\n\n**备注：**如果你收到的响应不在 [此列表](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#信息响应) 中，则它为非标准响应，可能是服务器软件的自定义响应。\n\n### 信息响应\n\n- `100 Continue` \n\n  这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。\n\n- `101 Switching Protocols ` \n\n  该代码是响应客户端的 [`Upgrade`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade) 请求头发送的，指明服务器即将切换的协议。\n\n- `102 Processing` \n\n  此代码表示服务器已收到并正在处理该请求，但当前没有响应可用。\n\n- `103 Early Hints` \n\n  此状态代码主要用于与 [`Link`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link) 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 [preloading](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload) 资源。\n\n### 成功响应\n\n- `200 OK` \n\n  请求成功。成功的含义取决于 HTTP 方法：`GET`: 资源已被提取并在消息正文中传输。`HEAD`: 实体标头位于消息正文中。`PUT` or `POST`: 描述动作结果的资源在消息体中传输。`TRACE`: 消息正文包含服务器收到的请求消息。\n\n- `201 Created` \n\n  该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。\n\n- `202 Accepted` \n\n  请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。\n\n- `203 Non-Authoritative Information` \n\n  服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回`200 OK`的情况下才是合适的。\n\n- `204 No Content` \n\n  对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。\n\n- `205 Reset Content` \n\n  告诉用户代理重置发送此请求的文档。\n\n- `206 Partial Content` \n\n  当从客户端发送[`Range`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range)范围标头以只请求资源的一部分时，将使用此响应代码。\n\n- `207 Multi-Status` \n\n  对于多个状态代码都可能合适的情况，传输有关多个资源的信息。\n\n- `208 Already Reported` \n\n  在 DAV 里面使用 `` 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。\n\n- `226 IM Used` \n\n  服务器已经完成了对资源的`GET`请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。\n\n### 重定向消息\n\n- `300 Multiple Choice` \n\n  请求拥有多个可能的响应。用户代理或者用户应当从中选择一个。（没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。）\n\n- `301 Moved Permanently` \n\n  请求资源的 URL 已永久更改。在响应中给出了新的 URL。\n\n- `302 Found` \n\n  此响应代码表示所请求资源的 URI 已 *暂时* 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。\n\n- `303 See Other` \n\n  服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源。\n\n- `304 Not Modified` \n\n  这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。\n\n- `305 Use Proxy` 已弃用\n\n  在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用。\n\n- `306 unused` \n\n  此响应代码不再使用；它只是保留。它曾在 HTTP/1.1 规范的早期版本中使用过。\n\n- `307 Temporary Redirect` \n\n  服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 `302 Found` HTTP 响应代码具有相同的语义，但用户代理 *不能* 更改所使用的 HTTP 方法：如果在第一个请求中使用了 `POST`，则在第二个请求中必须使用 `POST`\n\n- `308 Permanent Redirect` \n\n  这意味着资源现在永久位于由`Location:` HTTP Response 标头指定的另一个 URI。这与 `301 Moved Permanently` HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 `POST`，则必须在第二个请求中使用 `POST`。\n\n### 客户端错误响应\n\n- `400 Bad Request` \n\n  由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。\n\n- `401 Unauthorized` \n\n  虽然 HTTP 标准指定了\"unauthorized\"，但从语义上来说，这个响应意味着\"unauthenticated\"。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。\n\n- `402 Payment Required` 实验性\n\n  此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。\n\n- `403 Forbidden` \n\n  客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 `401 Unauthorized` 不同，服务器知道客户端的身份。\n\n- `404 Not Found` \n\n  服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 `403 Forbidden`，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。\n\n- `405 Method Not Allowed` \n\n  服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用`DELETE`来删除资源。\n\n- `406 Not Acceptable` \n\n  当 web 服务器在执行[服务端驱动型内容协商机制](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation#服务端驱动型内容协商机制)后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。\n\n- `407 Proxy Authentication Required` \n\n  类似于 `401 Unauthorized` 但是认证需要由代理完成。\n\n- `408 Request Timeout` \n\n  此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。\n\n- `409 Conflict` \n\n  当请求与服务器的当前状态冲突时，将发送此响应。\n\n- `410 Gone` \n\n  当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。\n\n- `411 Length Required` \n\n  服务端拒绝该请求因为 `Content-Length` 头部字段未定义但是服务端需要它。\n\n- `412 Precondition Failed` \n\n  客户端在其头文件中指出了服务器不满足的先决条件。\n\n- `413 Payload Too Large` \n\n  请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 `Retry-After`。\n\n- `414 URI Too Long` \n\n  客户端请求的 URI 比服务器愿意接收的长度长。\n\n- `415 Unsupported Media Type` \n\n  服务器不支持请求数据的媒体格式，因此服务器拒绝请求。\n\n- `416 Range Not Satisfiable` \n\n  无法满足请求中 `Range` 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。\n\n- `417 Expectation Failed` \n\n  此响应代码表示服务器无法满足 `Expect` 请求标头字段所指示的期望。\n\n- `418 I'm a teapot` \n\n  服务端拒绝用茶壶煮咖啡。笑话，典故来源[茶壶冲泡咖啡](https://zh.wikipedia.org/wiki/超文本咖啡壶控制协议)\n\n- `421 Misdirected Request` \n\n  请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。\n\n- `422 Unprocessable Entity` \n\n  请求格式正确，但由于语义错误而无法遵循。\n\n- `423 Locked` \n\n  正在访问的资源已锁定。\n\n- `424 Failed Dependency` \n\n  由于前一个请求失败，请求失败。\n\n- `425 Too Early` 实验性\n\n  表示服务器不愿意冒险处理可能被重播的请求。\n\n- `426 Upgrade Required` \n\n  服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有[`Upgrade`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade) 字段的 426 响应 来表明它所需的协议（们）。\n\n- `428 Precondition Required` \n\n  源服务器要求请求是有条件的。此响应旨在防止'丢失更新'问题，即当第三方修改服务器上的状态时，客户端 `GET` 获取资源的状态，对其进行修改并将其 `PUT` 放回服务器，从而导致冲突。\n\n- `429 Too Many Requests` \n\n  用户在给定的时间内发送了太多请求（\"限制请求速率\"）\n\n- `431 Request Header Fields Too Large` \n\n  服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。\n\n- `451 Unavailable For Legal Reasons` \n\n  用户代理请求了无法合法提供的资源，例如政府审查的网页。\n\n### 服务端错误响应\n\n- `500 Internal Server Error` \n\n  服务器遇到了不知道如何处理的情况。\n\n- `501 Not Implemented` \n\n  服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 `GET` and `HEAD`.\n\n- `502 Bad Gateway` \n\n  此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。\n\n- `503 Service Unavailable` \n\n  服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 `Retry-After` 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。\n\n- `504 Gateway Timeout` \n\n  当服务器充当网关且无法及时获得响应时，会给出此错误响应。\n\n- `505 HTTP Version Not Supported` \n\n  服务器不支持请求中使用的 HTTP 版本。\n\n- `506 Variant Also Negotiates` \n\n  服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点。\n\n- `507 Insufficient Storage` \n\n  无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。\n\n- `508 Loop Detected` \n\n  服务器在处理请求时检测到无限循环。\n\n- `510 Not Extended` \n\n  服务器需要对请求进行进一步扩展才能完成请求。\n\n- `511 Network Authentication Required` \n\n  指示客户端需要进行身份验证才能获得网络访问权限。\n\n\n\n## 三次握手\n\n![](三次握手.png)\n\n\n\n## 四次挥手\n\n![](四次挥手.png)\n\n\n\n## 进程线程\n\n1. 进程（Process）\n   - 基本概念\n     - 进程是计算机中正在运行的程序的实例，它是操作系统进行资源分配和调度的基本单位。每个进程都有自己独立的地址空间，包括代码段、数据段、堆栈段等。这意味着不同进程之间的内存是相互隔离的，一个进程无法直接访问另一个进程的内存空间。例如，当同时运行一个文本编辑器和一个浏览器时，它们就是两个独立的进程，各自拥有独立的内存区域来存储程序代码、用户数据等。\n   - 进程的状态\n     - **就绪（Ready）状态**：进程已经准备好运行，只要 CPU 资源可用，就可以立即执行。例如，在一个多任务操作系统中，有多个进程在等待 CPU 的分配，这些进程就处于就绪状态。\n     - **运行（Running）状态**：进程正在 CPU 上执行指令。在单核 CPU 系统中，同一时刻只有一个进程处于运行状态；在多核 CPU 系统中，可以有多个进程同时处于运行状态，具体数量取决于 CPU 的核心数。\n     - **阻塞（Blocked）状态**：进程由于等待某些事件的发生（如等待 I/O 操作完成、等待获取某个锁等）而暂时无法继续执行。例如，一个进程正在等待从磁盘读取文件数据，在数据读取完成之前，它就处于阻塞状态。\n   - 进程的资源分配\n     - 操作系统会为每个进程分配一系列的资源，包括内存空间、文件描述符、CPU 时间片等。内存空间用于存储进程的代码和数据，文件描述符用于和外部文件进行交互，CPU 时间片则决定了进程能够在 CPU 上运行的时间长度。不同进程之间的资源分配是独立的，这有助于保证系统的稳定性和安全性，防止一个进程的错误操作影响到其他进程。\n2. 线程（Thread）\n   - 基本概念\n     - 线程是进程内部的一个执行单元，它是比进程更小的能够独立运行的基本单位。一个进程可以包含多个线程，这些线程共享进程的地址空间和大部分资源，如代码段、数据段、打开的文件和设备等。例如，在一个多线程的文本编辑器进程中，一个线程可能负责接收用户的输入，另一个线程负责在后台保存文件，它们共享进程的内存和文件资源。\n   - 线程的状态与进程类似\n     - 线程也有就绪、运行和阻塞等状态，并且其状态转换的原理和进程状态转换类似。不同的是，线程之间的切换相对进程切换来说开销更小，因为线程共享进程的大部分资源，不需要像进程切换那样重新加载内存映射等操作。\n   - 多线程的优势与挑战\n     - **优势**：多线程可以提高程序的执行效率，特别是在处理一些可以并发执行的任务时。例如，在一个网络服务器程序中，一个线程可以负责接收客户端的连接请求，另一个线程可以负责处理已经连接的客户端的数据请求，这样可以同时处理多个客户端的请求，提高服务器的并发处理能力。\n     - **挑战**：由于多个线程共享进程的资源，可能会出现线程安全问题。例如，当多个线程同时访问和修改同一块共享数据时，可能会导致数据不一致的情况。需要使用同步机制（如互斥锁、信号量等）来确保线程安全。\n3. 进程与进程之间的通信（IPC，Inter - Process Communication）\n   - 管道（Pipe）\n     - **匿名管道（Anonymous Pipe）**：主要用于具有亲缘关系（如父子进程）之间的通信。它是一个半双工的通信通道，即数据只能单向流动。例如，在一个父进程和子进程之间，父进程可以通过管道将数据发送给子进程，或者子进程将数据发送给父进程，但不能同时双向通信。匿名管道通过`pipe`系统调用创建，一端用于写入数据，另一端用于读取数据。\n     - **命名管道（Named Pipe）**：可以用于无亲缘关系的进程之间的通信。它在文件系统中有一个对应的文件名，多个进程可以通过这个文件名来打开管道进行通信。命名管道是全双工的通信通道，数据可以双向流动。例如，两个不同的服务器程序可以通过命名管道交换数据，一个程序将处理后的结果发送给另一个程序进行进一步的处理。\n   - 消息队列（Message Queue）\n     - 消息队列是一个由操作系统维护的消息存储区域。进程可以向消息队列发送消息，也可以从消息队列接收消息。消息队列中的消息具有一定的格式，通常包括消息类型和消息内容。不同的进程可以通过消息队列的标识符来访问和操作消息队列。例如，在一个分布式系统中，不同的进程可以通过消息队列来传递任务请求和结果，实现任务的异步处理。\n   - 共享内存（Shared Memory）\n     - 共享内存是一种高效的进程间通信方式。它允许不同的进程访问同一块物理内存区域，通过在这块共享内存区域中读写数据来实现通信。为了确保数据的一致性和安全性，通常需要结合同步机制（如互斥锁）来使用。例如，在一个多进程的数据库系统中，多个进程可以通过共享内存来快速访问和修改数据库的缓存数据，提高系统的性能。\n   - 信号量（Semaphore）和互斥锁（Mutex）（间接用于通信）\n     - 信号量和互斥锁主要用于控制多个进程对共享资源的访问。信号量可以用于控制同时访问某个资源的进程数量，互斥锁用于确保在同一时刻只有一个进程可以访问某个临界资源。虽然它们本身不是直接用于通信的工具，但在进程间共享资源的过程中，可以通过对信号量和互斥锁的操作来协调进程之间的行为，实现间接的通信。例如，两个进程需要访问一个打印机设备，通过互斥锁可以确保在一个进程使用打印机时，另一个进程需要等待。\n   - 套接字（Socket）\n     - 套接字主要用于网络通信，也可以用于本地进程之间的通信。它提供了一种通用的通信端点，可以在不同的主机之间或者同一主机的不同进程之间建立通信连接。例如，在一个客户端 - 服务器架构的应用中，客户端进程和服务器进程可以通过套接字建立 TCP 或 UDP 连接，实现数据的发送和接收。\n4. 线程与线程之间的通信\n   - 共享变量\n     - 由于同一进程中的线程共享进程的地址空间，所以线程之间可以通过共享变量来进行通信。例如，在一个多线程的计数器程序中，多个线程可以访问和修改同一个计数器变量。但是，需要注意线程安全问题，因为多个线程同时访问和修改共享变量可能会导致数据不一致。可以使用同步机制（如互斥锁）来确保只有一个线程能够访问共享变量的临界区。\n   - 消息传递（通过线程安全的队列等）\n     - 线程之间也可以通过消息传递的方式进行通信。例如，通过一个线程安全的队列（如 Java 中的`BlockingQueue`），一个线程可以将消息放入队列，另一个线程从队列中取出消息进行处理。这种方式可以有效地避免共享变量带来的线程安全问题，并且可以实现线程之间的异步通信。\n5. 进程与线程之间的通信（本质上是进程间通信）\n   - 因为线程是在进程内部运行的，所以进程与线程之间的通信通常可以归结为进程之间的通信方式。例如，如果一个进程中的线程需要与另一个进程中的线程进行通信，可以通过进程间通信的方法（如管道、消息队列等）来实现。不过，在实际操作中，需要考虑到进程和线程的不同特点，以及通信的效率和安全性等因素。\n\n\n\n## 死锁\n\n1. 死锁的定义和产生原因\n\n   - **定义**：死锁是指在多线程或多进程环境下，两个或多个执行单元（线程或进程）在等待对方释放资源，导致所有相关执行单元都无法继续执行的一种僵持状态。简单来说，就像是两个人互相等待对方手中的东西，结果谁也无法前进。\n   - 产生原因：\n     - **互斥条件**：资源在同一时刻只能被一个执行单元（线程或进程）使用。例如，一个打印机在某一时刻只能被一个进程用于打印任务。\n     - **请求和保持条件**：执行单元已经持有了至少一个资源，并且又请求新的资源，而且在等待新资源的同时不会释放已经持有的资源。比如，一个进程已经占用了打印机，又请求使用扫描仪，在没有得到扫描仪之前不会释放打印机。\n     - **不可剥夺条件**：资源只能由持有资源的执行单元自己释放，其他执行单元不能强行剥夺。例如，一个线程获得了某个锁，在它自己没有解锁之前，其他线程不能强制获取这个锁。\n     - **循环等待条件**：存在一组执行单元，每个执行单元都在等待下一个执行单元所占有的资源。例如，有进程 P1、P2 和资源 R1、R2，P1 等待 P2 释放 R2，P2 等待 P1 释放 R1，这样就形成了一个循环等待链。\n\n2. 死锁的示例场景（以进程为例）\n\n   - 假设有两个进程 P1 和 P2，以及两个资源 R1 和 R2（如打印机和扫描仪）。\n   - P1 首先请求并获得了 R1（打印机），然后它请求 R2（扫描仪）。\n   - 与此同时，P2 请求并获得了 R2（扫描仪），然后它请求 R1（打印机）。\n   - 此时，P1 在等待 P2 释放 R2，P2 在等待 P1 释放 R1，就形成了死锁状态，两个进程都无法继续执行它们所期望的任务。\n\n3. 死锁的解决方法\n\n   - 预防死锁\n\n     - **破坏互斥条件（较难实现）**：这个方法在实际中很难操作，因为很多资源本身的性质决定了它们在同一时刻只能被一个执行单元使用，比如打印机、键盘等独占性设备。不过，在某些情况下，可以通过虚拟技术来模拟共享资源。例如，使用假脱机打印技术，将打印机的输出任务先存储在磁盘缓冲区，多个进程可以同时 “使用” 这个缓冲区，而真正的打印机可以按照顺序处理缓冲区中的任务，从而在一定程度上打破互斥条件。\n\n     - 破坏请求和保持条件：\n\n       - **资源预分配策略**：要求进程在开始执行之前一次性申请它所需要的所有资源。如果系统无法满足全部资源请求，就不分配任何资源给该进程，让它等待。这样可以避免进程在持有部分资源的情况下又请求其他资源而导致死锁。例如，一个数据库应用程序，进程在开始查询和更新数据之前，就申请好数据库连接、缓存空间等所有可能需要的资源。\n       - **缺点**：这种方法可能会导致资源利用率较低，因为进程可能会在一段时间内占用一些它暂时不需要使用的资源，而且有些资源的需求可能很难在进程开始时就准确预估。\n\n     - 破坏不可剥夺条件：\n\n       - **允许资源剥夺**：当一个执行单元请求的资源无法立即获得时，可以剥夺它已经持有的资源。例如，在操作系统中，对于一些优先级较低的进程所占用的资源，如果有高优先级的进程需要，可以将低优先级进程的资源剥夺，分配给高优先级进程。不过，这种方法实现起来比较复杂，需要考虑资源的恢复和执行单元状态的保存等问题。\n\n     - 破坏循环等待条件：\n\n       - **资源有序分配策略**：对系统中的所有资源进行编号，要求每个执行单元按照资源编号递增（或递减）的顺序请求资源。例如，如果有资源 R1（编号为 1）、R2（编号为 2）、R3（编号为 3），进程必须先请求 R1，然后才能请求 R2，最后才能请求 R3。这样可以避免出现循环等待的情况。\n- **缺点**：这种方法可能会限制资源的使用灵活性，而且在资源编号和请求顺序的管理上需要一定的开销。\n     \n   - 避免死锁（银行家算法）\n\n     - **基本原理**：银行家算法是一种经典的死锁避免算法，它的主要思想是在进程请求资源时，系统会预先判断这次分配是否会导致系统进入死锁状态。如果不会导致死锁，就进行资源分配；如果可能导致死锁，就拒绝分配。\n\n     - 实现步骤：\n\n       - **系统状态记录**：系统维护一些信息，包括每个进程已经拥有的资源数量、每个进程还需要的资源数量、系统中可用的资源数量等。\n- **安全性检查**：当一个进程请求资源时，系统会检查如果把资源分配给这个进程后，是否还能找到一个安全序列。安全序列是指系统能够按照某种顺序为每个进程分配足够的资源，使得每个进程都能最终完成并释放其所有资源。如果存在这样的安全序列，那么系统就认为当前状态是安全的，可以进行资源分配；否则，就拒绝分配资源。\n     \n- 检测死锁\n   \n     - **资源分配图（Resource - Allocation Graph）**：通过构建资源分配图来检测死锁。资源分配图是一种有向图，其中节点包括进程节点和资源节点，边表示进程对资源的请求或者资源的分配情况。如果在资源分配图中出现了环，并且每个环中的资源都只有一个实例，那么就表示出现了死锁。如果环中的资源有多个实例，还需要进一步分析才能确定是否死锁。\n  - **定期检查机制**：系统可以定期（例如每隔一段时间或者在特定的事件发生后）运行死锁检测算法，通过检查资源分配图或者其他系统状态信息来判断是否出现了死锁。\n   \n- 解除死锁\n   \n     - **资源剥夺法**：剥夺死锁进程所占用的资源，将这些资源分配给其他进程，以打破死锁状态。这可能需要回滚被剥夺资源的进程的部分操作，并且在合适的时候恢复这些操作。例如，在数据库系统中，当出现死锁时，可以强制回滚一个事务（进程），释放它所占用的数据库锁，让其他事务能够继续执行。\n  - **撤销进程法**：直接撤销部分或全部死锁进程，以解除死锁。撤销进程时，需要考虑进程的优先级、已经执行的工作量等因素。例如，优先撤销优先级较低或者刚刚开始执行的进程，尽量减少对系统整体性能的影响。\n     - **进程回退法**：让一个或多个死锁进程回退到足以打破死锁的地步，例如，让一个进程释放它之前请求的某个资源，使得其他进程能够继续执行。这种方法需要系统能够记录每个进程的执行历史和资源请求顺序，以便准确地进行回退操作。","slug":"408","published":1,"updated":"2025-09-03T16:19:19.103Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkff00003r44y6bmcgetm","content":"<h2 id=\"Http1-0-Http1-1-Https\"><a href=\"#Http1-0-Http1-1-Https\" class=\"headerlink\" title=\"Http1.0 &#x2F; Http1.1 &#x2F; Https\"></a>Http1.0 &#x2F; Http1.1 &#x2F; Https</h2><ol>\n<li><p>HTTP0.9</p>\n<ul>\n<li>发布于 1991 年</li>\n<li><strong>只支持 GET 请求方法获取文本数据</strong>，当时主要是为了获取 HTML 页面内容</li>\n</ul>\n</li>\n<li><p>HTTP1.0</p>\n<ul>\n<li><p>发布于 1996 年</p>\n</li>\n<li><p><strong>支持 POST、HEAD 等请求方法</strong>，<strong>支持请求头，响应头等，支持更多种数据类型</strong>，不再局限于文本数据</p>\n</li>\n<li><p>但是<strong>浏览器的每次请求都需要与服务器建立一个 TCP 链接</strong>，<strong>请求处理完成之后立即断开连接</strong>，每次建立连接增加了性能损耗</p>\n</li>\n<li><p>基本特性</p>\n<ul>\n<li><strong>简单的请求 - 响应模式</strong>：HTTP1.0 采用了基本的请求 - 响应通信模式。客户端发送一个请求到服务器，服务器处理请求后返回一个响应。例如，当浏览器请求一个网页时，会发送一个包含请求方法（如 GET）、请求的资源路径（如 &#x2F;index.html）等信息的请求报文，服务器根据请求内容查找资源并返回包含 HTML 文档的响应报文。</li>\n<li><strong>有限的连接复用能力</strong>：在 HTTP1.0 中，每个请求 - 响应过程通常需要建立一个新的 TCP 连接。这意味着如果一个网页包含多个资源（如多个图片、CSS 文件、JavaScript 文件），浏览器需要为每个资源建立单独的 TCP 连接，效率较低。例如，一个网页有 10 个图片，就可能需要建立 10 个 TCP 连接来获取这些图片。</li>\n<li><strong>无状态协议</strong>：HTTP1.0 是无状态的，服务器不会在多个请求之间记住客户端的状态。每次请求都是独立的，服务器不会知道之前是否处理过来自这个客户端的请求。这在一些需要用户登录状态等场景下，就需要通过额外的机制（如使用 Cookie）来维护状态。</li>\n</ul>\n</li>\n<li><p>内容协商机制</p>\n<ul>\n<li>HTTP1.0 支持简单的内容协商，通过请求头中的<code>Accept</code>字段，客户端可以告知服务器它所能接受的内容类型（如<code>text/html</code>、<code>application/json</code>等）。服务器根据客户端的请求和自身的资源情况，返回符合客户端要求的内容。例如，客户端在<code>Accept</code>头中指定<code>application/json</code>，服务器如果有对应的 JSON 格式的资源，就会返回 JSON 数据，否则可能返回错误信息。</li>\n</ul>\n</li>\n<li><p>缓存机制</p>\n<ul>\n<li>HTTP1.0 引入了基本的缓存机制，主要通过响应头中的<code>Expires</code>字段来实现。<code>Expires</code>字段指定了资源过期的时间，客户端（如浏览器）可以根据这个时间来判断是否需要重新请求资源。例如，如果<code>Expires</code>字段的值是未来的某个时间点，浏览器在这个时间之前访问相同资源时，可以直接使用本地缓存，而无需向服务器发送请求。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTP1.1</p>\n<ul>\n<li>发布于 1997 年</li>\n<li><strong>增加了 PUT、DELETE 等请求方法</strong> </li>\n<li>**采用持久连接（Connect: keep-alive），多个请求可以公用同一个 TCP 连接 ** </li>\n<li>改进的连接复用特性<ul>\n<li><strong>持久连接（Keep - Alive）</strong>：HTTP1.1 最重要的改进之一是引入了持久连接。这允许在一个 TCP 连接上进行多个请求 - 响应的交互，减少了频繁建立和断开连接的开销。例如，对于一个包含多个图片的网页，浏览器可以通过一个 TCP 连接依次请求这些图片，提高了性能。通过在请求头中添加<code>Connection: Keep - Alive</code>字段，客户端可以请求服务器保持连接打开，服务器在响应头中也可以通过相同的字段来确认是否同意保持连接。</li>\n<li><strong>管道化（Pipelining）</strong>：HTTP1.1 还支持管道化操作，客户端可以连续发送多个请求而无需等待每个请求的响应，服务器会按照收到请求的顺序依次返回响应。不过，管道化在实际应用中存在一些问题，如对头阻塞（Head - of - Line Blocking）的情况，当一个请求的响应延迟时，会影响后续请求的响应处理。</li>\n</ul>\n</li>\n<li>增强的缓存机制<ul>\n<li><strong>Cache - Control 头</strong>：HTTP1.1 引入了<code>Cache - Control</code>头，它提供了更灵活和强大的缓存控制功能。与 HTTP1.0 的<code>Expires</code>相比，<code>Cache - Control</code>可以通过多个指令（如<code>max - age</code>、<code>no - cache</code>、<code>private</code>等）来精确控制缓存行为。例如，<code>Cache - Control: max - age = 3600</code>表示资源在 3600 秒内可以使用缓存，无需重新请求。</li>\n<li><strong>有条件的请求（Conditional Requests）</strong>：通过<code>If - Modified - Since</code>和<code>If - None - Match</code>等请求头，客户端可以有条件地向服务器请求资源。例如，客户端可以发送带有<code>If - Modified - Since</code>头的请求，告知服务器只有在资源自指定时间之后被修改过才返回新的资源，否则返回 304 Not Modified 状态码，表示可以使用缓存资源，这种机制进一步提高了缓存效率。</li>\n</ul>\n</li>\n<li>新增的状态码和请求方法<ul>\n<li><strong>新增状态码</strong>：HTTP1.1 新增了一些状态码来更好地处理各种网络情况。例如，100 Continue 状态码，当客户端发送一个可能包含大量数据的请求（如 POST 请求带有大量数据）时，它可以先发送请求头部分，服务器返回 100 Continue 表示可以继续发送请求体，这对于处理大数据量的请求很有帮助。</li>\n<li><strong>新增请求方法</strong>：新增了一些请求方法，如 PUT 和 DELETE。PUT 方法用于将数据上传到指定的资源位置并替换原有内容，DELETE 方法用于删除指定的资源。这些方法使得 HTTP 协议在资源操作上更加灵活。</li>\n</ul>\n</li>\n<li>带宽优化机制<ul>\n<li><strong>字节范围请求（Byte - Ranges）</strong>：HTTP1.1 支持字节范围请求，客户端可以通过<code>Range</code>请求头指定请求资源的字节范围。例如，当下载一个大文件时，如果下载中断，客户端可以使用字节范围请求来续传文件，只请求还未下载的部分，而不是重新下载整个文件，提高了带宽的利用率。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTP2.0</p>\n<ul>\n<li>二进制分帧层（Binary Framing Layer）<ul>\n<li><strong>帧格式</strong>：HTTP2.0 在应用层和传输层之间引入了二进制分帧层。数据被分割成更小的单位，称为帧（Frame）。帧有多种类型，如 HEADERS 帧用于传输头部信息，DATA 帧用于传输实际的数据内容。每个帧都有自己的帧头，包含帧的长度、类型、流标识符等信息。这种二进制格式使得协议解析更加高效，计算机能够更快速地处理二进制数据，相比于 HTTP1.x 的文本格式，减少了解析的复杂性和开销。</li>\n<li><strong>多路复用（Multiplexing）</strong>：通过二进制分帧，HTTP2.0 实现了真正的多路复用。在一个 TCP 连接上可以同时发送和接收多个请求和响应的帧，这些请求和响应的帧相互独立，不会像 HTTP1.1 的管道化那样出现头阻塞（Head - of - Line Blocking）问题。例如，浏览器可以同时发送多个资源的请求（如多个图片、CSS 和 JavaScript 文件），服务器可以根据资源的准备情况，以任意顺序返回这些资源的响应帧，大大提高了网络资源的利用效率。</li>\n</ul>\n</li>\n<li>头部压缩（Header Compression）<ul>\n<li><strong>HPACK 算法</strong>：HTTP2.0 使用 HPACK 算法对 HTTP 头部进行压缩。在 HTTP 通信中，头部信息（如请求头和响应头）往往包含了许多重复的字段，如用户代理（User - Agent）、Cookie 等。HPACK 算法会对这些头部信息进行分析和压缩，通过建立静态和动态的头部表，对重复出现的头部字段进行索引和替换，从而减少头部数据的传输量。例如，在一个网页的多次请求中，用户代理信息通常是不变的，使用 HPACK 算法可以避免每次都传输完整的用户代理字符串，有效节省了带宽。</li>\n</ul>\n</li>\n<li>服务器推送（Server Push）<ul>\n<li><strong>推送机制</strong>：HTTP2.0 的服务器推送是一个重要的特性。服务器可以在客户端没有明确请求的情况下，主动向客户端推送相关的资源。例如，当浏览器请求一个 HTML 网页时，服务器可以根据对网页内容的了解，预先推送网页可能会用到的 CSS 文件、JavaScript 文件或图片等资源。这样可以减少客户端等待资源请求的时间，进一步提高网页的加载速度。服务器推送是通过 PUSH_PROMISE 帧来实现的，服务器在发送响应之前，可以先发送 PUSH_PROMISE 帧告知客户端即将推送的资源。</li>\n</ul>\n</li>\n<li>流量控制（Flow Control）<ul>\n<li><strong>基于窗口的流量控制</strong>：HTTP2.0 引入了流量控制机制，以确保发送端不会因为发送过多的数据而淹没接收端。它采用基于窗口的流量控制方式，每个接收端都有一个接收窗口，发送端在发送数据时需要考虑接收窗口的大小。例如，如果接收端的接收窗口已满，发送端就会暂停发送数据，直到接收窗口有足够的空间。这种流量控制机制可以避免网络拥塞，保证数据传输的平稳性。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li>基本概念和加密原理<ul>\n<li><strong>SSL&#x2F;TLS 协议</strong>：HTTPS（Hypertext Transfer Protocol Secure）是在 HTTP 协议基础上加入 SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）协议，用于提供安全的通信通道。SSL 和 TLS 协议的功能相似，TLS 是 SSL 的继任者。这些协议通过加密和身份验证机制来保护数据传输的安全。在通信开始时，客户端和服务器会进行握手（Handshake）过程，协商加密算法和密钥。</li>\n<li><strong>非对称加密和对称加密结合</strong>：在握手过程中，首先使用非对称加密（如 RSA 算法）进行密钥交换。服务器会向客户端发送包含公钥的证书，客户端使用这个公钥来加密一个随机生成的对称密钥，然后将加密后的对称密钥发送回服务器。之后，双方就使用这个对称密钥进行数据的加密和解密。对称加密（如 AES 算法）用于后续的数据传输，因为对称加密在性能上比非对称加密更高效，这样的结合方式既保证了密钥交换的安全性，又兼顾了数据加密的效率。</li>\n</ul>\n</li>\n<li>数字证书（Digital Certificates）<ul>\n<li><strong>证书颁发机构（CA）</strong>：数字证书是 HTTPS 的关键组成部分。证书是由受信任的第三方机构，即证书颁发机构（CA）颁发的。这些 CA 机构会对服务器的身份进行验证，验证通过后会颁发包含服务器公钥、服务器信息（如域名等）以及 CA 签名的证书。客户端在与服务器建立连接时，会验证证书的有效性，包括检查证书是否过期、证书的签名是否由受信任的 CA 机构颁发等。如果证书验证不通过，客户端会发出警告，提示可能存在安全风险。</li>\n</ul>\n</li>\n<li>安全优势<ul>\n<li><strong>数据保密性</strong>：通过加密机制，HTTPS 可以确保在网络传输过程中的数据不被窃取。即使数据被中间人拦截，由于数据是加密的，中间人也无法获取其中的内容。例如，用户在网上银行进行交易时，账号、密码等敏感信息通过 HTTPS 加密传输，保障了用户的隐私和资金安全。</li>\n<li><strong>数据完整性</strong>：HTTPS 还可以防止数据在传输过程中被篡改。通过消息认证码（MAC）等技术，接收方可以验证收到的数据是否与发送方发送的数据一致。如果数据被篡改，接收方可以检测到并拒绝接收，从而保证了数据的完整性。</li>\n<li><strong>身份验证</strong>：数字证书提供了服务器的身份验证功能。客户端可以确认与之通信的服务器确实是声称的服务器，而不是假冒的服务器。这对于防止钓鱼网站等安全威胁非常重要，例如，用户访问银行网站时，通过验证证书可以确认是真正的银行服务器，而不是恶意攻击者伪装的网站。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>请求方式 RFC</p>\n<ul>\n<li>GET，请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据</li>\n<li>HEAD：请求一个于 GET 请求的响应相同的响应，但没有响应体<ul>\n<li>比如在准备下载一个文件前，先获取文件的大小，在决定是否进行下载</li>\n</ul>\n</li>\n<li>POST：用于将实体提交到指定的资源</li>\n<li>PUT：请求有效载荷（payload）替换目标资源的所有当前表示</li>\n<li>DELETE：删除指定的资源</li>\n<li>PATCH：用于对资源部分修改</li>\n<li>CONNECT：建立一个到目标资源标识的服务器的隧道，通常用在代理服务器，网页开发很少用到</li>\n<li>TRACE：沿着到目标资源的路径执行的一个消息回环测试</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"响应状态码\"><a href=\"#响应状态码\" class=\"headerlink\" title=\"响应状态码\"></a>响应状态码</h2><p>HTTP 响应状态码用来表明特定 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP\">HTTP</a> 请求是否成功完成。 响应被归为以下五大类：</p>\n<ol>\n<li>信息响应 (<code>100</code>–<code>199</code>)</li>\n<li>成功响应 (<code>200</code>–<code>299</code>)</li>\n<li>重定向消息 (<code>300</code>–<code>399</code>)</li>\n<li>客户端错误响应 (<code>400</code>–<code>499</code>)</li>\n<li>服务端错误响应 (<code>500</code>–<code>599</code>)</li>\n</ol>\n<p>以下状态码由 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#section-10\">section 10 of RFC 2616</a>定义。你可以在<a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-6\">RFC 7231</a>中找到更新后的规范。</p>\n<p><strong>备注：</strong>如果你收到的响应不在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#%E4%BF%A1%E6%81%AF%E5%93%8D%E5%BA%94\">此列表</a> 中，则它为非标准响应，可能是服务器软件的自定义响应。</p>\n<h3 id=\"信息响应\"><a href=\"#信息响应\" class=\"headerlink\" title=\"信息响应\"></a>信息响应</h3><ul>\n<li><p><code>100 Continue</code> </p>\n<p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p>\n</li>\n<li><p><code>101 Switching Protocols </code> </p>\n<p>该代码是响应客户端的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade\"><code>Upgrade</code></a> 请求头发送的，指明服务器即将切换的协议。</p>\n</li>\n<li><p><code>102 Processing</code> </p>\n<p>此代码表示服务器已收到并正在处理该请求，但当前没有响应可用。</p>\n</li>\n<li><p><code>103 Early Hints</code> </p>\n<p>此状态代码主要用于与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link\"><code>Link</code></a> 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload\">preloading</a> 资源。</p>\n</li>\n</ul>\n<h3 id=\"成功响应\"><a href=\"#成功响应\" class=\"headerlink\" title=\"成功响应\"></a>成功响应</h3><ul>\n<li><p><code>200 OK</code> </p>\n<p>请求成功。成功的含义取决于 HTTP 方法：<code>GET</code>: 资源已被提取并在消息正文中传输。<code>HEAD</code>: 实体标头位于消息正文中。<code>PUT</code> or <code>POST</code>: 描述动作结果的资源在消息体中传输。<code>TRACE</code>: 消息正文包含服务器收到的请求消息。</p>\n</li>\n<li><p><code>201 Created</code> </p>\n<p>该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。</p>\n</li>\n<li><p><code>202 Accepted</code> </p>\n<p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p>\n</li>\n<li><p><code>203 Non-Authoritative Information</code> </p>\n<p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回<code>200 OK</code>的情况下才是合适的。</p>\n</li>\n<li><p><code>204 No Content</code> </p>\n<p>对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。</p>\n</li>\n<li><p><code>205 Reset Content</code> </p>\n<p>告诉用户代理重置发送此请求的文档。</p>\n</li>\n<li><p><code>206 Partial Content</code> </p>\n<p>当从客户端发送<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\"><code>Range</code></a>范围标头以只请求资源的一部分时，将使用此响应代码。</p>\n</li>\n<li><p><code>207 Multi-Status</code> </p>\n<p>对于多个状态代码都可能合适的情况，传输有关多个资源的信息。</p>\n</li>\n<li><p><code>208 Already Reported</code> </p>\n<p>在 DAV 里面使用 &#96;&#96; 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</p>\n</li>\n<li><p><code>226 IM Used</code> </p>\n<p>服务器已经完成了对资源的<code>GET</code>请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p>\n</li>\n</ul>\n<h3 id=\"重定向消息\"><a href=\"#重定向消息\" class=\"headerlink\" title=\"重定向消息\"></a>重定向消息</h3><ul>\n<li><p><code>300 Multiple Choice</code> </p>\n<p>请求拥有多个可能的响应。用户代理或者用户应当从中选择一个。（没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。）</p>\n</li>\n<li><p><code>301 Moved Permanently</code> </p>\n<p>请求资源的 URL 已永久更改。在响应中给出了新的 URL。</p>\n</li>\n<li><p><code>302 Found</code> </p>\n<p>此响应代码表示所请求资源的 URI 已 <em>暂时</em> 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。</p>\n</li>\n<li><p><code>303 See Other</code> </p>\n<p>服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源。</p>\n</li>\n<li><p><code>304 Not Modified</code> </p>\n<p>这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。</p>\n</li>\n<li><p><code>305 Use Proxy</code> 已弃用</p>\n<p>在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用。</p>\n</li>\n<li><p><code>306 unused</code> </p>\n<p>此响应代码不再使用；它只是保留。它曾在 HTTP&#x2F;1.1 规范的早期版本中使用过。</p>\n</li>\n<li><p><code>307 Temporary Redirect</code> </p>\n<p>服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 <code>302 Found</code> HTTP 响应代码具有相同的语义，但用户代理 <em>不能</em> 更改所使用的 HTTP 方法：如果在第一个请求中使用了 <code>POST</code>，则在第二个请求中必须使用 <code>POST</code></p>\n</li>\n<li><p><code>308 Permanent Redirect</code> </p>\n<p>这意味着资源现在永久位于由<code>Location:</code> HTTP Response 标头指定的另一个 URI。这与 <code>301 Moved Permanently</code> HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 <code>POST</code>，则必须在第二个请求中使用 <code>POST</code>。</p>\n</li>\n</ul>\n<h3 id=\"客户端错误响应\"><a href=\"#客户端错误响应\" class=\"headerlink\" title=\"客户端错误响应\"></a>客户端错误响应</h3><ul>\n<li><p><code>400 Bad Request</code> </p>\n<p>由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。</p>\n</li>\n<li><p><code>401 Unauthorized</code> </p>\n<p>虽然 HTTP 标准指定了”unauthorized”，但从语义上来说，这个响应意味着”unauthenticated”。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。</p>\n</li>\n<li><p><code>402 Payment Required</code> 实验性</p>\n<p>此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。</p>\n</li>\n<li><p><code>403 Forbidden</code> </p>\n<p>客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 <code>401 Unauthorized</code> 不同，服务器知道客户端的身份。</p>\n</li>\n<li><p><code>404 Not Found</code> </p>\n<p>服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 <code>403 Forbidden</code>，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。</p>\n</li>\n<li><p><code>405 Method Not Allowed</code> </p>\n<p>服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用<code>DELETE</code>来删除资源。</p>\n</li>\n<li><p><code>406 Not Acceptable</code> </p>\n<p>当 web 服务器在执行<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E6%9C%BA%E5%88%B6\">服务端驱动型内容协商机制</a>后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。</p>\n</li>\n<li><p><code>407 Proxy Authentication Required</code> </p>\n<p>类似于 <code>401 Unauthorized</code> 但是认证需要由代理完成。</p>\n</li>\n<li><p><code>408 Request Timeout</code> </p>\n<p>此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。</p>\n</li>\n<li><p><code>409 Conflict</code> </p>\n<p>当请求与服务器的当前状态冲突时，将发送此响应。</p>\n</li>\n<li><p><code>410 Gone</code> </p>\n<p>当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。</p>\n</li>\n<li><p><code>411 Length Required</code> </p>\n<p>服务端拒绝该请求因为 <code>Content-Length</code> 头部字段未定义但是服务端需要它。</p>\n</li>\n<li><p><code>412 Precondition Failed</code> </p>\n<p>客户端在其头文件中指出了服务器不满足的先决条件。</p>\n</li>\n<li><p><code>413 Payload Too Large</code> </p>\n<p>请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 <code>Retry-After</code>。</p>\n</li>\n<li><p><code>414 URI Too Long</code> </p>\n<p>客户端请求的 URI 比服务器愿意接收的长度长。</p>\n</li>\n<li><p><code>415 Unsupported Media Type</code> </p>\n<p>服务器不支持请求数据的媒体格式，因此服务器拒绝请求。</p>\n</li>\n<li><p><code>416 Range Not Satisfiable</code> </p>\n<p>无法满足请求中 <code>Range</code> 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。</p>\n</li>\n<li><p><code>417 Expectation Failed</code> </p>\n<p>此响应代码表示服务器无法满足 <code>Expect</code> 请求标头字段所指示的期望。</p>\n</li>\n<li><p><code>418 I&#39;m a teapot</code> </p>\n<p>服务端拒绝用茶壶煮咖啡。笑话，典故来源<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E5%92%96%E5%95%A1%E5%A3%B6%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">茶壶冲泡咖啡</a></p>\n</li>\n<li><p><code>421 Misdirected Request</code> </p>\n<p>请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。</p>\n</li>\n<li><p><code>422 Unprocessable Entity</code> </p>\n<p>请求格式正确，但由于语义错误而无法遵循。</p>\n</li>\n<li><p><code>423 Locked</code> </p>\n<p>正在访问的资源已锁定。</p>\n</li>\n<li><p><code>424 Failed Dependency</code> </p>\n<p>由于前一个请求失败，请求失败。</p>\n</li>\n<li><p><code>425 Too Early</code> 实验性</p>\n<p>表示服务器不愿意冒险处理可能被重播的请求。</p>\n</li>\n<li><p><code>426 Upgrade Required</code> </p>\n<p>服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade\"><code>Upgrade</code></a> 字段的 426 响应 来表明它所需的协议（们）。</p>\n</li>\n<li><p><code>428 Precondition Required</code> </p>\n<p>源服务器要求请求是有条件的。此响应旨在防止’丢失更新’问题，即当第三方修改服务器上的状态时，客户端 <code>GET</code> 获取资源的状态，对其进行修改并将其 <code>PUT</code> 放回服务器，从而导致冲突。</p>\n</li>\n<li><p><code>429 Too Many Requests</code> </p>\n<p>用户在给定的时间内发送了太多请求（”限制请求速率”）</p>\n</li>\n<li><p><code>431 Request Header Fields Too Large</code> </p>\n<p>服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。</p>\n</li>\n<li><p><code>451 Unavailable For Legal Reasons</code> </p>\n<p>用户代理请求了无法合法提供的资源，例如政府审查的网页。</p>\n</li>\n</ul>\n<h3 id=\"服务端错误响应\"><a href=\"#服务端错误响应\" class=\"headerlink\" title=\"服务端错误响应\"></a>服务端错误响应</h3><ul>\n<li><p><code>500 Internal Server Error</code> </p>\n<p>服务器遇到了不知道如何处理的情况。</p>\n</li>\n<li><p><code>501 Not Implemented</code> </p>\n<p>服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 <code>GET</code> and <code>HEAD</code>.</p>\n</li>\n<li><p><code>502 Bad Gateway</code> </p>\n<p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p>\n</li>\n<li><p><code>503 Service Unavailable</code> </p>\n<p>服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 <code>Retry-After</code> 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p>\n</li>\n<li><p><code>504 Gateway Timeout</code> </p>\n<p>当服务器充当网关且无法及时获得响应时，会给出此错误响应。</p>\n</li>\n<li><p><code>505 HTTP Version Not Supported</code> </p>\n<p>服务器不支持请求中使用的 HTTP 版本。</p>\n</li>\n<li><p><code>506 Variant Also Negotiates</code> </p>\n<p>服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点。</p>\n</li>\n<li><p><code>507 Insufficient Storage</code> </p>\n<p>无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。</p>\n</li>\n<li><p><code>508 Loop Detected</code> </p>\n<p>服务器在处理请求时检测到无限循环。</p>\n</li>\n<li><p><code>510 Not Extended</code> </p>\n<p>服务器需要对请求进行进一步扩展才能完成请求。</p>\n</li>\n<li><p><code>511 Network Authentication Required</code> </p>\n<p>指示客户端需要进行身份验证才能获得网络访问权限。</p>\n</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"/paw/2025/04/01/408/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\"></p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p><img src=\"/paw/2025/04/01/408/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\"></p>\n<h2 id=\"进程线程\"><a href=\"#进程线程\" class=\"headerlink\" title=\"进程线程\"></a>进程线程</h2><ol>\n<li>进程（Process）<ul>\n<li>基本概念<ul>\n<li>进程是计算机中正在运行的程序的实例，它是操作系统进行资源分配和调度的基本单位。每个进程都有自己独立的地址空间，包括代码段、数据段、堆栈段等。这意味着不同进程之间的内存是相互隔离的，一个进程无法直接访问另一个进程的内存空间。例如，当同时运行一个文本编辑器和一个浏览器时，它们就是两个独立的进程，各自拥有独立的内存区域来存储程序代码、用户数据等。</li>\n</ul>\n</li>\n<li>进程的状态<ul>\n<li><strong>就绪（Ready）状态</strong>：进程已经准备好运行，只要 CPU 资源可用，就可以立即执行。例如，在一个多任务操作系统中，有多个进程在等待 CPU 的分配，这些进程就处于就绪状态。</li>\n<li><strong>运行（Running）状态</strong>：进程正在 CPU 上执行指令。在单核 CPU 系统中，同一时刻只有一个进程处于运行状态；在多核 CPU 系统中，可以有多个进程同时处于运行状态，具体数量取决于 CPU 的核心数。</li>\n<li><strong>阻塞（Blocked）状态</strong>：进程由于等待某些事件的发生（如等待 I&#x2F;O 操作完成、等待获取某个锁等）而暂时无法继续执行。例如，一个进程正在等待从磁盘读取文件数据，在数据读取完成之前，它就处于阻塞状态。</li>\n</ul>\n</li>\n<li>进程的资源分配<ul>\n<li>操作系统会为每个进程分配一系列的资源，包括内存空间、文件描述符、CPU 时间片等。内存空间用于存储进程的代码和数据，文件描述符用于和外部文件进行交互，CPU 时间片则决定了进程能够在 CPU 上运行的时间长度。不同进程之间的资源分配是独立的，这有助于保证系统的稳定性和安全性，防止一个进程的错误操作影响到其他进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线程（Thread）<ul>\n<li>基本概念<ul>\n<li>线程是进程内部的一个执行单元，它是比进程更小的能够独立运行的基本单位。一个进程可以包含多个线程，这些线程共享进程的地址空间和大部分资源，如代码段、数据段、打开的文件和设备等。例如，在一个多线程的文本编辑器进程中，一个线程可能负责接收用户的输入，另一个线程负责在后台保存文件，它们共享进程的内存和文件资源。</li>\n</ul>\n</li>\n<li>线程的状态与进程类似<ul>\n<li>线程也有就绪、运行和阻塞等状态，并且其状态转换的原理和进程状态转换类似。不同的是，线程之间的切换相对进程切换来说开销更小，因为线程共享进程的大部分资源，不需要像进程切换那样重新加载内存映射等操作。</li>\n</ul>\n</li>\n<li>多线程的优势与挑战<ul>\n<li><strong>优势</strong>：多线程可以提高程序的执行效率，特别是在处理一些可以并发执行的任务时。例如，在一个网络服务器程序中，一个线程可以负责接收客户端的连接请求，另一个线程可以负责处理已经连接的客户端的数据请求，这样可以同时处理多个客户端的请求，提高服务器的并发处理能力。</li>\n<li><strong>挑战</strong>：由于多个线程共享进程的资源，可能会出现线程安全问题。例如，当多个线程同时访问和修改同一块共享数据时，可能会导致数据不一致的情况。需要使用同步机制（如互斥锁、信号量等）来确保线程安全。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程与进程之间的通信（IPC，Inter - Process Communication）<ul>\n<li>管道（Pipe）<ul>\n<li><strong>匿名管道（Anonymous Pipe）</strong>：主要用于具有亲缘关系（如父子进程）之间的通信。它是一个半双工的通信通道，即数据只能单向流动。例如，在一个父进程和子进程之间，父进程可以通过管道将数据发送给子进程，或者子进程将数据发送给父进程，但不能同时双向通信。匿名管道通过<code>pipe</code>系统调用创建，一端用于写入数据，另一端用于读取数据。</li>\n<li><strong>命名管道（Named Pipe）</strong>：可以用于无亲缘关系的进程之间的通信。它在文件系统中有一个对应的文件名，多个进程可以通过这个文件名来打开管道进行通信。命名管道是全双工的通信通道，数据可以双向流动。例如，两个不同的服务器程序可以通过命名管道交换数据，一个程序将处理后的结果发送给另一个程序进行进一步的处理。</li>\n</ul>\n</li>\n<li>消息队列（Message Queue）<ul>\n<li>消息队列是一个由操作系统维护的消息存储区域。进程可以向消息队列发送消息，也可以从消息队列接收消息。消息队列中的消息具有一定的格式，通常包括消息类型和消息内容。不同的进程可以通过消息队列的标识符来访问和操作消息队列。例如，在一个分布式系统中，不同的进程可以通过消息队列来传递任务请求和结果，实现任务的异步处理。</li>\n</ul>\n</li>\n<li>共享内存（Shared Memory）<ul>\n<li>共享内存是一种高效的进程间通信方式。它允许不同的进程访问同一块物理内存区域，通过在这块共享内存区域中读写数据来实现通信。为了确保数据的一致性和安全性，通常需要结合同步机制（如互斥锁）来使用。例如，在一个多进程的数据库系统中，多个进程可以通过共享内存来快速访问和修改数据库的缓存数据，提高系统的性能。</li>\n</ul>\n</li>\n<li>信号量（Semaphore）和互斥锁（Mutex）（间接用于通信）<ul>\n<li>信号量和互斥锁主要用于控制多个进程对共享资源的访问。信号量可以用于控制同时访问某个资源的进程数量，互斥锁用于确保在同一时刻只有一个进程可以访问某个临界资源。虽然它们本身不是直接用于通信的工具，但在进程间共享资源的过程中，可以通过对信号量和互斥锁的操作来协调进程之间的行为，实现间接的通信。例如，两个进程需要访问一个打印机设备，通过互斥锁可以确保在一个进程使用打印机时，另一个进程需要等待。</li>\n</ul>\n</li>\n<li>套接字（Socket）<ul>\n<li>套接字主要用于网络通信，也可以用于本地进程之间的通信。它提供了一种通用的通信端点，可以在不同的主机之间或者同一主机的不同进程之间建立通信连接。例如，在一个客户端 - 服务器架构的应用中，客户端进程和服务器进程可以通过套接字建立 TCP 或 UDP 连接，实现数据的发送和接收。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线程与线程之间的通信<ul>\n<li>共享变量<ul>\n<li>由于同一进程中的线程共享进程的地址空间，所以线程之间可以通过共享变量来进行通信。例如，在一个多线程的计数器程序中，多个线程可以访问和修改同一个计数器变量。但是，需要注意线程安全问题，因为多个线程同时访问和修改共享变量可能会导致数据不一致。可以使用同步机制（如互斥锁）来确保只有一个线程能够访问共享变量的临界区。</li>\n</ul>\n</li>\n<li>消息传递（通过线程安全的队列等）<ul>\n<li>线程之间也可以通过消息传递的方式进行通信。例如，通过一个线程安全的队列（如 Java 中的<code>BlockingQueue</code>），一个线程可以将消息放入队列，另一个线程从队列中取出消息进行处理。这种方式可以有效地避免共享变量带来的线程安全问题，并且可以实现线程之间的异步通信。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程与线程之间的通信（本质上是进程间通信）<ul>\n<li>因为线程是在进程内部运行的，所以进程与线程之间的通信通常可以归结为进程之间的通信方式。例如，如果一个进程中的线程需要与另一个进程中的线程进行通信，可以通过进程间通信的方法（如管道、消息队列等）来实现。不过，在实际操作中，需要考虑到进程和线程的不同特点，以及通信的效率和安全性等因素。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><ol>\n<li><p>死锁的定义和产生原因</p>\n<ul>\n<li><strong>定义</strong>：死锁是指在多线程或多进程环境下，两个或多个执行单元（线程或进程）在等待对方释放资源，导致所有相关执行单元都无法继续执行的一种僵持状态。简单来说，就像是两个人互相等待对方手中的东西，结果谁也无法前进。</li>\n<li>产生原因：<ul>\n<li><strong>互斥条件</strong>：资源在同一时刻只能被一个执行单元（线程或进程）使用。例如，一个打印机在某一时刻只能被一个进程用于打印任务。</li>\n<li><strong>请求和保持条件</strong>：执行单元已经持有了至少一个资源，并且又请求新的资源，而且在等待新资源的同时不会释放已经持有的资源。比如，一个进程已经占用了打印机，又请求使用扫描仪，在没有得到扫描仪之前不会释放打印机。</li>\n<li><strong>不可剥夺条件</strong>：资源只能由持有资源的执行单元自己释放，其他执行单元不能强行剥夺。例如，一个线程获得了某个锁，在它自己没有解锁之前，其他线程不能强制获取这个锁。</li>\n<li><strong>循环等待条件</strong>：存在一组执行单元，每个执行单元都在等待下一个执行单元所占有的资源。例如，有进程 P1、P2 和资源 R1、R2，P1 等待 P2 释放 R2，P2 等待 P1 释放 R1，这样就形成了一个循环等待链。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>死锁的示例场景（以进程为例）</p>\n<ul>\n<li>假设有两个进程 P1 和 P2，以及两个资源 R1 和 R2（如打印机和扫描仪）。</li>\n<li>P1 首先请求并获得了 R1（打印机），然后它请求 R2（扫描仪）。</li>\n<li>与此同时，P2 请求并获得了 R2（扫描仪），然后它请求 R1（打印机）。</li>\n<li>此时，P1 在等待 P2 释放 R2，P2 在等待 P1 释放 R1，就形成了死锁状态，两个进程都无法继续执行它们所期望的任务。</li>\n</ul>\n</li>\n<li><p>死锁的解决方法</p>\n<ul>\n<li><p>预防死锁</p>\n<ul>\n<li><p><strong>破坏互斥条件（较难实现）</strong>：这个方法在实际中很难操作，因为很多资源本身的性质决定了它们在同一时刻只能被一个执行单元使用，比如打印机、键盘等独占性设备。不过，在某些情况下，可以通过虚拟技术来模拟共享资源。例如，使用假脱机打印技术，将打印机的输出任务先存储在磁盘缓冲区，多个进程可以同时 “使用” 这个缓冲区，而真正的打印机可以按照顺序处理缓冲区中的任务，从而在一定程度上打破互斥条件。</p>\n</li>\n<li><p>破坏请求和保持条件：</p>\n<ul>\n<li><strong>资源预分配策略</strong>：要求进程在开始执行之前一次性申请它所需要的所有资源。如果系统无法满足全部资源请求，就不分配任何资源给该进程，让它等待。这样可以避免进程在持有部分资源的情况下又请求其他资源而导致死锁。例如，一个数据库应用程序，进程在开始查询和更新数据之前，就申请好数据库连接、缓存空间等所有可能需要的资源。</li>\n<li><strong>缺点</strong>：这种方法可能会导致资源利用率较低，因为进程可能会在一段时间内占用一些它暂时不需要使用的资源，而且有些资源的需求可能很难在进程开始时就准确预估。</li>\n</ul>\n</li>\n<li><p>破坏不可剥夺条件：</p>\n<ul>\n<li><strong>允许资源剥夺</strong>：当一个执行单元请求的资源无法立即获得时，可以剥夺它已经持有的资源。例如，在操作系统中，对于一些优先级较低的进程所占用的资源，如果有高优先级的进程需要，可以将低优先级进程的资源剥夺，分配给高优先级进程。不过，这种方法实现起来比较复杂，需要考虑资源的恢复和执行单元状态的保存等问题。</li>\n</ul>\n</li>\n<li><p>破坏循环等待条件：</p>\n<ul>\n<li><strong>资源有序分配策略</strong>：对系统中的所有资源进行编号，要求每个执行单元按照资源编号递增（或递减）的顺序请求资源。例如，如果有资源 R1（编号为 1）、R2（编号为 2）、R3（编号为 3），进程必须先请求 R1，然后才能请求 R2，最后才能请求 R3。这样可以避免出现循环等待的情况。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p><strong>缺点</strong>：这种方法可能会限制资源的使用灵活性，而且在资源编号和请求顺序的管理上需要一定的开销。</p>\n<ul>\n<li><p>避免死锁（银行家算法）</p>\n<ul>\n<li><p><strong>基本原理</strong>：银行家算法是一种经典的死锁避免算法，它的主要思想是在进程请求资源时，系统会预先判断这次分配是否会导致系统进入死锁状态。如果不会导致死锁，就进行资源分配；如果可能导致死锁，就拒绝分配。</p>\n</li>\n<li><p>实现步骤：</p>\n<ul>\n<li><strong>系统状态记录</strong>：系统维护一些信息，包括每个进程已经拥有的资源数量、每个进程还需要的资源数量、系统中可用的资源数量等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>安全性检查</strong>：当一个进程请求资源时，系统会检查如果把资源分配给这个进程后，是否还能找到一个安全序列。安全序列是指系统能够按照某种顺序为每个进程分配足够的资源，使得每个进程都能最终完成并释放其所有资源。如果存在这样的安全序列，那么系统就认为当前状态是安全的，可以进行资源分配；否则，就拒绝分配资源。</p>\n</li>\n<li><p>检测死锁</p>\n<ul>\n<li><strong>资源分配图（Resource - Allocation Graph）</strong>：通过构建资源分配图来检测死锁。资源分配图是一种有向图，其中节点包括进程节点和资源节点，边表示进程对资源的请求或者资源的分配情况。如果在资源分配图中出现了环，并且每个环中的资源都只有一个实例，那么就表示出现了死锁。如果环中的资源有多个实例，还需要进一步分析才能确定是否死锁。</li>\n<li><strong>定期检查机制</strong>：系统可以定期（例如每隔一段时间或者在特定的事件发生后）运行死锁检测算法，通过检查资源分配图或者其他系统状态信息来判断是否出现了死锁。</li>\n</ul>\n</li>\n<li><p>解除死锁</p>\n<ul>\n<li><strong>资源剥夺法</strong>：剥夺死锁进程所占用的资源，将这些资源分配给其他进程，以打破死锁状态。这可能需要回滚被剥夺资源的进程的部分操作，并且在合适的时候恢复这些操作。例如，在数据库系统中，当出现死锁时，可以强制回滚一个事务（进程），释放它所占用的数据库锁，让其他事务能够继续执行。</li>\n<li><strong>撤销进程法</strong>：直接撤销部分或全部死锁进程，以解除死锁。撤销进程时，需要考虑进程的优先级、已经执行的工作量等因素。例如，优先撤销优先级较低或者刚刚开始执行的进程，尽量减少对系统整体性能的影响。<ul>\n<li><strong>进程回退法</strong>：让一个或多个死锁进程回退到足以打破死锁的地步，例如，让一个进程释放它之前请求的某个资源，使得其他进程能够继续执行。这种方法需要系统能够记录每个进程的执行历史和资源请求顺序，以便准确地进行回退操作。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Http1-0-Http1-1-Https\"><a href=\"#Http1-0-Http1-1-Https\" class=\"headerlink\" title=\"Http1.0 &#x2F; Http1.1 &#x2F; Https\"></a>Http1.0 &#x2F; Http1.1 &#x2F; Https</h2><ol>\n<li><p>HTTP0.9</p>\n<ul>\n<li>发布于 1991 年</li>\n<li><strong>只支持 GET 请求方法获取文本数据</strong>，当时主要是为了获取 HTML 页面内容</li>\n</ul>\n</li>\n<li><p>HTTP1.0</p>\n<ul>\n<li><p>发布于 1996 年</p>\n</li>\n<li><p><strong>支持 POST、HEAD 等请求方法</strong>，<strong>支持请求头，响应头等，支持更多种数据类型</strong>，不再局限于文本数据</p>\n</li>\n<li><p>但是<strong>浏览器的每次请求都需要与服务器建立一个 TCP 链接</strong>，<strong>请求处理完成之后立即断开连接</strong>，每次建立连接增加了性能损耗</p>\n</li>\n<li><p>基本特性</p>\n<ul>\n<li><strong>简单的请求 - 响应模式</strong>：HTTP1.0 采用了基本的请求 - 响应通信模式。客户端发送一个请求到服务器，服务器处理请求后返回一个响应。例如，当浏览器请求一个网页时，会发送一个包含请求方法（如 GET）、请求的资源路径（如 &#x2F;index.html）等信息的请求报文，服务器根据请求内容查找资源并返回包含 HTML 文档的响应报文。</li>\n<li><strong>有限的连接复用能力</strong>：在 HTTP1.0 中，每个请求 - 响应过程通常需要建立一个新的 TCP 连接。这意味着如果一个网页包含多个资源（如多个图片、CSS 文件、JavaScript 文件），浏览器需要为每个资源建立单独的 TCP 连接，效率较低。例如，一个网页有 10 个图片，就可能需要建立 10 个 TCP 连接来获取这些图片。</li>\n<li><strong>无状态协议</strong>：HTTP1.0 是无状态的，服务器不会在多个请求之间记住客户端的状态。每次请求都是独立的，服务器不会知道之前是否处理过来自这个客户端的请求。这在一些需要用户登录状态等场景下，就需要通过额外的机制（如使用 Cookie）来维护状态。</li>\n</ul>\n</li>\n<li><p>内容协商机制</p>\n<ul>\n<li>HTTP1.0 支持简单的内容协商，通过请求头中的<code>Accept</code>字段，客户端可以告知服务器它所能接受的内容类型（如<code>text/html</code>、<code>application/json</code>等）。服务器根据客户端的请求和自身的资源情况，返回符合客户端要求的内容。例如，客户端在<code>Accept</code>头中指定<code>application/json</code>，服务器如果有对应的 JSON 格式的资源，就会返回 JSON 数据，否则可能返回错误信息。</li>\n</ul>\n</li>\n<li><p>缓存机制</p>\n<ul>\n<li>HTTP1.0 引入了基本的缓存机制，主要通过响应头中的<code>Expires</code>字段来实现。<code>Expires</code>字段指定了资源过期的时间，客户端（如浏览器）可以根据这个时间来判断是否需要重新请求资源。例如，如果<code>Expires</code>字段的值是未来的某个时间点，浏览器在这个时间之前访问相同资源时，可以直接使用本地缓存，而无需向服务器发送请求。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTP1.1</p>\n<ul>\n<li>发布于 1997 年</li>\n<li><strong>增加了 PUT、DELETE 等请求方法</strong> </li>\n<li>**采用持久连接（Connect: keep-alive），多个请求可以公用同一个 TCP 连接 ** </li>\n<li>改进的连接复用特性<ul>\n<li><strong>持久连接（Keep - Alive）</strong>：HTTP1.1 最重要的改进之一是引入了持久连接。这允许在一个 TCP 连接上进行多个请求 - 响应的交互，减少了频繁建立和断开连接的开销。例如，对于一个包含多个图片的网页，浏览器可以通过一个 TCP 连接依次请求这些图片，提高了性能。通过在请求头中添加<code>Connection: Keep - Alive</code>字段，客户端可以请求服务器保持连接打开，服务器在响应头中也可以通过相同的字段来确认是否同意保持连接。</li>\n<li><strong>管道化（Pipelining）</strong>：HTTP1.1 还支持管道化操作，客户端可以连续发送多个请求而无需等待每个请求的响应，服务器会按照收到请求的顺序依次返回响应。不过，管道化在实际应用中存在一些问题，如对头阻塞（Head - of - Line Blocking）的情况，当一个请求的响应延迟时，会影响后续请求的响应处理。</li>\n</ul>\n</li>\n<li>增强的缓存机制<ul>\n<li><strong>Cache - Control 头</strong>：HTTP1.1 引入了<code>Cache - Control</code>头，它提供了更灵活和强大的缓存控制功能。与 HTTP1.0 的<code>Expires</code>相比，<code>Cache - Control</code>可以通过多个指令（如<code>max - age</code>、<code>no - cache</code>、<code>private</code>等）来精确控制缓存行为。例如，<code>Cache - Control: max - age = 3600</code>表示资源在 3600 秒内可以使用缓存，无需重新请求。</li>\n<li><strong>有条件的请求（Conditional Requests）</strong>：通过<code>If - Modified - Since</code>和<code>If - None - Match</code>等请求头，客户端可以有条件地向服务器请求资源。例如，客户端可以发送带有<code>If - Modified - Since</code>头的请求，告知服务器只有在资源自指定时间之后被修改过才返回新的资源，否则返回 304 Not Modified 状态码，表示可以使用缓存资源，这种机制进一步提高了缓存效率。</li>\n</ul>\n</li>\n<li>新增的状态码和请求方法<ul>\n<li><strong>新增状态码</strong>：HTTP1.1 新增了一些状态码来更好地处理各种网络情况。例如，100 Continue 状态码，当客户端发送一个可能包含大量数据的请求（如 POST 请求带有大量数据）时，它可以先发送请求头部分，服务器返回 100 Continue 表示可以继续发送请求体，这对于处理大数据量的请求很有帮助。</li>\n<li><strong>新增请求方法</strong>：新增了一些请求方法，如 PUT 和 DELETE。PUT 方法用于将数据上传到指定的资源位置并替换原有内容，DELETE 方法用于删除指定的资源。这些方法使得 HTTP 协议在资源操作上更加灵活。</li>\n</ul>\n</li>\n<li>带宽优化机制<ul>\n<li><strong>字节范围请求（Byte - Ranges）</strong>：HTTP1.1 支持字节范围请求，客户端可以通过<code>Range</code>请求头指定请求资源的字节范围。例如，当下载一个大文件时，如果下载中断，客户端可以使用字节范围请求来续传文件，只请求还未下载的部分，而不是重新下载整个文件，提高了带宽的利用率。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTP2.0</p>\n<ul>\n<li>二进制分帧层（Binary Framing Layer）<ul>\n<li><strong>帧格式</strong>：HTTP2.0 在应用层和传输层之间引入了二进制分帧层。数据被分割成更小的单位，称为帧（Frame）。帧有多种类型，如 HEADERS 帧用于传输头部信息，DATA 帧用于传输实际的数据内容。每个帧都有自己的帧头，包含帧的长度、类型、流标识符等信息。这种二进制格式使得协议解析更加高效，计算机能够更快速地处理二进制数据，相比于 HTTP1.x 的文本格式，减少了解析的复杂性和开销。</li>\n<li><strong>多路复用（Multiplexing）</strong>：通过二进制分帧，HTTP2.0 实现了真正的多路复用。在一个 TCP 连接上可以同时发送和接收多个请求和响应的帧，这些请求和响应的帧相互独立，不会像 HTTP1.1 的管道化那样出现头阻塞（Head - of - Line Blocking）问题。例如，浏览器可以同时发送多个资源的请求（如多个图片、CSS 和 JavaScript 文件），服务器可以根据资源的准备情况，以任意顺序返回这些资源的响应帧，大大提高了网络资源的利用效率。</li>\n</ul>\n</li>\n<li>头部压缩（Header Compression）<ul>\n<li><strong>HPACK 算法</strong>：HTTP2.0 使用 HPACK 算法对 HTTP 头部进行压缩。在 HTTP 通信中，头部信息（如请求头和响应头）往往包含了许多重复的字段，如用户代理（User - Agent）、Cookie 等。HPACK 算法会对这些头部信息进行分析和压缩，通过建立静态和动态的头部表，对重复出现的头部字段进行索引和替换，从而减少头部数据的传输量。例如，在一个网页的多次请求中，用户代理信息通常是不变的，使用 HPACK 算法可以避免每次都传输完整的用户代理字符串，有效节省了带宽。</li>\n</ul>\n</li>\n<li>服务器推送（Server Push）<ul>\n<li><strong>推送机制</strong>：HTTP2.0 的服务器推送是一个重要的特性。服务器可以在客户端没有明确请求的情况下，主动向客户端推送相关的资源。例如，当浏览器请求一个 HTML 网页时，服务器可以根据对网页内容的了解，预先推送网页可能会用到的 CSS 文件、JavaScript 文件或图片等资源。这样可以减少客户端等待资源请求的时间，进一步提高网页的加载速度。服务器推送是通过 PUSH_PROMISE 帧来实现的，服务器在发送响应之前，可以先发送 PUSH_PROMISE 帧告知客户端即将推送的资源。</li>\n</ul>\n</li>\n<li>流量控制（Flow Control）<ul>\n<li><strong>基于窗口的流量控制</strong>：HTTP2.0 引入了流量控制机制，以确保发送端不会因为发送过多的数据而淹没接收端。它采用基于窗口的流量控制方式，每个接收端都有一个接收窗口，发送端在发送数据时需要考虑接收窗口的大小。例如，如果接收端的接收窗口已满，发送端就会暂停发送数据，直到接收窗口有足够的空间。这种流量控制机制可以避免网络拥塞，保证数据传输的平稳性。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTTPS</p>\n<ul>\n<li>基本概念和加密原理<ul>\n<li><strong>SSL&#x2F;TLS 协议</strong>：HTTPS（Hypertext Transfer Protocol Secure）是在 HTTP 协议基础上加入 SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）协议，用于提供安全的通信通道。SSL 和 TLS 协议的功能相似，TLS 是 SSL 的继任者。这些协议通过加密和身份验证机制来保护数据传输的安全。在通信开始时，客户端和服务器会进行握手（Handshake）过程，协商加密算法和密钥。</li>\n<li><strong>非对称加密和对称加密结合</strong>：在握手过程中，首先使用非对称加密（如 RSA 算法）进行密钥交换。服务器会向客户端发送包含公钥的证书，客户端使用这个公钥来加密一个随机生成的对称密钥，然后将加密后的对称密钥发送回服务器。之后，双方就使用这个对称密钥进行数据的加密和解密。对称加密（如 AES 算法）用于后续的数据传输，因为对称加密在性能上比非对称加密更高效，这样的结合方式既保证了密钥交换的安全性，又兼顾了数据加密的效率。</li>\n</ul>\n</li>\n<li>数字证书（Digital Certificates）<ul>\n<li><strong>证书颁发机构（CA）</strong>：数字证书是 HTTPS 的关键组成部分。证书是由受信任的第三方机构，即证书颁发机构（CA）颁发的。这些 CA 机构会对服务器的身份进行验证，验证通过后会颁发包含服务器公钥、服务器信息（如域名等）以及 CA 签名的证书。客户端在与服务器建立连接时，会验证证书的有效性，包括检查证书是否过期、证书的签名是否由受信任的 CA 机构颁发等。如果证书验证不通过，客户端会发出警告，提示可能存在安全风险。</li>\n</ul>\n</li>\n<li>安全优势<ul>\n<li><strong>数据保密性</strong>：通过加密机制，HTTPS 可以确保在网络传输过程中的数据不被窃取。即使数据被中间人拦截，由于数据是加密的，中间人也无法获取其中的内容。例如，用户在网上银行进行交易时，账号、密码等敏感信息通过 HTTPS 加密传输，保障了用户的隐私和资金安全。</li>\n<li><strong>数据完整性</strong>：HTTPS 还可以防止数据在传输过程中被篡改。通过消息认证码（MAC）等技术，接收方可以验证收到的数据是否与发送方发送的数据一致。如果数据被篡改，接收方可以检测到并拒绝接收，从而保证了数据的完整性。</li>\n<li><strong>身份验证</strong>：数字证书提供了服务器的身份验证功能。客户端可以确认与之通信的服务器确实是声称的服务器，而不是假冒的服务器。这对于防止钓鱼网站等安全威胁非常重要，例如，用户访问银行网站时，通过验证证书可以确认是真正的银行服务器，而不是恶意攻击者伪装的网站。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>请求方式 RFC</p>\n<ul>\n<li>GET，请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据</li>\n<li>HEAD：请求一个于 GET 请求的响应相同的响应，但没有响应体<ul>\n<li>比如在准备下载一个文件前，先获取文件的大小，在决定是否进行下载</li>\n</ul>\n</li>\n<li>POST：用于将实体提交到指定的资源</li>\n<li>PUT：请求有效载荷（payload）替换目标资源的所有当前表示</li>\n<li>DELETE：删除指定的资源</li>\n<li>PATCH：用于对资源部分修改</li>\n<li>CONNECT：建立一个到目标资源标识的服务器的隧道，通常用在代理服务器，网页开发很少用到</li>\n<li>TRACE：沿着到目标资源的路径执行的一个消息回环测试</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"响应状态码\"><a href=\"#响应状态码\" class=\"headerlink\" title=\"响应状态码\"></a>响应状态码</h2><p>HTTP 响应状态码用来表明特定 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP\">HTTP</a> 请求是否成功完成。 响应被归为以下五大类：</p>\n<ol>\n<li>信息响应 (<code>100</code>–<code>199</code>)</li>\n<li>成功响应 (<code>200</code>–<code>299</code>)</li>\n<li>重定向消息 (<code>300</code>–<code>399</code>)</li>\n<li>客户端错误响应 (<code>400</code>–<code>499</code>)</li>\n<li>服务端错误响应 (<code>500</code>–<code>599</code>)</li>\n</ol>\n<p>以下状态码由 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#section-10\">section 10 of RFC 2616</a>定义。你可以在<a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-6\">RFC 7231</a>中找到更新后的规范。</p>\n<p><strong>备注：</strong>如果你收到的响应不在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#%E4%BF%A1%E6%81%AF%E5%93%8D%E5%BA%94\">此列表</a> 中，则它为非标准响应，可能是服务器软件的自定义响应。</p>\n<h3 id=\"信息响应\"><a href=\"#信息响应\" class=\"headerlink\" title=\"信息响应\"></a>信息响应</h3><ul>\n<li><p><code>100 Continue</code> </p>\n<p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p>\n</li>\n<li><p><code>101 Switching Protocols </code> </p>\n<p>该代码是响应客户端的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade\"><code>Upgrade</code></a> 请求头发送的，指明服务器即将切换的协议。</p>\n</li>\n<li><p><code>102 Processing</code> </p>\n<p>此代码表示服务器已收到并正在处理该请求，但当前没有响应可用。</p>\n</li>\n<li><p><code>103 Early Hints</code> </p>\n<p>此状态代码主要用于与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link\"><code>Link</code></a> 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload\">preloading</a> 资源。</p>\n</li>\n</ul>\n<h3 id=\"成功响应\"><a href=\"#成功响应\" class=\"headerlink\" title=\"成功响应\"></a>成功响应</h3><ul>\n<li><p><code>200 OK</code> </p>\n<p>请求成功。成功的含义取决于 HTTP 方法：<code>GET</code>: 资源已被提取并在消息正文中传输。<code>HEAD</code>: 实体标头位于消息正文中。<code>PUT</code> or <code>POST</code>: 描述动作结果的资源在消息体中传输。<code>TRACE</code>: 消息正文包含服务器收到的请求消息。</p>\n</li>\n<li><p><code>201 Created</code> </p>\n<p>该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。</p>\n</li>\n<li><p><code>202 Accepted</code> </p>\n<p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p>\n</li>\n<li><p><code>203 Non-Authoritative Information</code> </p>\n<p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回<code>200 OK</code>的情况下才是合适的。</p>\n</li>\n<li><p><code>204 No Content</code> </p>\n<p>对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。</p>\n</li>\n<li><p><code>205 Reset Content</code> </p>\n<p>告诉用户代理重置发送此请求的文档。</p>\n</li>\n<li><p><code>206 Partial Content</code> </p>\n<p>当从客户端发送<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\"><code>Range</code></a>范围标头以只请求资源的一部分时，将使用此响应代码。</p>\n</li>\n<li><p><code>207 Multi-Status</code> </p>\n<p>对于多个状态代码都可能合适的情况，传输有关多个资源的信息。</p>\n</li>\n<li><p><code>208 Already Reported</code> </p>\n<p>在 DAV 里面使用 &#96;&#96; 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</p>\n</li>\n<li><p><code>226 IM Used</code> </p>\n<p>服务器已经完成了对资源的<code>GET</code>请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p>\n</li>\n</ul>\n<h3 id=\"重定向消息\"><a href=\"#重定向消息\" class=\"headerlink\" title=\"重定向消息\"></a>重定向消息</h3><ul>\n<li><p><code>300 Multiple Choice</code> </p>\n<p>请求拥有多个可能的响应。用户代理或者用户应当从中选择一个。（没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。）</p>\n</li>\n<li><p><code>301 Moved Permanently</code> </p>\n<p>请求资源的 URL 已永久更改。在响应中给出了新的 URL。</p>\n</li>\n<li><p><code>302 Found</code> </p>\n<p>此响应代码表示所请求资源的 URI 已 <em>暂时</em> 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。</p>\n</li>\n<li><p><code>303 See Other</code> </p>\n<p>服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源。</p>\n</li>\n<li><p><code>304 Not Modified</code> </p>\n<p>这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。</p>\n</li>\n<li><p><code>305 Use Proxy</code> 已弃用</p>\n<p>在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用。</p>\n</li>\n<li><p><code>306 unused</code> </p>\n<p>此响应代码不再使用；它只是保留。它曾在 HTTP&#x2F;1.1 规范的早期版本中使用过。</p>\n</li>\n<li><p><code>307 Temporary Redirect</code> </p>\n<p>服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 <code>302 Found</code> HTTP 响应代码具有相同的语义，但用户代理 <em>不能</em> 更改所使用的 HTTP 方法：如果在第一个请求中使用了 <code>POST</code>，则在第二个请求中必须使用 <code>POST</code></p>\n</li>\n<li><p><code>308 Permanent Redirect</code> </p>\n<p>这意味着资源现在永久位于由<code>Location:</code> HTTP Response 标头指定的另一个 URI。这与 <code>301 Moved Permanently</code> HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 <code>POST</code>，则必须在第二个请求中使用 <code>POST</code>。</p>\n</li>\n</ul>\n<h3 id=\"客户端错误响应\"><a href=\"#客户端错误响应\" class=\"headerlink\" title=\"客户端错误响应\"></a>客户端错误响应</h3><ul>\n<li><p><code>400 Bad Request</code> </p>\n<p>由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。</p>\n</li>\n<li><p><code>401 Unauthorized</code> </p>\n<p>虽然 HTTP 标准指定了”unauthorized”，但从语义上来说，这个响应意味着”unauthenticated”。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。</p>\n</li>\n<li><p><code>402 Payment Required</code> 实验性</p>\n<p>此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。</p>\n</li>\n<li><p><code>403 Forbidden</code> </p>\n<p>客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 <code>401 Unauthorized</code> 不同，服务器知道客户端的身份。</p>\n</li>\n<li><p><code>404 Not Found</code> </p>\n<p>服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 <code>403 Forbidden</code>，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。</p>\n</li>\n<li><p><code>405 Method Not Allowed</code> </p>\n<p>服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用<code>DELETE</code>来删除资源。</p>\n</li>\n<li><p><code>406 Not Acceptable</code> </p>\n<p>当 web 服务器在执行<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E6%9C%BA%E5%88%B6\">服务端驱动型内容协商机制</a>后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。</p>\n</li>\n<li><p><code>407 Proxy Authentication Required</code> </p>\n<p>类似于 <code>401 Unauthorized</code> 但是认证需要由代理完成。</p>\n</li>\n<li><p><code>408 Request Timeout</code> </p>\n<p>此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。</p>\n</li>\n<li><p><code>409 Conflict</code> </p>\n<p>当请求与服务器的当前状态冲突时，将发送此响应。</p>\n</li>\n<li><p><code>410 Gone</code> </p>\n<p>当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。</p>\n</li>\n<li><p><code>411 Length Required</code> </p>\n<p>服务端拒绝该请求因为 <code>Content-Length</code> 头部字段未定义但是服务端需要它。</p>\n</li>\n<li><p><code>412 Precondition Failed</code> </p>\n<p>客户端在其头文件中指出了服务器不满足的先决条件。</p>\n</li>\n<li><p><code>413 Payload Too Large</code> </p>\n<p>请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 <code>Retry-After</code>。</p>\n</li>\n<li><p><code>414 URI Too Long</code> </p>\n<p>客户端请求的 URI 比服务器愿意接收的长度长。</p>\n</li>\n<li><p><code>415 Unsupported Media Type</code> </p>\n<p>服务器不支持请求数据的媒体格式，因此服务器拒绝请求。</p>\n</li>\n<li><p><code>416 Range Not Satisfiable</code> </p>\n<p>无法满足请求中 <code>Range</code> 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。</p>\n</li>\n<li><p><code>417 Expectation Failed</code> </p>\n<p>此响应代码表示服务器无法满足 <code>Expect</code> 请求标头字段所指示的期望。</p>\n</li>\n<li><p><code>418 I&#39;m a teapot</code> </p>\n<p>服务端拒绝用茶壶煮咖啡。笑话，典故来源<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E5%92%96%E5%95%A1%E5%A3%B6%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">茶壶冲泡咖啡</a></p>\n</li>\n<li><p><code>421 Misdirected Request</code> </p>\n<p>请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。</p>\n</li>\n<li><p><code>422 Unprocessable Entity</code> </p>\n<p>请求格式正确，但由于语义错误而无法遵循。</p>\n</li>\n<li><p><code>423 Locked</code> </p>\n<p>正在访问的资源已锁定。</p>\n</li>\n<li><p><code>424 Failed Dependency</code> </p>\n<p>由于前一个请求失败，请求失败。</p>\n</li>\n<li><p><code>425 Too Early</code> 实验性</p>\n<p>表示服务器不愿意冒险处理可能被重播的请求。</p>\n</li>\n<li><p><code>426 Upgrade Required</code> </p>\n<p>服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade\"><code>Upgrade</code></a> 字段的 426 响应 来表明它所需的协议（们）。</p>\n</li>\n<li><p><code>428 Precondition Required</code> </p>\n<p>源服务器要求请求是有条件的。此响应旨在防止’丢失更新’问题，即当第三方修改服务器上的状态时，客户端 <code>GET</code> 获取资源的状态，对其进行修改并将其 <code>PUT</code> 放回服务器，从而导致冲突。</p>\n</li>\n<li><p><code>429 Too Many Requests</code> </p>\n<p>用户在给定的时间内发送了太多请求（”限制请求速率”）</p>\n</li>\n<li><p><code>431 Request Header Fields Too Large</code> </p>\n<p>服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。</p>\n</li>\n<li><p><code>451 Unavailable For Legal Reasons</code> </p>\n<p>用户代理请求了无法合法提供的资源，例如政府审查的网页。</p>\n</li>\n</ul>\n<h3 id=\"服务端错误响应\"><a href=\"#服务端错误响应\" class=\"headerlink\" title=\"服务端错误响应\"></a>服务端错误响应</h3><ul>\n<li><p><code>500 Internal Server Error</code> </p>\n<p>服务器遇到了不知道如何处理的情况。</p>\n</li>\n<li><p><code>501 Not Implemented</code> </p>\n<p>服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 <code>GET</code> and <code>HEAD</code>.</p>\n</li>\n<li><p><code>502 Bad Gateway</code> </p>\n<p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p>\n</li>\n<li><p><code>503 Service Unavailable</code> </p>\n<p>服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 <code>Retry-After</code> 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p>\n</li>\n<li><p><code>504 Gateway Timeout</code> </p>\n<p>当服务器充当网关且无法及时获得响应时，会给出此错误响应。</p>\n</li>\n<li><p><code>505 HTTP Version Not Supported</code> </p>\n<p>服务器不支持请求中使用的 HTTP 版本。</p>\n</li>\n<li><p><code>506 Variant Also Negotiates</code> </p>\n<p>服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点。</p>\n</li>\n<li><p><code>507 Insufficient Storage</code> </p>\n<p>无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。</p>\n</li>\n<li><p><code>508 Loop Detected</code> </p>\n<p>服务器在处理请求时检测到无限循环。</p>\n</li>\n<li><p><code>510 Not Extended</code> </p>\n<p>服务器需要对请求进行进一步扩展才能完成请求。</p>\n</li>\n<li><p><code>511 Network Authentication Required</code> </p>\n<p>指示客户端需要进行身份验证才能获得网络访问权限。</p>\n</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"/paw/2025/04/01/408/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\"></p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p><img src=\"/paw/2025/04/01/408/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\"></p>\n<h2 id=\"进程线程\"><a href=\"#进程线程\" class=\"headerlink\" title=\"进程线程\"></a>进程线程</h2><ol>\n<li>进程（Process）<ul>\n<li>基本概念<ul>\n<li>进程是计算机中正在运行的程序的实例，它是操作系统进行资源分配和调度的基本单位。每个进程都有自己独立的地址空间，包括代码段、数据段、堆栈段等。这意味着不同进程之间的内存是相互隔离的，一个进程无法直接访问另一个进程的内存空间。例如，当同时运行一个文本编辑器和一个浏览器时，它们就是两个独立的进程，各自拥有独立的内存区域来存储程序代码、用户数据等。</li>\n</ul>\n</li>\n<li>进程的状态<ul>\n<li><strong>就绪（Ready）状态</strong>：进程已经准备好运行，只要 CPU 资源可用，就可以立即执行。例如，在一个多任务操作系统中，有多个进程在等待 CPU 的分配，这些进程就处于就绪状态。</li>\n<li><strong>运行（Running）状态</strong>：进程正在 CPU 上执行指令。在单核 CPU 系统中，同一时刻只有一个进程处于运行状态；在多核 CPU 系统中，可以有多个进程同时处于运行状态，具体数量取决于 CPU 的核心数。</li>\n<li><strong>阻塞（Blocked）状态</strong>：进程由于等待某些事件的发生（如等待 I&#x2F;O 操作完成、等待获取某个锁等）而暂时无法继续执行。例如，一个进程正在等待从磁盘读取文件数据，在数据读取完成之前，它就处于阻塞状态。</li>\n</ul>\n</li>\n<li>进程的资源分配<ul>\n<li>操作系统会为每个进程分配一系列的资源，包括内存空间、文件描述符、CPU 时间片等。内存空间用于存储进程的代码和数据，文件描述符用于和外部文件进行交互，CPU 时间片则决定了进程能够在 CPU 上运行的时间长度。不同进程之间的资源分配是独立的，这有助于保证系统的稳定性和安全性，防止一个进程的错误操作影响到其他进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线程（Thread）<ul>\n<li>基本概念<ul>\n<li>线程是进程内部的一个执行单元，它是比进程更小的能够独立运行的基本单位。一个进程可以包含多个线程，这些线程共享进程的地址空间和大部分资源，如代码段、数据段、打开的文件和设备等。例如，在一个多线程的文本编辑器进程中，一个线程可能负责接收用户的输入，另一个线程负责在后台保存文件，它们共享进程的内存和文件资源。</li>\n</ul>\n</li>\n<li>线程的状态与进程类似<ul>\n<li>线程也有就绪、运行和阻塞等状态，并且其状态转换的原理和进程状态转换类似。不同的是，线程之间的切换相对进程切换来说开销更小，因为线程共享进程的大部分资源，不需要像进程切换那样重新加载内存映射等操作。</li>\n</ul>\n</li>\n<li>多线程的优势与挑战<ul>\n<li><strong>优势</strong>：多线程可以提高程序的执行效率，特别是在处理一些可以并发执行的任务时。例如，在一个网络服务器程序中，一个线程可以负责接收客户端的连接请求，另一个线程可以负责处理已经连接的客户端的数据请求，这样可以同时处理多个客户端的请求，提高服务器的并发处理能力。</li>\n<li><strong>挑战</strong>：由于多个线程共享进程的资源，可能会出现线程安全问题。例如，当多个线程同时访问和修改同一块共享数据时，可能会导致数据不一致的情况。需要使用同步机制（如互斥锁、信号量等）来确保线程安全。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程与进程之间的通信（IPC，Inter - Process Communication）<ul>\n<li>管道（Pipe）<ul>\n<li><strong>匿名管道（Anonymous Pipe）</strong>：主要用于具有亲缘关系（如父子进程）之间的通信。它是一个半双工的通信通道，即数据只能单向流动。例如，在一个父进程和子进程之间，父进程可以通过管道将数据发送给子进程，或者子进程将数据发送给父进程，但不能同时双向通信。匿名管道通过<code>pipe</code>系统调用创建，一端用于写入数据，另一端用于读取数据。</li>\n<li><strong>命名管道（Named Pipe）</strong>：可以用于无亲缘关系的进程之间的通信。它在文件系统中有一个对应的文件名，多个进程可以通过这个文件名来打开管道进行通信。命名管道是全双工的通信通道，数据可以双向流动。例如，两个不同的服务器程序可以通过命名管道交换数据，一个程序将处理后的结果发送给另一个程序进行进一步的处理。</li>\n</ul>\n</li>\n<li>消息队列（Message Queue）<ul>\n<li>消息队列是一个由操作系统维护的消息存储区域。进程可以向消息队列发送消息，也可以从消息队列接收消息。消息队列中的消息具有一定的格式，通常包括消息类型和消息内容。不同的进程可以通过消息队列的标识符来访问和操作消息队列。例如，在一个分布式系统中，不同的进程可以通过消息队列来传递任务请求和结果，实现任务的异步处理。</li>\n</ul>\n</li>\n<li>共享内存（Shared Memory）<ul>\n<li>共享内存是一种高效的进程间通信方式。它允许不同的进程访问同一块物理内存区域，通过在这块共享内存区域中读写数据来实现通信。为了确保数据的一致性和安全性，通常需要结合同步机制（如互斥锁）来使用。例如，在一个多进程的数据库系统中，多个进程可以通过共享内存来快速访问和修改数据库的缓存数据，提高系统的性能。</li>\n</ul>\n</li>\n<li>信号量（Semaphore）和互斥锁（Mutex）（间接用于通信）<ul>\n<li>信号量和互斥锁主要用于控制多个进程对共享资源的访问。信号量可以用于控制同时访问某个资源的进程数量，互斥锁用于确保在同一时刻只有一个进程可以访问某个临界资源。虽然它们本身不是直接用于通信的工具，但在进程间共享资源的过程中，可以通过对信号量和互斥锁的操作来协调进程之间的行为，实现间接的通信。例如，两个进程需要访问一个打印机设备，通过互斥锁可以确保在一个进程使用打印机时，另一个进程需要等待。</li>\n</ul>\n</li>\n<li>套接字（Socket）<ul>\n<li>套接字主要用于网络通信，也可以用于本地进程之间的通信。它提供了一种通用的通信端点，可以在不同的主机之间或者同一主机的不同进程之间建立通信连接。例如，在一个客户端 - 服务器架构的应用中，客户端进程和服务器进程可以通过套接字建立 TCP 或 UDP 连接，实现数据的发送和接收。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线程与线程之间的通信<ul>\n<li>共享变量<ul>\n<li>由于同一进程中的线程共享进程的地址空间，所以线程之间可以通过共享变量来进行通信。例如，在一个多线程的计数器程序中，多个线程可以访问和修改同一个计数器变量。但是，需要注意线程安全问题，因为多个线程同时访问和修改共享变量可能会导致数据不一致。可以使用同步机制（如互斥锁）来确保只有一个线程能够访问共享变量的临界区。</li>\n</ul>\n</li>\n<li>消息传递（通过线程安全的队列等）<ul>\n<li>线程之间也可以通过消息传递的方式进行通信。例如，通过一个线程安全的队列（如 Java 中的<code>BlockingQueue</code>），一个线程可以将消息放入队列，另一个线程从队列中取出消息进行处理。这种方式可以有效地避免共享变量带来的线程安全问题，并且可以实现线程之间的异步通信。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程与线程之间的通信（本质上是进程间通信）<ul>\n<li>因为线程是在进程内部运行的，所以进程与线程之间的通信通常可以归结为进程之间的通信方式。例如，如果一个进程中的线程需要与另一个进程中的线程进行通信，可以通过进程间通信的方法（如管道、消息队列等）来实现。不过，在实际操作中，需要考虑到进程和线程的不同特点，以及通信的效率和安全性等因素。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><ol>\n<li><p>死锁的定义和产生原因</p>\n<ul>\n<li><strong>定义</strong>：死锁是指在多线程或多进程环境下，两个或多个执行单元（线程或进程）在等待对方释放资源，导致所有相关执行单元都无法继续执行的一种僵持状态。简单来说，就像是两个人互相等待对方手中的东西，结果谁也无法前进。</li>\n<li>产生原因：<ul>\n<li><strong>互斥条件</strong>：资源在同一时刻只能被一个执行单元（线程或进程）使用。例如，一个打印机在某一时刻只能被一个进程用于打印任务。</li>\n<li><strong>请求和保持条件</strong>：执行单元已经持有了至少一个资源，并且又请求新的资源，而且在等待新资源的同时不会释放已经持有的资源。比如，一个进程已经占用了打印机，又请求使用扫描仪，在没有得到扫描仪之前不会释放打印机。</li>\n<li><strong>不可剥夺条件</strong>：资源只能由持有资源的执行单元自己释放，其他执行单元不能强行剥夺。例如，一个线程获得了某个锁，在它自己没有解锁之前，其他线程不能强制获取这个锁。</li>\n<li><strong>循环等待条件</strong>：存在一组执行单元，每个执行单元都在等待下一个执行单元所占有的资源。例如，有进程 P1、P2 和资源 R1、R2，P1 等待 P2 释放 R2，P2 等待 P1 释放 R1，这样就形成了一个循环等待链。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>死锁的示例场景（以进程为例）</p>\n<ul>\n<li>假设有两个进程 P1 和 P2，以及两个资源 R1 和 R2（如打印机和扫描仪）。</li>\n<li>P1 首先请求并获得了 R1（打印机），然后它请求 R2（扫描仪）。</li>\n<li>与此同时，P2 请求并获得了 R2（扫描仪），然后它请求 R1（打印机）。</li>\n<li>此时，P1 在等待 P2 释放 R2，P2 在等待 P1 释放 R1，就形成了死锁状态，两个进程都无法继续执行它们所期望的任务。</li>\n</ul>\n</li>\n<li><p>死锁的解决方法</p>\n<ul>\n<li><p>预防死锁</p>\n<ul>\n<li><p><strong>破坏互斥条件（较难实现）</strong>：这个方法在实际中很难操作，因为很多资源本身的性质决定了它们在同一时刻只能被一个执行单元使用，比如打印机、键盘等独占性设备。不过，在某些情况下，可以通过虚拟技术来模拟共享资源。例如，使用假脱机打印技术，将打印机的输出任务先存储在磁盘缓冲区，多个进程可以同时 “使用” 这个缓冲区，而真正的打印机可以按照顺序处理缓冲区中的任务，从而在一定程度上打破互斥条件。</p>\n</li>\n<li><p>破坏请求和保持条件：</p>\n<ul>\n<li><strong>资源预分配策略</strong>：要求进程在开始执行之前一次性申请它所需要的所有资源。如果系统无法满足全部资源请求，就不分配任何资源给该进程，让它等待。这样可以避免进程在持有部分资源的情况下又请求其他资源而导致死锁。例如，一个数据库应用程序，进程在开始查询和更新数据之前，就申请好数据库连接、缓存空间等所有可能需要的资源。</li>\n<li><strong>缺点</strong>：这种方法可能会导致资源利用率较低，因为进程可能会在一段时间内占用一些它暂时不需要使用的资源，而且有些资源的需求可能很难在进程开始时就准确预估。</li>\n</ul>\n</li>\n<li><p>破坏不可剥夺条件：</p>\n<ul>\n<li><strong>允许资源剥夺</strong>：当一个执行单元请求的资源无法立即获得时，可以剥夺它已经持有的资源。例如，在操作系统中，对于一些优先级较低的进程所占用的资源，如果有高优先级的进程需要，可以将低优先级进程的资源剥夺，分配给高优先级进程。不过，这种方法实现起来比较复杂，需要考虑资源的恢复和执行单元状态的保存等问题。</li>\n</ul>\n</li>\n<li><p>破坏循环等待条件：</p>\n<ul>\n<li><strong>资源有序分配策略</strong>：对系统中的所有资源进行编号，要求每个执行单元按照资源编号递增（或递减）的顺序请求资源。例如，如果有资源 R1（编号为 1）、R2（编号为 2）、R3（编号为 3），进程必须先请求 R1，然后才能请求 R2，最后才能请求 R3。这样可以避免出现循环等待的情况。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p><strong>缺点</strong>：这种方法可能会限制资源的使用灵活性，而且在资源编号和请求顺序的管理上需要一定的开销。</p>\n<ul>\n<li><p>避免死锁（银行家算法）</p>\n<ul>\n<li><p><strong>基本原理</strong>：银行家算法是一种经典的死锁避免算法，它的主要思想是在进程请求资源时，系统会预先判断这次分配是否会导致系统进入死锁状态。如果不会导致死锁，就进行资源分配；如果可能导致死锁，就拒绝分配。</p>\n</li>\n<li><p>实现步骤：</p>\n<ul>\n<li><strong>系统状态记录</strong>：系统维护一些信息，包括每个进程已经拥有的资源数量、每个进程还需要的资源数量、系统中可用的资源数量等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>安全性检查</strong>：当一个进程请求资源时，系统会检查如果把资源分配给这个进程后，是否还能找到一个安全序列。安全序列是指系统能够按照某种顺序为每个进程分配足够的资源，使得每个进程都能最终完成并释放其所有资源。如果存在这样的安全序列，那么系统就认为当前状态是安全的，可以进行资源分配；否则，就拒绝分配资源。</p>\n</li>\n<li><p>检测死锁</p>\n<ul>\n<li><strong>资源分配图（Resource - Allocation Graph）</strong>：通过构建资源分配图来检测死锁。资源分配图是一种有向图，其中节点包括进程节点和资源节点，边表示进程对资源的请求或者资源的分配情况。如果在资源分配图中出现了环，并且每个环中的资源都只有一个实例，那么就表示出现了死锁。如果环中的资源有多个实例，还需要进一步分析才能确定是否死锁。</li>\n<li><strong>定期检查机制</strong>：系统可以定期（例如每隔一段时间或者在特定的事件发生后）运行死锁检测算法，通过检查资源分配图或者其他系统状态信息来判断是否出现了死锁。</li>\n</ul>\n</li>\n<li><p>解除死锁</p>\n<ul>\n<li><strong>资源剥夺法</strong>：剥夺死锁进程所占用的资源，将这些资源分配给其他进程，以打破死锁状态。这可能需要回滚被剥夺资源的进程的部分操作，并且在合适的时候恢复这些操作。例如，在数据库系统中，当出现死锁时，可以强制回滚一个事务（进程），释放它所占用的数据库锁，让其他事务能够继续执行。</li>\n<li><strong>撤销进程法</strong>：直接撤销部分或全部死锁进程，以解除死锁。撤销进程时，需要考虑进程的优先级、已经执行的工作量等因素。例如，优先撤销优先级较低或者刚刚开始执行的进程，尽量减少对系统整体性能的影响。<ul>\n<li><strong>进程回退法</strong>：让一个或多个死锁进程回退到足以打破死锁的地步，例如，让一个进程释放它之前请求的某个资源，使得其他进程能够继续执行。这种方法需要系统能够记录每个进程的执行历史和资源请求顺序，以便准确地进行回退操作。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"CSS 高级","date":"2025-04-08T05:31:42.000Z","_content":"\n## CSS 优先级\n\n style 标签内的样式 > link 引入外部 css 的样式\n\n\n\npx、em、rem\n\nem 相对于父元素中设置的字体大小\n\nrem 相对于根标签（html）继承大小\n\nH5 移动端\n\nPostCSS\n\n## BFC\n\n块级格式化上下文（Block Formatting Context），它是浏览器在渲染的过程中用于组织块级元素的一个独立渲染区域\n\n触发 BFC 方式\n\n- float 的值不是 none。\n- position 的值不是 static 或者 relative。\n- display 的值是 inline-block、table-cell、flex、table-caption 或者inline-flex\n- overflow 的值不是 visible\n\n为了解决：\n\n1. 外边距合并\n2. 浮动元素的影响\n3. 文字环绕效果\n4. 防止外边距穿透\n\n## Flex、Grid\n\n\n\n## Canvas\n\n\n\n## Transform\n\n\n\n## Transition\n\n\n\n## Animation\n\n\n\n## KeyFrame\n\n\n\n## Position\n\n\n\n## 媒体查询 Media\n\n\n\n## Sass、Less、CSS\n\n\n","source":"_posts/css.md","raw":"---\ntitle: CSS 高级\ndate: 2025-04-08 13:31:42\ntags: [CSS, BFC]\ncategories: [编程]\n---\n\n## CSS 优先级\n\n style 标签内的样式 > link 引入外部 css 的样式\n\n\n\npx、em、rem\n\nem 相对于父元素中设置的字体大小\n\nrem 相对于根标签（html）继承大小\n\nH5 移动端\n\nPostCSS\n\n## BFC\n\n块级格式化上下文（Block Formatting Context），它是浏览器在渲染的过程中用于组织块级元素的一个独立渲染区域\n\n触发 BFC 方式\n\n- float 的值不是 none。\n- position 的值不是 static 或者 relative。\n- display 的值是 inline-block、table-cell、flex、table-caption 或者inline-flex\n- overflow 的值不是 visible\n\n为了解决：\n\n1. 外边距合并\n2. 浮动元素的影响\n3. 文字环绕效果\n4. 防止外边距穿透\n\n## Flex、Grid\n\n\n\n## Canvas\n\n\n\n## Transform\n\n\n\n## Transition\n\n\n\n## Animation\n\n\n\n## KeyFrame\n\n\n\n## Position\n\n\n\n## 媒体查询 Media\n\n\n\n## Sass、Less、CSS\n\n\n","slug":"css","published":1,"updated":"2025-09-03T15:25:24.456Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkff60006r44yfl7q7a0k","content":"<h2 id=\"CSS-优先级\"><a href=\"#CSS-优先级\" class=\"headerlink\" title=\"CSS 优先级\"></a>CSS 优先级</h2><p> style 标签内的样式 &gt; link 引入外部 css 的样式</p>\n<p>px、em、rem</p>\n<p>em 相对于父元素中设置的字体大小</p>\n<p>rem 相对于根标签（html）继承大小</p>\n<p>H5 移动端</p>\n<p>PostCSS</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>块级格式化上下文（Block Formatting Context），它是浏览器在渲染的过程中用于组织块级元素的一个独立渲染区域</p>\n<p>触发 BFC 方式</p>\n<ul>\n<li>float 的值不是 none。</li>\n<li>position 的值不是 static 或者 relative。</li>\n<li>display 的值是 inline-block、table-cell、flex、table-caption 或者inline-flex</li>\n<li>overflow 的值不是 visible</li>\n</ul>\n<p>为了解决：</p>\n<ol>\n<li>外边距合并</li>\n<li>浮动元素的影响</li>\n<li>文字环绕效果</li>\n<li>防止外边距穿透</li>\n</ol>\n<h2 id=\"Flex、Grid\"><a href=\"#Flex、Grid\" class=\"headerlink\" title=\"Flex、Grid\"></a>Flex、Grid</h2><h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><h2 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h2><h2 id=\"KeyFrame\"><a href=\"#KeyFrame\" class=\"headerlink\" title=\"KeyFrame\"></a>KeyFrame</h2><h2 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h2><h2 id=\"媒体查询-Media\"><a href=\"#媒体查询-Media\" class=\"headerlink\" title=\"媒体查询 Media\"></a>媒体查询 Media</h2><h2 id=\"Sass、Less、CSS\"><a href=\"#Sass、Less、CSS\" class=\"headerlink\" title=\"Sass、Less、CSS\"></a>Sass、Less、CSS</h2>","excerpt":"","more":"<h2 id=\"CSS-优先级\"><a href=\"#CSS-优先级\" class=\"headerlink\" title=\"CSS 优先级\"></a>CSS 优先级</h2><p> style 标签内的样式 &gt; link 引入外部 css 的样式</p>\n<p>px、em、rem</p>\n<p>em 相对于父元素中设置的字体大小</p>\n<p>rem 相对于根标签（html）继承大小</p>\n<p>H5 移动端</p>\n<p>PostCSS</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>块级格式化上下文（Block Formatting Context），它是浏览器在渲染的过程中用于组织块级元素的一个独立渲染区域</p>\n<p>触发 BFC 方式</p>\n<ul>\n<li>float 的值不是 none。</li>\n<li>position 的值不是 static 或者 relative。</li>\n<li>display 的值是 inline-block、table-cell、flex、table-caption 或者inline-flex</li>\n<li>overflow 的值不是 visible</li>\n</ul>\n<p>为了解决：</p>\n<ol>\n<li>外边距合并</li>\n<li>浮动元素的影响</li>\n<li>文字环绕效果</li>\n<li>防止外边距穿透</li>\n</ol>\n<h2 id=\"Flex、Grid\"><a href=\"#Flex、Grid\" class=\"headerlink\" title=\"Flex、Grid\"></a>Flex、Grid</h2><h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><h2 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h2><h2 id=\"KeyFrame\"><a href=\"#KeyFrame\" class=\"headerlink\" title=\"KeyFrame\"></a>KeyFrame</h2><h2 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h2><h2 id=\"媒体查询-Media\"><a href=\"#媒体查询-Media\" class=\"headerlink\" title=\"媒体查询 Media\"></a>媒体查询 Media</h2><h2 id=\"Sass、Less、CSS\"><a href=\"#Sass、Less、CSS\" class=\"headerlink\" title=\"Sass、Less、CSS\"></a>Sass、Less、CSS</h2>"},{"title":"JS 高级内容","date":"2025-04-04T11:31:42.000Z","_content":"\n## 基础\n\n基本数据类型：number、string、undefined、null、boolean、symbol\n\n引用数据类型：Array、Object、Function、Date、Regex\n\n\n\n## 块级作用域\n\nlet 和 const\n\n- 全局定义的变量不再作为属性添加到全局对象中\n- 在变量定义之前使用它会报错\n- 不可重复定义同名变量\n- 使用 const 定义变量时，必须初始化\n- 变量具有会计作用域，在代码块之外不可以使用\n  - 在 for 循环中使用 let 定义变量，变量所在的作用域是循环体，也因此在循环外不能使用。\n  - 另外 for 循环会对该变量做特殊处理，让每次循环使用的都是一个独立的循环变量，这可以解决 JS 由来已久的问题\n\n\n\n## class 和 function ：\n\n**相同点：**\n\n1.  class 和 function 都可以作为构造函数，通过 new 操作符来实例化。 \n2.  类可以包含构造函数方法、实例方法、setter 函数、getter 函数和静态类方法，但这些 **都不是** 必须的。 \n\n**不同点：**\n\n1. class 构造函数必须使用 new 操作符\n\n2. class 声明不可以提升\n\n   ```js\n   // file 1\n   const person1 = new Person('person1')\n   console.log(person1) // Person { name: 'person1' }\n   \n   function Person(name) {\n     this.name = name\n   }\n   \n   // file 2\n   const person2 = new Person('person2') // ReferenceError: Cannot access 'Person' before initialization\n   \n   class Person {\n     constructor(name) {\n       this.name = name\n     }\n   }\n   ```\n\n3. class 不可以用 call、apply、bind 改变执行上下文\n\n\n\n**node 事件循环和浏览器事件循环区别** \n\n**组合式 和 声明式 api 他们之间冲突，会优先使用哪个？** \n\n如何将响应式数据变为非响应式\n\n\n\n## 单例模式\n\n```js\nfunction signle() {\n  let obj\n\n  function _signle(o) {\n    if (obj) {\n      return obj\n    }\n    obj = o\n    return obj\n  }\n\n  return _signle\n}\n\nlet obj = { name: 'lili', age: 18 }\nlet signleObj = signle()\nlet a = signleObj(obj)\nlet b = signleObj(obj)\n\nconsole.log(a == b) // true\nconsole.log('a: ', a) // a:  { name: 'lili', age: 18 }\nconsole.log('b: ', b) // b:  { name: 'lili', age: 18 }\n```\n\n\n\n## 手写 call、apply、bind\n\n- `call` 是一个一个地传递参数\n- `apply` 是通过数组来传递参数\n- `bind` 方法在创建新函数时可以预先传递部分参数，后续调用新函数时再传递剩余参数。\n\n```js\nlet obj = { name: 'lili', fn: () => 'hello' }\n\ntest.call(obj, 2, 3, 4) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\ntest.apply(obj, [2, 3, 4]) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\nconst bindTest = test.bind(obj, 2)\nbindTest(3, 4) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\n```\n\n\n\n**test 函数 ** \n\n```js\nfunction test(...args) {\n  console.log(this, args)\n}\n```\n\n\n\n**手写 call** \n\n```js\nFunction.prototype.myCall = function (obj, ...args) {\n  obj = obj == null || obj == undefined? globalThis : Object(obj)\n\n  let key = Symbol('key')\n  \n  obj[key] = this\n  const result = obj[key](...args)\n  \n  delete obj[key]\n\n  return result\n}\n\nfunction test(...args) {\n  console.log(this, args)\n}\n\nlet obj = { name: 'lili', fn: () => 'hello' }\ntest.call(obj, 1, 2, 3) // { name: 'lili', fn: [Function: fn] } [ 1, 2, 3 ]\ntest.myCall(obj, 1, 2, 3) // { name: 'lili', fn: [Function: fn], [Symbol(key)]: [Function: test] } [ 1, 2, 3 ]\n```\n\n**手写 bind 函数** \n\n```js\n\nlet obj = { name: 'lili', fn: () => 'hello' }\n\n\nFunction.prototype.myBind = function (obj, ...args) {\n  let that = this\n  \n  return function (...rest) {\n    const key = Symbol('fn')\n    obj[key] = that\n    // Object.defineProperty(obj, key, that)\n    let result\n    console.log(new.target)\n    if (new.target) { // 是否通过 new 关键字调用，当通过 new 调用时：[Function (anonymous)]， 当之间调用时：undefined\n      result = new obj[key](...args, ...rest)\n    } else {\n      result = obj[key](...args, ...rest)\n    }\n    delete obj[key]\n    return result\n  }\n}\n\nconst testBind = test.myBind(obj, 2, 3)\ntestBind(4, 5) // { name: 'lili', fn: [Function: fn], [Symbol(fn)]: [Function: test] } [ 2, 3, 4, 5 ]\n```\n\n\n\n\n\n## global 和 window\n\n- **使用环境不同**：`window` 主要用于浏览器环境，而 `global` 主要用于 Node.js 环境。这是它们最本质的区别，因为它们分别对应了不同的 JavaScript 运行平台。\n- **功能内容不同：** \n  - `window` 包含了许多与浏览器操作相关的属性和方法，如 DOM 操作、浏览器窗口控制、定时器等，这些功能是为了实现网页的展示和交互。\n  - `global` 主要围绕 Node.js 的模块系统和服务器端运行相关的一些功能，如模块加载等。虽然它也作为全局变量和函数的挂载点，但具体的功能实现和 `window` 有很大差异。\n- **对象属性差异**：在浏览器环境中，`window` 对象具有非常丰富的属性，其中一些属性在 Node.js 的 `global` 对象中是不存在的，反之亦然。\n  - `window` 有 `location` 属性用于获取和设置浏览器的 URL 相关信息而 `global` 在 Node.js 环境中没有这个属性；\n  - `global` 中的 `require` 属性用于模块加载，在浏览器环境的 `window` 对象中通常没有（除非通过一些特殊的构建工具或者浏览器扩展等方式引入类似功能）。\n\n## ES Modules、CommonJS\n\n- ES Modules 模块加载机制\n\n  - **静态分析**：ES Modules 的一个重要特性是在编译阶段就进行模块依赖关系的静态分析。这意味着在代码执行之前，JavaScript 引擎就能确定模块之间的依赖关系。例如，在解析`import`语句时，会根据模块路径找到对应的模块文件，并分析其中的导出内容。这种静态分析有助于进行一些优化，比如在打包工具（如 Webpack）中，可以提前确定模块的依赖树，进行代码的合并、压缩等操作，减少浏览器加载时的请求数量。\n  - **异步加载特性**：在浏览器环境中，ES Modules 天然支持异步加载。当浏览器遇到`import`语句时，它会异步地请求模块文件，不会阻塞后续代码的执行（只要后续代码不依赖于这个还未加载完成的模块）。这与浏览器的异步加载资源的特性相匹配，能够更好地利用浏览器的多线程加载能力，提高网页的加载性能。在 Node.js 环境中，虽然底层实现上也是异步加载，但在实际使用中，可能需要一些配置或者工具支持来更好地发挥其异步加载的优势。\n\n- 作用域和模块独立性\n\n  - **严格的模块边界**：每个 ES 模块都有自己独立的作用域，模块内部定义的变量、函数等不会自动暴露到全局环境中。这有效地避免了全局变量的污染，使得代码的模块化更加清晰。例如，在一个模块中定义的变量`let privateVariable = 'This is private';`在其他模块中无法直接访问，除非通过该模块的导出机制。\n  - **导入绑定的特性**：当从一个模块导入内容到另一个模块时，导入的变量实际上是一种绑定关系。例如，如果一个模块导出了一个变量`export let counter = 0;`，另一个模块导入了这个变量`import { counter } from './counterModule.js';`，当在第一个模块中修改`counter`的值时，在第二个模块中这个变量的值也会相应改变。这种绑定是基于引用的，并且是只读的（不能在导入模块中直接重新赋值给导入的变量，如`counter = 1;`会报错，但可以通过调用第一个模块提供的修改函数来间接改变变量的值）。\n\n- CommonJS 模块加载机制\n\n  - **同步加载**：CommonJS 模块加载是同步的。当执行`require`函数时，JavaScript 执行会暂停，等待被请求的模块加载完成并返回其`module.exports`的内容。这种同步加载方式在服务器端环境（如 Node.js）是比较合理的，因为在服务器启动阶段，模块的加载顺序和完整性很重要，而且服务器环境通常不会有像浏览器那样对加载时间非常敏感的用户体验问题。但是在浏览器环境中，同步加载模块可能会导致页面的长时间阻塞，影响用户体验。\n\n  - 作用域和模块独立性\n    - **模块级别的作用域**：和 ES Modules 类似，CommonJS 模块也有自己独立的作用域。模块内部的变量和函数不会自动暴露到全局环境中，这有助于保持代码的模块化。例如，在一个 CommonJS 模块内部定义的变量`var internalVariable = 'This is internal';`不会在其他模块中直接可见。\n    - **值传递特性**：当一个模块通过`require`导入另一个模块的内容时，实际上是对`module.exports`内容的复制（对于基本类型是值复制，对于对象类型是引用复制）。例如，如果一个模块导出了一个对象`module.exports = { count: 0 };`，另一个模块导入这个对象后`const myObject = require('./myObjectModule.js');`，当在第一个模块中修改`myObject.count`的值时，在第二个模块中这个值也会改变（因为对象是引用类型）。但是如果在第一个模块中重新赋值`module.exports`（如`module.exports = { newCount: 1 };`），在第二个模块中`myObject`的值不会随之改变，因为这是一种值传递的关系。\n\n简化 module.exports 实现\n\n```js\n// 用于存储已经加载过的模块，避免重复加载\nconst loadedModules = {}\n\nfunction require(modulePath) {\n  // 根据传递的模块路径，得到模块的绝对路径\n  const moduleId = getModuleId(modulePath)\n\n  // 判断是否已有缓存\n  if (loadedModules[modulePath]) {\n    return loadedModules[modulePath].exports\n  }\n\n  // 导入的模块将会复制到 _require 函数中，模块的执行上下文将会存在该函数的参数\n  function _require(exports, require, module, __filename, __dirname) {\n    // 目标模块的代码\n  }\n\n  // 创建一个模块对象，包含 exports 属性用于存储要导出的内容\n  const module = { exports: {} }\n\n  const exports = module.exports\n  const __filename = moduleId\n  const __dirname = getDirname(__filename)\n\n  _require.call(exports, exports, require, module, __filename, __dirname)\n\n  // 将模块添加到已加载模块列表中，虽然此时 exports 还为空，但避免后续重复创建模块对象\n  loadedModules[modulePath] = module.exports\n\n  return module.exports\n}\n```\n\n\n\n## Promise\n\npromise 的链式调用\n\n\n\n- `Promise.all()`中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败；\n- `Promise.race()`中的 Promise 序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败；\n- `Promise.any()`中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；\n\n### Promise.all\n\n```js\nPromise.myAll = function(proms) {\n  let resolve, reject\n  const promise = new Promise((res, rej) => { resolve = res, reject = rej })\n\n  let len = 0, res = []\n  \n  for (let prom of proms) {\n    const index = len;\n    len ++\n    Promise.resolve(prom).then((data) => {\n      res[index] = data\n      len --;\n      if (len == 0) {\n        resolve(res)\n      }\n    }, reject)\n  }\n  if (len == 0) {\n    resolve([])\n  }\n  return promise\n}\n\nPromise.myAll([1, 2, Promise.reject(3), Promise.reject(4), 5]).then((datas) => {\n  console.log(datas)\n}).catch(err => {\n  console.log(err) // 3\n})\n\nPromise.myAll([1, 2, Promise.resolve(3), Promise.resolve(4), 5]).then((datas) => {\n  console.log(datas) // [ 1, 2, 3, 4, 5 ]\n}).catch(err => {\n  console.log(err)\n})\n```\n\n### Promise.race\n\n```js\nPromise.race = function(promises) {\n  return new Promise((resolve, reject) => {\n    for (let promise of promises) {\n      promise.then(res => {\n        resolve(res)\n      }).catch(err => {\n        reject(err)\n      })\n    }\n  })\n}\n\nconst promise1 = new Promise(resolve => { setTimeout(() => resolve('promise1'), 1001) })\nconst promise2 = new Promise(resolve => { setTimeout(() => resolve('promise2'), 1000) })\nPromise.race([promise1, promise2]).then(res => {\n  console.log(res)\n}) // promise2\n```\n\n### Promise.race\n\n```js\n\nPromise.any = function(promises) {\n  let result = []\n  let index = 0\n  let count = 0\n  return new Promise((resolve, reject) => {\n    for (let promise of promises) {\n      let i = index\n      index ++\n      promise.then(res => {\n        resolve(res)\n      }).catch(err => {\n        count ++\n        result[i] = err\n        if (count == promises.length) {\n          reject(result)\n        }\n      })\n    }\n  })\n}\n\nconst p1 = new Promise((resolve, reject) => { setTimeout(() => reject('p1'), 1001) })\nconst p2 = new Promise((resolve, reject) => { setTimeout(() => reject('p2'), 1000) })\nPromise.any([p1, p2]).then(res => {\n  console.log(res)\n}).catch(err => console.log('err', err))\n```\n\n并发请求\n\n```js\nfetch = (url) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(url)\n    }, 1000)\n  })\n}\n\nfunction request(urls, max_count, callback) {\n  let result = []\n  let index = 0, count = 0\n\n  function _request() {\n    return new Promise((resolve, reject) => {\n      let i = index\n      index ++\n      if (i >= urls.length) return\n      fetch(urls[i]).then(res => {\n        result[i] = res\n      }).catch(err => {\n        result[i] = err\n      }).finally(() => {\n        count ++\n        if (count == urls.length) {\n          callback(result)\n        }\n        if (count < urls.length) {\n          _request()\n        }\n      })\n    })\n  }\n\n  for (let i = 0; i < max_count && i < urls.length; ++ i) {\n    _request()\n  }\n}\n\nrequest(['https://cn.bing.com/search?q=1', 'https://cn.bing.com/search?q=2',\n          'https://cn.bing.com/search?q=3', 'https://cn.bing.com/search?q=4',\n          'https://cn.bing.com/search?q=5', 'https://cn.bing.com/search?q=6', \n          'https://cn.bing.com/search?q=7', 'https://cn.bing.com/search?q=8'], 4, (res) => {\n  console.log(res)\n})\n```\n\n\n\n\n\n## 链式调用和延迟执行\n\n```js\nfunction arrange(s) {\n  let queue = [() => console.log(s)]\n\n  function _do(do_str) {\n    queue.push(() => console.log(do_str))\n    return this\n  }\n  function wait(delay) {\n    queue.push(() => new Promise(resolve => {\n      setTimeout(() => {\n        console.log('wait')\n        resolve()\n      }, delay * 1000)\n    }) )\n    return this\n  }\n  function waitFirst(delay) {\n    queue.unshift(() => new Promise(resolve => {\n      setTimeout(() => {\n        console.log('waitFirst')\n        resolve()\n      }, delay * 1000)\n    }))\n    return this\n  }\n\n  async function execute() {\n    for (let task of queue) {\n      await task()\n    }\n  }\n\n\n  return {\n    execute,\n    do: _do,\n    wait,\n    waitFirst\n  }\n}\n\n// arrange('William').execute()\n// arrange('William').do('commit').execute()\n// arrange('William').wait(5).do('commit').execute()\narrange('William').waitFirst(5).do('push').execute()\n```\n\n\n\n## 对象原型链 prototype， `__proto__` \n\n![1733582096968](H:\\知识网络\\面试\\前端方向\\study\\imgs\\原型链)\n\n```js\nfunction Person() {\n\n}\nPerson.prototype = { name: 'lili' }\n\nconst p = new Person()\n// 类本身存在 prototype，通过该类创建的对象的 __proto__ 对象指向 prototype\nconsole.log(Person.prototype) // { name: 'lili' }\nconsole.log(p.__proto__)      // { name: 'lili' }\nconsole.log(p.__proto__ == Person.prototype) // true\nconsole.log(Person.prototype.__proto__ == Object.prototype) // true\n\nconsole.log(Function.prototype.__proto__ == Object.prototype) // true\nconsole.log(Person.__proto__ == Function.prototype) // true\n\nconsole.log(Function.prototype == Function.__proto__) // true\nconsole.log(Object.prototype.__proto__) // null\nconsole.log(Object.prototype.prototype) // undefined\n```\n\n\n\n## Object 方法\n\nObject.assign()，Object函数，获取对象的类型 instanceof，使对象属性不可变（writeable=false，configurable=false，Object.preventExtensions()，Object.seal()，Object.freeze()）\n\n\n\n## this 指向\n\n| 调用方式          | 示例             | 函数中 this 指向 |\n| ----------------- | ---------------- | ---------------- |\n| 通过 new 调用     | new method()     | 新对象           |\n| 直接调用          | method()         | 全局对象         |\n| 通过对象调用      | obj.method()     | 前面的对象       |\n| call, apply, bind | method.call(ctx) | 第一个参数       |\n\n\n\n## XMLHttpRequest 和 Fetch\n\n\n\nReflect\n\n线程进程共享资源\n\n跨域解决方案\n\ndom、bom\n\nloader实现原理、eslint实现原理\n\njs 调用执行栈\n\njs 作用域\n\nTCP/IP 协议\n\n计算机网络、操作系统\n\n死锁，如何解除死锁\n\nSymbol、DefineProperty、Proxy，Object.property.hasOwnProperty()\n\n浏览器加载HTML过程（重排、重绘）HTML+CSS + Javascript （JS是否会阻塞渲染队列）\n\n\n\n\n\n\n\nscript标签的属性\n\nless、scss、css， 以及css-loader\n\nuse strict\n\nvuex module, pinia\n\n设计模式\n\nMVVM、MVC\n\njs内存回收机制\n\nhttp 三次握手四次挥手\n\nwebsocket\n\n性能优化\n\nwebpack、vite（esbuild、rollup）\n\nsetup 和 setup函数\n\nvue, react 声明周期\n\n响应式原理、双向绑定（this.nextTick(), this.$set(), Object.defineProperty()）\n\nrender 函数和 diff 算法\n\n\n\n## apply & call 函数\n\n```js\nFunction.prototype.testCall = function(_this, ...args) {\n  console.log(this, args)\n  _this.fn = this\n  _this.fn(args)\n}\n```\n\n\n\n\n\n## 深拷贝\n\n\n\n```js\n\nfunction deepCopy(data) {\n  if (typeof data === 'object' && data !== null) {\n    let res = Array.isArray(data) ? [] : {}\n\n    for (let key in data) {\n      if (data.hasOwnProperty(key)) {\n        res[key] = deepCopy(data[key])\n      }\n    }\n\n    return res\n  } else {\n    return data\n  }\n}\n```\n\n测试：\n\n```js\n\nlet a = {\n  age: 18,\n  name: 'jock',\n  info: {\n    addr: \"abc\"\n  },\n  func: function () {\n    console.log(this.name)\n  }\n}\nlet b = deepCopy(a)\n\na.func = function () {\n  console.log(this.age)\n}\na.age = 19\n\nconsole.log(b)\n// {\n//    age: 18,\n//    name: 'jock',\n//    info: { addr: 'abc' },\n//    func: [Function: func]\n// } \na.func() // 19\nb.func() // jock\n```\n\n\n\n\n\n## 闭包\n\nJavaScript 闭包的设计思想来源于 Scheme\n\n- 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包\n- 闭包可以让你在一个内层函数中访问到外层函数的作用域\n- 在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来\n\n## 防抖\n\n当使用按钮点击或者输入框事件监听时，``onclick`` 或 ``oninput`` 函数将会被频繁触发，为了解决这一问题：\n\n```js\nexport function debounce(callback, delay=1000, immidate=false) {\n  let timer = null;\n\n  function _debounce(...args) {\n    if (timer != null) clearTimeout(timer)\n    \n    if (immidate === true) {\n      callback.apply(this, args)\n      immidate = false;\n    }\n\n    timer = setTimeout(() => {\n      callback.apply(this, args)\n      // callback(args)\n    }, delay)\n  }\n\n  return _debounce\n}\n```\n\n## 节流\n\n在固定的时间段内只会执行一次，不管触发了多少次。例如子弹射击游戏中，射击按键可能会快，执行射击不会一直往后延迟，而会在固定的频率下执行射击动作\n\n```js\nexport function throttle(callback, interval, immidate = true) {\n  let start_time = 0  \n\n  function _throttle(...args) {\n    let now_time = new Date().getTime()\n\n    if (immidate === false && start_time === 0) {\n      start_time = now_time\n    }\n\n    let rest_time = interval - (now_time - start_time)\n    \n    if (rest_time <= 0) {\n      callback.apply(this, args)\n      start_time = now_time\n    }\n  }\n\n  return _throttle\n}\n```\n\n尾部执行\n\n```js\nexport function throttle(callback, interval, immidate = true, trailing = false) {\n  let start_time = 0  \n  let timer = null\n\n  function _throttle(...args) {\n    let now_time = new Date().getTime()\n\n    if (immidate === false && start_time === 0) {\n      start_time = now_time\n    }\n\n    let rest_time = interval - (now_time - start_time)\n\n    if (rest_time <= 0) {\n      clearTimeout(timer)\n      timer = null\n      callback.apply(this, args)\n      start_time = now_time\n    }\n\n    if (trailing && timer === null) {\n      timer = setTimeout(() => {\n        timer = null\n        start_time = new Date().getTime()\n        callback.apply(this, args)\n      }, rest_time)\n    }\n  }\n\n  return _throttle\n}\n```\n\n\n\n## 函数重载\n\n```js\nfunction addMethod(obj, name, fn) {\n  const old = obj[name]\n  obj[name] = function(...args) {\n    if (args.length == fn.length) {\n      return fn.apply(this, args)\n    } else if (typeof old === 'function') {\n      return old.apply(this, args)\n    }\n  }\n}\n```\n\n测试代码\n\n```js\nlet obj = {}\naddMethod(obj, 'getUser', () => {\n  console.log('no argument function')\n})\n\naddMethod(obj, 'getUser', (a) => {\n  console.log('one argument function, argument: ', a)\n})\n\naddMethod(obj, 'getUser', (a, b) => {\n  console.log('two arguments function, argument: ', a, b)\n})\n\nobj.getUser() // no argument function\nobj.getUser('1') // one argument function, argument:  1\nobj.getUser('1', '2') // two arguments function, argument:  1 2\n```\n\n如上代码存在一些问题：\n\n- 当存在默认参数时，会失效\n\n  ```js\n  let obj = {}\n  addMethod(obj, 'getUser', () => {\n    console.log('no argument function')\n  })\n  \n  addMethod(obj, 'getUser', (a = 1) => {\n    console.log('one argument function, argument: ', a)\n  })\n  \n  addMethod(obj, 'getUser', (a, b) => {\n    console.log('two arguments function, argument: ', a, b)\n  })\n  \n  obj.getUser() // one argument function, argument:  1\n  obj.getUser('1') //\n  obj.getUser('1', '2') // two arguments function, argument:  1 2\n  ```\n\n- 当同为一个参数，但参数类型不一致也会失效\n\n改进后的函数重载方法\n\n```js\nfunction createOverload() {\n  const map = new Map()\n\n  function overload(...args) {\n    const key = args.map(arg => typeof arg).join(',')\n    const fn = map.get(key)\n    if (!fn) {\n      throw new TypeError('no implement function')\n    }\n    fn.apply(this, args)\n  }\n\n  overload.addImpl = function (...args) {\n    let fn = args.pop()\n    if (typeof fn !== 'function') {\n      throw new TypeError('last argument must be function')\n    }\n    const key = args.join(',')\n    map.set(key, fn)\n  }\n\n  return overload\n}\n```\n\n测试代码\n\n```js\nconst fun = createOverload()\n\nfun.addImpl(() => {\n  console.log('no argument function')\n})\n\nfun.addImpl('number', (...args) => {\n  console.log('one number argument function')\n})\n\nfun.addImpl('string', (...args) => {\n  console.log('one string argument function')\n})\n\nfun.addImpl('string', 'string', (...args) => {\n  console.log('two string arguments function')\n})\n\nfun() // no argument function\nfun(123) // one number argument function\nfun('str') // one string argument function\nfun('str1', 'str2') // two string arguments function\n```\n\n## 给 fetch 添加超时时间\n\n```js\nfunction createRequestWithTimeout(timeout = 3000) {\n  return function(url, options) {\n    return new Promise((resolve, reject) => {\n      const abort = new AbortController()\n      options = options || {}\n\n      if (options.signal) {\n        options.signal.addEventListener('abort', () => {\n          abort.abort()\n        })\n      } else {\n        options.signal = abort.signal\n      }\n      setTimeout(() => {\n        reject(new Error('timeout'))\n        abort.abort()\n      }, timeout)\n      \n      fetch(url, options).then(resolve, reject)\n    })\n  }\n}\n```\n\n测试代码\n\n```js\nconst fetch = (url, options) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(url)\n      console.log(url)\n    }, 1000)\n  })\n}\n\nconst request = createRequestWithTimeout()\nrequest('123')\n```\n\n\n\n## 大整数相加\n\n```js\n/**\n * \n * @param {String} a \n * @param {String} b \n * @returns {String}\n */\nfunction sum(a, b) {\n  let len = Math.max(a.length, b.length)\n  a = a.padStart(len, '0')\n  b = b.padStart(len, '0')\n  let carry = 0\n  let result = ''\n\n  for (let i = len - 1; i >= 0; -- i) {\n    let sum = parseInt(a[i]) + parseInt(b[i]) + carry\n    if (sum > 10) {\n      carry = 1\n      sum = sum - 10\n    } else {\n      carry = 0\n    }\n    result = sum + result\n  }\n  if (carry > 0) {\n    result = '1' + result\n  }\n\n  return result\n}\n```\n\n测试代码\n\n```js\nlet res = sum('1234567891011121314', '3333333333333333333333333333')\nconsole.log(res) // 3333333334567901224344454647\n\nres = sum('123', '999')\nconsole.log(res) // 1122\n```\n\n\n\n## 任务队列的中断和恢复\n\n```js\n/**\n * 依次顺序执行一系列任务\n * 所有任务全部完成后可以得到每个任务的执行结果\n * 需要返回两个方法，start 用于启动任务，pause 用于暂停任务\n * 每个人物具有原子性，即不可终端，只能在两个任务之间中断\n * @param  {...any} tasks 任务列表，每个任务无参，异步\n */\nfunction processTasks(...tasks) {\n  let isRunning = false\n  let i = 0\n  let result = []\n\n  return {\n    async start() {\n      return new Promise(async (resolve) => {\n        if (isRunning) {\n          return\n        }\n        isRunning = true\n        while (i < tasks.length) {\n          console.log(`the ${i} task is running`)\n          let res = await tasks[i]()\n          console.log(`the ${i} task is finished`)\n          result.push(res)\n          i ++\n          if (isRunning == false) {\n            return\n          }\n        }\n        isRunning = false\n        resolve(result)\n      })\n    },\n    pause() {\n      isRunning = false\n    }\n  }\n}\n```\n\n## 消除异步任务的传递性：\n\n```js\nfunction test1() {\n  const res = fetch('test')\n  return res\n}\n\nfunction test2() {\n  const res = test1()\n  return res\n}\n\nfunction test3() {\n  const res = test2()\n  return res\n}\n\nfunction main() {\n  const res = test3()\n  console.log(res)\n}\n\nfunction run(func) {\n  const oldFetch = globalThis.fetch\n  const cache = {status: 'pending', value: null}\n\n  const newFetch = function(...args) {\n    if (cache.status == 'fulfilled') {\n      return cache.value\n    } else if (cache.status == 'rejected') {\n      return cache.value\n    }\n    const promise = oldFetch(...args).then(res => {\n      cache.status = 'fulfilled'\n      cache.value = res\n    }).catch(err => {\n      cache.status = 'rejected'\n      cache.value = err\n    })\n    throw promise\n  }\n\n  this.fetch = newFetch\n  try {\n    func()\n  } catch(e) {\n    if (e instanceof Promise) {\n      e.finally(() => {\n        globalThis.fetch = newFetch\n        func()\n        globalThis.fetch = oldFetch\n      })\n    }\n  }\n  \n  globalThis.fetch = oldFetch\n}\n\n\nglobalThis.fetch = async (...args) => {\n  await Promise.resolve(() => args)\n  return args\n}\n\nrun(main)\n```\n\n","source":"_posts/js高级.md","raw":"---\ntitle: JS 高级内容\ndate: 2025-04-04 19:31:42\ntags: [JS]\ncategories: [编程]\n---\n\n## 基础\n\n基本数据类型：number、string、undefined、null、boolean、symbol\n\n引用数据类型：Array、Object、Function、Date、Regex\n\n\n\n## 块级作用域\n\nlet 和 const\n\n- 全局定义的变量不再作为属性添加到全局对象中\n- 在变量定义之前使用它会报错\n- 不可重复定义同名变量\n- 使用 const 定义变量时，必须初始化\n- 变量具有会计作用域，在代码块之外不可以使用\n  - 在 for 循环中使用 let 定义变量，变量所在的作用域是循环体，也因此在循环外不能使用。\n  - 另外 for 循环会对该变量做特殊处理，让每次循环使用的都是一个独立的循环变量，这可以解决 JS 由来已久的问题\n\n\n\n## class 和 function ：\n\n**相同点：**\n\n1.  class 和 function 都可以作为构造函数，通过 new 操作符来实例化。 \n2.  类可以包含构造函数方法、实例方法、setter 函数、getter 函数和静态类方法，但这些 **都不是** 必须的。 \n\n**不同点：**\n\n1. class 构造函数必须使用 new 操作符\n\n2. class 声明不可以提升\n\n   ```js\n   // file 1\n   const person1 = new Person('person1')\n   console.log(person1) // Person { name: 'person1' }\n   \n   function Person(name) {\n     this.name = name\n   }\n   \n   // file 2\n   const person2 = new Person('person2') // ReferenceError: Cannot access 'Person' before initialization\n   \n   class Person {\n     constructor(name) {\n       this.name = name\n     }\n   }\n   ```\n\n3. class 不可以用 call、apply、bind 改变执行上下文\n\n\n\n**node 事件循环和浏览器事件循环区别** \n\n**组合式 和 声明式 api 他们之间冲突，会优先使用哪个？** \n\n如何将响应式数据变为非响应式\n\n\n\n## 单例模式\n\n```js\nfunction signle() {\n  let obj\n\n  function _signle(o) {\n    if (obj) {\n      return obj\n    }\n    obj = o\n    return obj\n  }\n\n  return _signle\n}\n\nlet obj = { name: 'lili', age: 18 }\nlet signleObj = signle()\nlet a = signleObj(obj)\nlet b = signleObj(obj)\n\nconsole.log(a == b) // true\nconsole.log('a: ', a) // a:  { name: 'lili', age: 18 }\nconsole.log('b: ', b) // b:  { name: 'lili', age: 18 }\n```\n\n\n\n## 手写 call、apply、bind\n\n- `call` 是一个一个地传递参数\n- `apply` 是通过数组来传递参数\n- `bind` 方法在创建新函数时可以预先传递部分参数，后续调用新函数时再传递剩余参数。\n\n```js\nlet obj = { name: 'lili', fn: () => 'hello' }\n\ntest.call(obj, 2, 3, 4) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\ntest.apply(obj, [2, 3, 4]) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\nconst bindTest = test.bind(obj, 2)\nbindTest(3, 4) // { name: 'lili', fn: [Function: fn] } [ 2, 3, 4 ]\n```\n\n\n\n**test 函数 ** \n\n```js\nfunction test(...args) {\n  console.log(this, args)\n}\n```\n\n\n\n**手写 call** \n\n```js\nFunction.prototype.myCall = function (obj, ...args) {\n  obj = obj == null || obj == undefined? globalThis : Object(obj)\n\n  let key = Symbol('key')\n  \n  obj[key] = this\n  const result = obj[key](...args)\n  \n  delete obj[key]\n\n  return result\n}\n\nfunction test(...args) {\n  console.log(this, args)\n}\n\nlet obj = { name: 'lili', fn: () => 'hello' }\ntest.call(obj, 1, 2, 3) // { name: 'lili', fn: [Function: fn] } [ 1, 2, 3 ]\ntest.myCall(obj, 1, 2, 3) // { name: 'lili', fn: [Function: fn], [Symbol(key)]: [Function: test] } [ 1, 2, 3 ]\n```\n\n**手写 bind 函数** \n\n```js\n\nlet obj = { name: 'lili', fn: () => 'hello' }\n\n\nFunction.prototype.myBind = function (obj, ...args) {\n  let that = this\n  \n  return function (...rest) {\n    const key = Symbol('fn')\n    obj[key] = that\n    // Object.defineProperty(obj, key, that)\n    let result\n    console.log(new.target)\n    if (new.target) { // 是否通过 new 关键字调用，当通过 new 调用时：[Function (anonymous)]， 当之间调用时：undefined\n      result = new obj[key](...args, ...rest)\n    } else {\n      result = obj[key](...args, ...rest)\n    }\n    delete obj[key]\n    return result\n  }\n}\n\nconst testBind = test.myBind(obj, 2, 3)\ntestBind(4, 5) // { name: 'lili', fn: [Function: fn], [Symbol(fn)]: [Function: test] } [ 2, 3, 4, 5 ]\n```\n\n\n\n\n\n## global 和 window\n\n- **使用环境不同**：`window` 主要用于浏览器环境，而 `global` 主要用于 Node.js 环境。这是它们最本质的区别，因为它们分别对应了不同的 JavaScript 运行平台。\n- **功能内容不同：** \n  - `window` 包含了许多与浏览器操作相关的属性和方法，如 DOM 操作、浏览器窗口控制、定时器等，这些功能是为了实现网页的展示和交互。\n  - `global` 主要围绕 Node.js 的模块系统和服务器端运行相关的一些功能，如模块加载等。虽然它也作为全局变量和函数的挂载点，但具体的功能实现和 `window` 有很大差异。\n- **对象属性差异**：在浏览器环境中，`window` 对象具有非常丰富的属性，其中一些属性在 Node.js 的 `global` 对象中是不存在的，反之亦然。\n  - `window` 有 `location` 属性用于获取和设置浏览器的 URL 相关信息而 `global` 在 Node.js 环境中没有这个属性；\n  - `global` 中的 `require` 属性用于模块加载，在浏览器环境的 `window` 对象中通常没有（除非通过一些特殊的构建工具或者浏览器扩展等方式引入类似功能）。\n\n## ES Modules、CommonJS\n\n- ES Modules 模块加载机制\n\n  - **静态分析**：ES Modules 的一个重要特性是在编译阶段就进行模块依赖关系的静态分析。这意味着在代码执行之前，JavaScript 引擎就能确定模块之间的依赖关系。例如，在解析`import`语句时，会根据模块路径找到对应的模块文件，并分析其中的导出内容。这种静态分析有助于进行一些优化，比如在打包工具（如 Webpack）中，可以提前确定模块的依赖树，进行代码的合并、压缩等操作，减少浏览器加载时的请求数量。\n  - **异步加载特性**：在浏览器环境中，ES Modules 天然支持异步加载。当浏览器遇到`import`语句时，它会异步地请求模块文件，不会阻塞后续代码的执行（只要后续代码不依赖于这个还未加载完成的模块）。这与浏览器的异步加载资源的特性相匹配，能够更好地利用浏览器的多线程加载能力，提高网页的加载性能。在 Node.js 环境中，虽然底层实现上也是异步加载，但在实际使用中，可能需要一些配置或者工具支持来更好地发挥其异步加载的优势。\n\n- 作用域和模块独立性\n\n  - **严格的模块边界**：每个 ES 模块都有自己独立的作用域，模块内部定义的变量、函数等不会自动暴露到全局环境中。这有效地避免了全局变量的污染，使得代码的模块化更加清晰。例如，在一个模块中定义的变量`let privateVariable = 'This is private';`在其他模块中无法直接访问，除非通过该模块的导出机制。\n  - **导入绑定的特性**：当从一个模块导入内容到另一个模块时，导入的变量实际上是一种绑定关系。例如，如果一个模块导出了一个变量`export let counter = 0;`，另一个模块导入了这个变量`import { counter } from './counterModule.js';`，当在第一个模块中修改`counter`的值时，在第二个模块中这个变量的值也会相应改变。这种绑定是基于引用的，并且是只读的（不能在导入模块中直接重新赋值给导入的变量，如`counter = 1;`会报错，但可以通过调用第一个模块提供的修改函数来间接改变变量的值）。\n\n- CommonJS 模块加载机制\n\n  - **同步加载**：CommonJS 模块加载是同步的。当执行`require`函数时，JavaScript 执行会暂停，等待被请求的模块加载完成并返回其`module.exports`的内容。这种同步加载方式在服务器端环境（如 Node.js）是比较合理的，因为在服务器启动阶段，模块的加载顺序和完整性很重要，而且服务器环境通常不会有像浏览器那样对加载时间非常敏感的用户体验问题。但是在浏览器环境中，同步加载模块可能会导致页面的长时间阻塞，影响用户体验。\n\n  - 作用域和模块独立性\n    - **模块级别的作用域**：和 ES Modules 类似，CommonJS 模块也有自己独立的作用域。模块内部的变量和函数不会自动暴露到全局环境中，这有助于保持代码的模块化。例如，在一个 CommonJS 模块内部定义的变量`var internalVariable = 'This is internal';`不会在其他模块中直接可见。\n    - **值传递特性**：当一个模块通过`require`导入另一个模块的内容时，实际上是对`module.exports`内容的复制（对于基本类型是值复制，对于对象类型是引用复制）。例如，如果一个模块导出了一个对象`module.exports = { count: 0 };`，另一个模块导入这个对象后`const myObject = require('./myObjectModule.js');`，当在第一个模块中修改`myObject.count`的值时，在第二个模块中这个值也会改变（因为对象是引用类型）。但是如果在第一个模块中重新赋值`module.exports`（如`module.exports = { newCount: 1 };`），在第二个模块中`myObject`的值不会随之改变，因为这是一种值传递的关系。\n\n简化 module.exports 实现\n\n```js\n// 用于存储已经加载过的模块，避免重复加载\nconst loadedModules = {}\n\nfunction require(modulePath) {\n  // 根据传递的模块路径，得到模块的绝对路径\n  const moduleId = getModuleId(modulePath)\n\n  // 判断是否已有缓存\n  if (loadedModules[modulePath]) {\n    return loadedModules[modulePath].exports\n  }\n\n  // 导入的模块将会复制到 _require 函数中，模块的执行上下文将会存在该函数的参数\n  function _require(exports, require, module, __filename, __dirname) {\n    // 目标模块的代码\n  }\n\n  // 创建一个模块对象，包含 exports 属性用于存储要导出的内容\n  const module = { exports: {} }\n\n  const exports = module.exports\n  const __filename = moduleId\n  const __dirname = getDirname(__filename)\n\n  _require.call(exports, exports, require, module, __filename, __dirname)\n\n  // 将模块添加到已加载模块列表中，虽然此时 exports 还为空，但避免后续重复创建模块对象\n  loadedModules[modulePath] = module.exports\n\n  return module.exports\n}\n```\n\n\n\n## Promise\n\npromise 的链式调用\n\n\n\n- `Promise.all()`中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败；\n- `Promise.race()`中的 Promise 序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败；\n- `Promise.any()`中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；\n\n### Promise.all\n\n```js\nPromise.myAll = function(proms) {\n  let resolve, reject\n  const promise = new Promise((res, rej) => { resolve = res, reject = rej })\n\n  let len = 0, res = []\n  \n  for (let prom of proms) {\n    const index = len;\n    len ++\n    Promise.resolve(prom).then((data) => {\n      res[index] = data\n      len --;\n      if (len == 0) {\n        resolve(res)\n      }\n    }, reject)\n  }\n  if (len == 0) {\n    resolve([])\n  }\n  return promise\n}\n\nPromise.myAll([1, 2, Promise.reject(3), Promise.reject(4), 5]).then((datas) => {\n  console.log(datas)\n}).catch(err => {\n  console.log(err) // 3\n})\n\nPromise.myAll([1, 2, Promise.resolve(3), Promise.resolve(4), 5]).then((datas) => {\n  console.log(datas) // [ 1, 2, 3, 4, 5 ]\n}).catch(err => {\n  console.log(err)\n})\n```\n\n### Promise.race\n\n```js\nPromise.race = function(promises) {\n  return new Promise((resolve, reject) => {\n    for (let promise of promises) {\n      promise.then(res => {\n        resolve(res)\n      }).catch(err => {\n        reject(err)\n      })\n    }\n  })\n}\n\nconst promise1 = new Promise(resolve => { setTimeout(() => resolve('promise1'), 1001) })\nconst promise2 = new Promise(resolve => { setTimeout(() => resolve('promise2'), 1000) })\nPromise.race([promise1, promise2]).then(res => {\n  console.log(res)\n}) // promise2\n```\n\n### Promise.race\n\n```js\n\nPromise.any = function(promises) {\n  let result = []\n  let index = 0\n  let count = 0\n  return new Promise((resolve, reject) => {\n    for (let promise of promises) {\n      let i = index\n      index ++\n      promise.then(res => {\n        resolve(res)\n      }).catch(err => {\n        count ++\n        result[i] = err\n        if (count == promises.length) {\n          reject(result)\n        }\n      })\n    }\n  })\n}\n\nconst p1 = new Promise((resolve, reject) => { setTimeout(() => reject('p1'), 1001) })\nconst p2 = new Promise((resolve, reject) => { setTimeout(() => reject('p2'), 1000) })\nPromise.any([p1, p2]).then(res => {\n  console.log(res)\n}).catch(err => console.log('err', err))\n```\n\n并发请求\n\n```js\nfetch = (url) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(url)\n    }, 1000)\n  })\n}\n\nfunction request(urls, max_count, callback) {\n  let result = []\n  let index = 0, count = 0\n\n  function _request() {\n    return new Promise((resolve, reject) => {\n      let i = index\n      index ++\n      if (i >= urls.length) return\n      fetch(urls[i]).then(res => {\n        result[i] = res\n      }).catch(err => {\n        result[i] = err\n      }).finally(() => {\n        count ++\n        if (count == urls.length) {\n          callback(result)\n        }\n        if (count < urls.length) {\n          _request()\n        }\n      })\n    })\n  }\n\n  for (let i = 0; i < max_count && i < urls.length; ++ i) {\n    _request()\n  }\n}\n\nrequest(['https://cn.bing.com/search?q=1', 'https://cn.bing.com/search?q=2',\n          'https://cn.bing.com/search?q=3', 'https://cn.bing.com/search?q=4',\n          'https://cn.bing.com/search?q=5', 'https://cn.bing.com/search?q=6', \n          'https://cn.bing.com/search?q=7', 'https://cn.bing.com/search?q=8'], 4, (res) => {\n  console.log(res)\n})\n```\n\n\n\n\n\n## 链式调用和延迟执行\n\n```js\nfunction arrange(s) {\n  let queue = [() => console.log(s)]\n\n  function _do(do_str) {\n    queue.push(() => console.log(do_str))\n    return this\n  }\n  function wait(delay) {\n    queue.push(() => new Promise(resolve => {\n      setTimeout(() => {\n        console.log('wait')\n        resolve()\n      }, delay * 1000)\n    }) )\n    return this\n  }\n  function waitFirst(delay) {\n    queue.unshift(() => new Promise(resolve => {\n      setTimeout(() => {\n        console.log('waitFirst')\n        resolve()\n      }, delay * 1000)\n    }))\n    return this\n  }\n\n  async function execute() {\n    for (let task of queue) {\n      await task()\n    }\n  }\n\n\n  return {\n    execute,\n    do: _do,\n    wait,\n    waitFirst\n  }\n}\n\n// arrange('William').execute()\n// arrange('William').do('commit').execute()\n// arrange('William').wait(5).do('commit').execute()\narrange('William').waitFirst(5).do('push').execute()\n```\n\n\n\n## 对象原型链 prototype， `__proto__` \n\n![1733582096968](H:\\知识网络\\面试\\前端方向\\study\\imgs\\原型链)\n\n```js\nfunction Person() {\n\n}\nPerson.prototype = { name: 'lili' }\n\nconst p = new Person()\n// 类本身存在 prototype，通过该类创建的对象的 __proto__ 对象指向 prototype\nconsole.log(Person.prototype) // { name: 'lili' }\nconsole.log(p.__proto__)      // { name: 'lili' }\nconsole.log(p.__proto__ == Person.prototype) // true\nconsole.log(Person.prototype.__proto__ == Object.prototype) // true\n\nconsole.log(Function.prototype.__proto__ == Object.prototype) // true\nconsole.log(Person.__proto__ == Function.prototype) // true\n\nconsole.log(Function.prototype == Function.__proto__) // true\nconsole.log(Object.prototype.__proto__) // null\nconsole.log(Object.prototype.prototype) // undefined\n```\n\n\n\n## Object 方法\n\nObject.assign()，Object函数，获取对象的类型 instanceof，使对象属性不可变（writeable=false，configurable=false，Object.preventExtensions()，Object.seal()，Object.freeze()）\n\n\n\n## this 指向\n\n| 调用方式          | 示例             | 函数中 this 指向 |\n| ----------------- | ---------------- | ---------------- |\n| 通过 new 调用     | new method()     | 新对象           |\n| 直接调用          | method()         | 全局对象         |\n| 通过对象调用      | obj.method()     | 前面的对象       |\n| call, apply, bind | method.call(ctx) | 第一个参数       |\n\n\n\n## XMLHttpRequest 和 Fetch\n\n\n\nReflect\n\n线程进程共享资源\n\n跨域解决方案\n\ndom、bom\n\nloader实现原理、eslint实现原理\n\njs 调用执行栈\n\njs 作用域\n\nTCP/IP 协议\n\n计算机网络、操作系统\n\n死锁，如何解除死锁\n\nSymbol、DefineProperty、Proxy，Object.property.hasOwnProperty()\n\n浏览器加载HTML过程（重排、重绘）HTML+CSS + Javascript （JS是否会阻塞渲染队列）\n\n\n\n\n\n\n\nscript标签的属性\n\nless、scss、css， 以及css-loader\n\nuse strict\n\nvuex module, pinia\n\n设计模式\n\nMVVM、MVC\n\njs内存回收机制\n\nhttp 三次握手四次挥手\n\nwebsocket\n\n性能优化\n\nwebpack、vite（esbuild、rollup）\n\nsetup 和 setup函数\n\nvue, react 声明周期\n\n响应式原理、双向绑定（this.nextTick(), this.$set(), Object.defineProperty()）\n\nrender 函数和 diff 算法\n\n\n\n## apply & call 函数\n\n```js\nFunction.prototype.testCall = function(_this, ...args) {\n  console.log(this, args)\n  _this.fn = this\n  _this.fn(args)\n}\n```\n\n\n\n\n\n## 深拷贝\n\n\n\n```js\n\nfunction deepCopy(data) {\n  if (typeof data === 'object' && data !== null) {\n    let res = Array.isArray(data) ? [] : {}\n\n    for (let key in data) {\n      if (data.hasOwnProperty(key)) {\n        res[key] = deepCopy(data[key])\n      }\n    }\n\n    return res\n  } else {\n    return data\n  }\n}\n```\n\n测试：\n\n```js\n\nlet a = {\n  age: 18,\n  name: 'jock',\n  info: {\n    addr: \"abc\"\n  },\n  func: function () {\n    console.log(this.name)\n  }\n}\nlet b = deepCopy(a)\n\na.func = function () {\n  console.log(this.age)\n}\na.age = 19\n\nconsole.log(b)\n// {\n//    age: 18,\n//    name: 'jock',\n//    info: { addr: 'abc' },\n//    func: [Function: func]\n// } \na.func() // 19\nb.func() // jock\n```\n\n\n\n\n\n## 闭包\n\nJavaScript 闭包的设计思想来源于 Scheme\n\n- 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包\n- 闭包可以让你在一个内层函数中访问到外层函数的作用域\n- 在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来\n\n## 防抖\n\n当使用按钮点击或者输入框事件监听时，``onclick`` 或 ``oninput`` 函数将会被频繁触发，为了解决这一问题：\n\n```js\nexport function debounce(callback, delay=1000, immidate=false) {\n  let timer = null;\n\n  function _debounce(...args) {\n    if (timer != null) clearTimeout(timer)\n    \n    if (immidate === true) {\n      callback.apply(this, args)\n      immidate = false;\n    }\n\n    timer = setTimeout(() => {\n      callback.apply(this, args)\n      // callback(args)\n    }, delay)\n  }\n\n  return _debounce\n}\n```\n\n## 节流\n\n在固定的时间段内只会执行一次，不管触发了多少次。例如子弹射击游戏中，射击按键可能会快，执行射击不会一直往后延迟，而会在固定的频率下执行射击动作\n\n```js\nexport function throttle(callback, interval, immidate = true) {\n  let start_time = 0  \n\n  function _throttle(...args) {\n    let now_time = new Date().getTime()\n\n    if (immidate === false && start_time === 0) {\n      start_time = now_time\n    }\n\n    let rest_time = interval - (now_time - start_time)\n    \n    if (rest_time <= 0) {\n      callback.apply(this, args)\n      start_time = now_time\n    }\n  }\n\n  return _throttle\n}\n```\n\n尾部执行\n\n```js\nexport function throttle(callback, interval, immidate = true, trailing = false) {\n  let start_time = 0  \n  let timer = null\n\n  function _throttle(...args) {\n    let now_time = new Date().getTime()\n\n    if (immidate === false && start_time === 0) {\n      start_time = now_time\n    }\n\n    let rest_time = interval - (now_time - start_time)\n\n    if (rest_time <= 0) {\n      clearTimeout(timer)\n      timer = null\n      callback.apply(this, args)\n      start_time = now_time\n    }\n\n    if (trailing && timer === null) {\n      timer = setTimeout(() => {\n        timer = null\n        start_time = new Date().getTime()\n        callback.apply(this, args)\n      }, rest_time)\n    }\n  }\n\n  return _throttle\n}\n```\n\n\n\n## 函数重载\n\n```js\nfunction addMethod(obj, name, fn) {\n  const old = obj[name]\n  obj[name] = function(...args) {\n    if (args.length == fn.length) {\n      return fn.apply(this, args)\n    } else if (typeof old === 'function') {\n      return old.apply(this, args)\n    }\n  }\n}\n```\n\n测试代码\n\n```js\nlet obj = {}\naddMethod(obj, 'getUser', () => {\n  console.log('no argument function')\n})\n\naddMethod(obj, 'getUser', (a) => {\n  console.log('one argument function, argument: ', a)\n})\n\naddMethod(obj, 'getUser', (a, b) => {\n  console.log('two arguments function, argument: ', a, b)\n})\n\nobj.getUser() // no argument function\nobj.getUser('1') // one argument function, argument:  1\nobj.getUser('1', '2') // two arguments function, argument:  1 2\n```\n\n如上代码存在一些问题：\n\n- 当存在默认参数时，会失效\n\n  ```js\n  let obj = {}\n  addMethod(obj, 'getUser', () => {\n    console.log('no argument function')\n  })\n  \n  addMethod(obj, 'getUser', (a = 1) => {\n    console.log('one argument function, argument: ', a)\n  })\n  \n  addMethod(obj, 'getUser', (a, b) => {\n    console.log('two arguments function, argument: ', a, b)\n  })\n  \n  obj.getUser() // one argument function, argument:  1\n  obj.getUser('1') //\n  obj.getUser('1', '2') // two arguments function, argument:  1 2\n  ```\n\n- 当同为一个参数，但参数类型不一致也会失效\n\n改进后的函数重载方法\n\n```js\nfunction createOverload() {\n  const map = new Map()\n\n  function overload(...args) {\n    const key = args.map(arg => typeof arg).join(',')\n    const fn = map.get(key)\n    if (!fn) {\n      throw new TypeError('no implement function')\n    }\n    fn.apply(this, args)\n  }\n\n  overload.addImpl = function (...args) {\n    let fn = args.pop()\n    if (typeof fn !== 'function') {\n      throw new TypeError('last argument must be function')\n    }\n    const key = args.join(',')\n    map.set(key, fn)\n  }\n\n  return overload\n}\n```\n\n测试代码\n\n```js\nconst fun = createOverload()\n\nfun.addImpl(() => {\n  console.log('no argument function')\n})\n\nfun.addImpl('number', (...args) => {\n  console.log('one number argument function')\n})\n\nfun.addImpl('string', (...args) => {\n  console.log('one string argument function')\n})\n\nfun.addImpl('string', 'string', (...args) => {\n  console.log('two string arguments function')\n})\n\nfun() // no argument function\nfun(123) // one number argument function\nfun('str') // one string argument function\nfun('str1', 'str2') // two string arguments function\n```\n\n## 给 fetch 添加超时时间\n\n```js\nfunction createRequestWithTimeout(timeout = 3000) {\n  return function(url, options) {\n    return new Promise((resolve, reject) => {\n      const abort = new AbortController()\n      options = options || {}\n\n      if (options.signal) {\n        options.signal.addEventListener('abort', () => {\n          abort.abort()\n        })\n      } else {\n        options.signal = abort.signal\n      }\n      setTimeout(() => {\n        reject(new Error('timeout'))\n        abort.abort()\n      }, timeout)\n      \n      fetch(url, options).then(resolve, reject)\n    })\n  }\n}\n```\n\n测试代码\n\n```js\nconst fetch = (url, options) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(url)\n      console.log(url)\n    }, 1000)\n  })\n}\n\nconst request = createRequestWithTimeout()\nrequest('123')\n```\n\n\n\n## 大整数相加\n\n```js\n/**\n * \n * @param {String} a \n * @param {String} b \n * @returns {String}\n */\nfunction sum(a, b) {\n  let len = Math.max(a.length, b.length)\n  a = a.padStart(len, '0')\n  b = b.padStart(len, '0')\n  let carry = 0\n  let result = ''\n\n  for (let i = len - 1; i >= 0; -- i) {\n    let sum = parseInt(a[i]) + parseInt(b[i]) + carry\n    if (sum > 10) {\n      carry = 1\n      sum = sum - 10\n    } else {\n      carry = 0\n    }\n    result = sum + result\n  }\n  if (carry > 0) {\n    result = '1' + result\n  }\n\n  return result\n}\n```\n\n测试代码\n\n```js\nlet res = sum('1234567891011121314', '3333333333333333333333333333')\nconsole.log(res) // 3333333334567901224344454647\n\nres = sum('123', '999')\nconsole.log(res) // 1122\n```\n\n\n\n## 任务队列的中断和恢复\n\n```js\n/**\n * 依次顺序执行一系列任务\n * 所有任务全部完成后可以得到每个任务的执行结果\n * 需要返回两个方法，start 用于启动任务，pause 用于暂停任务\n * 每个人物具有原子性，即不可终端，只能在两个任务之间中断\n * @param  {...any} tasks 任务列表，每个任务无参，异步\n */\nfunction processTasks(...tasks) {\n  let isRunning = false\n  let i = 0\n  let result = []\n\n  return {\n    async start() {\n      return new Promise(async (resolve) => {\n        if (isRunning) {\n          return\n        }\n        isRunning = true\n        while (i < tasks.length) {\n          console.log(`the ${i} task is running`)\n          let res = await tasks[i]()\n          console.log(`the ${i} task is finished`)\n          result.push(res)\n          i ++\n          if (isRunning == false) {\n            return\n          }\n        }\n        isRunning = false\n        resolve(result)\n      })\n    },\n    pause() {\n      isRunning = false\n    }\n  }\n}\n```\n\n## 消除异步任务的传递性：\n\n```js\nfunction test1() {\n  const res = fetch('test')\n  return res\n}\n\nfunction test2() {\n  const res = test1()\n  return res\n}\n\nfunction test3() {\n  const res = test2()\n  return res\n}\n\nfunction main() {\n  const res = test3()\n  console.log(res)\n}\n\nfunction run(func) {\n  const oldFetch = globalThis.fetch\n  const cache = {status: 'pending', value: null}\n\n  const newFetch = function(...args) {\n    if (cache.status == 'fulfilled') {\n      return cache.value\n    } else if (cache.status == 'rejected') {\n      return cache.value\n    }\n    const promise = oldFetch(...args).then(res => {\n      cache.status = 'fulfilled'\n      cache.value = res\n    }).catch(err => {\n      cache.status = 'rejected'\n      cache.value = err\n    })\n    throw promise\n  }\n\n  this.fetch = newFetch\n  try {\n    func()\n  } catch(e) {\n    if (e instanceof Promise) {\n      e.finally(() => {\n        globalThis.fetch = newFetch\n        func()\n        globalThis.fetch = oldFetch\n      })\n    }\n  }\n  \n  globalThis.fetch = oldFetch\n}\n\n\nglobalThis.fetch = async (...args) => {\n  await Promise.resolve(() => args)\n  return args\n}\n\nrun(main)\n```\n\n","slug":"js高级","published":1,"updated":"2025-09-03T15:25:55.332Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkff80007r44y66xvho9h","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>基本数据类型：number、string、undefined、null、boolean、symbol</p>\n<p>引用数据类型：Array、Object、Function、Date、Regex</p>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><p>let 和 const</p>\n<ul>\n<li>全局定义的变量不再作为属性添加到全局对象中</li>\n<li>在变量定义之前使用它会报错</li>\n<li>不可重复定义同名变量</li>\n<li>使用 const 定义变量时，必须初始化</li>\n<li>变量具有会计作用域，在代码块之外不可以使用<ul>\n<li>在 for 循环中使用 let 定义变量，变量所在的作用域是循环体，也因此在循环外不能使用。</li>\n<li>另外 for 循环会对该变量做特殊处理，让每次循环使用的都是一个独立的循环变量，这可以解决 JS 由来已久的问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"class-和-function-：\"><a href=\"#class-和-function-：\" class=\"headerlink\" title=\"class 和 function ：\"></a>class 和 function ：</h2><p><strong>相同点：</strong></p>\n<ol>\n<li>class 和 function 都可以作为构造函数，通过 new 操作符来实例化。 </li>\n<li>类可以包含构造函数方法、实例方法、setter 函数、getter 函数和静态类方法，但这些 <strong>都不是</strong> 必须的。</li>\n</ol>\n<p><strong>不同点：</strong></p>\n<ol>\n<li><p>class 构造函数必须使用 new 操作符</p>\n</li>\n<li><p>class 声明不可以提升</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1) <span class=\"comment\">// Person &#123; name: &#x27;person1&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>) <span class=\"comment\">// ReferenceError: Cannot access &#x27;Person&#x27; before initialization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class 不可以用 call、apply、bind 改变执行上下文</p>\n</li>\n</ol>\n<p><strong>node 事件循环和浏览器事件循环区别</strong> </p>\n<p><strong>组合式 和 声明式 api 他们之间冲突，会优先使用哪个？</strong> </p>\n<p>如何将响应式数据变为非响应式</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">signle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_signle</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj = o</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _signle</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> signleObj = <span class=\"title function_\">signle</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title function_\">signleObj</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"title function_\">signleObj</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == b) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a: &#x27;</span>, a) <span class=\"comment\">// a:  &#123; name: &#x27;lili&#x27;, age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b: &#x27;</span>, b) <span class=\"comment\">// b:  &#123; name: &#x27;lili&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"手写-call、apply、bind\"><a href=\"#手写-call、apply、bind\" class=\"headerlink\" title=\"手写 call、apply、bind\"></a>手写 call、apply、bind</h2><ul>\n<li><code>call</code> 是一个一个地传递参数</li>\n<li><code>apply</code> 是通过数组来传递参数</li>\n<li><code>bind</code> 方法在创建新函数时可以预先传递部分参数，后续调用新函数时再传递剩余参数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(obj, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(obj, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bindTest = test.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"title function_\">bindTest</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>**test 函数 ** </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>手写 call</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">obj, ...args</span>) &#123;</span><br><span class=\"line\">  obj = obj == <span class=\"literal\">null</span> || obj == <span class=\"literal\">undefined</span>? globalThis : <span class=\"title class_\">Object</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;key&#x27;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  obj[key] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = obj[key](...args)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 1, 2, 3 ]</span></span><br><span class=\"line\">test.<span class=\"title function_\">myCall</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn], [Symbol(key)]: [Function: test] &#125; [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>手写 bind 函数</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">obj, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;fn&#x27;</span>)</span><br><span class=\"line\">    obj[key] = that</span><br><span class=\"line\">    <span class=\"comment\">// Object.defineProperty(obj, key, that)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123; <span class=\"comment\">// 是否通过 new 关键字调用，当通过 new 调用时：[Function (anonymous)]， 当之间调用时：undefined</span></span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> obj[key](...args, ...rest)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = obj[key](...args, ...rest)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testBind = test.<span class=\"title function_\">myBind</span>(obj, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"title function_\">testBind</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn], [Symbol(fn)]: [Function: test] &#125; [ 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"global-和-window\"><a href=\"#global-和-window\" class=\"headerlink\" title=\"global 和 window\"></a>global 和 window</h2><ul>\n<li><strong>使用环境不同</strong>：<code>window</code> 主要用于浏览器环境，而 <code>global</code> 主要用于 Node.js 环境。这是它们最本质的区别，因为它们分别对应了不同的 JavaScript 运行平台。</li>\n<li><strong>功能内容不同：</strong> <ul>\n<li><code>window</code> 包含了许多与浏览器操作相关的属性和方法，如 DOM 操作、浏览器窗口控制、定时器等，这些功能是为了实现网页的展示和交互。</li>\n<li><code>global</code> 主要围绕 Node.js 的模块系统和服务器端运行相关的一些功能，如模块加载等。虽然它也作为全局变量和函数的挂载点，但具体的功能实现和 <code>window</code> 有很大差异。</li>\n</ul>\n</li>\n<li><strong>对象属性差异</strong>：在浏览器环境中，<code>window</code> 对象具有非常丰富的属性，其中一些属性在 Node.js 的 <code>global</code> 对象中是不存在的，反之亦然。<ul>\n<li><code>window</code> 有 <code>location</code> 属性用于获取和设置浏览器的 URL 相关信息而 <code>global</code> 在 Node.js 环境中没有这个属性；</li>\n<li><code>global</code> 中的 <code>require</code> 属性用于模块加载，在浏览器环境的 <code>window</code> 对象中通常没有（除非通过一些特殊的构建工具或者浏览器扩展等方式引入类似功能）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ES-Modules、CommonJS\"><a href=\"#ES-Modules、CommonJS\" class=\"headerlink\" title=\"ES Modules、CommonJS\"></a>ES Modules、CommonJS</h2><ul>\n<li><p>ES Modules 模块加载机制</p>\n<ul>\n<li><strong>静态分析</strong>：ES Modules 的一个重要特性是在编译阶段就进行模块依赖关系的静态分析。这意味着在代码执行之前，JavaScript 引擎就能确定模块之间的依赖关系。例如，在解析<code>import</code>语句时，会根据模块路径找到对应的模块文件，并分析其中的导出内容。这种静态分析有助于进行一些优化，比如在打包工具（如 Webpack）中，可以提前确定模块的依赖树，进行代码的合并、压缩等操作，减少浏览器加载时的请求数量。</li>\n<li><strong>异步加载特性</strong>：在浏览器环境中，ES Modules 天然支持异步加载。当浏览器遇到<code>import</code>语句时，它会异步地请求模块文件，不会阻塞后续代码的执行（只要后续代码不依赖于这个还未加载完成的模块）。这与浏览器的异步加载资源的特性相匹配，能够更好地利用浏览器的多线程加载能力，提高网页的加载性能。在 Node.js 环境中，虽然底层实现上也是异步加载，但在实际使用中，可能需要一些配置或者工具支持来更好地发挥其异步加载的优势。</li>\n</ul>\n</li>\n<li><p>作用域和模块独立性</p>\n<ul>\n<li><strong>严格的模块边界</strong>：每个 ES 模块都有自己独立的作用域，模块内部定义的变量、函数等不会自动暴露到全局环境中。这有效地避免了全局变量的污染，使得代码的模块化更加清晰。例如，在一个模块中定义的变量<code>let privateVariable = &#39;This is private&#39;;</code>在其他模块中无法直接访问，除非通过该模块的导出机制。</li>\n<li><strong>导入绑定的特性</strong>：当从一个模块导入内容到另一个模块时，导入的变量实际上是一种绑定关系。例如，如果一个模块导出了一个变量<code>export let counter = 0;</code>，另一个模块导入了这个变量<code>import &#123; counter &#125; from &#39;./counterModule.js&#39;;</code>，当在第一个模块中修改<code>counter</code>的值时，在第二个模块中这个变量的值也会相应改变。这种绑定是基于引用的，并且是只读的（不能在导入模块中直接重新赋值给导入的变量，如<code>counter = 1;</code>会报错，但可以通过调用第一个模块提供的修改函数来间接改变变量的值）。</li>\n</ul>\n</li>\n<li><p>CommonJS 模块加载机制</p>\n<ul>\n<li><p><strong>同步加载</strong>：CommonJS 模块加载是同步的。当执行<code>require</code>函数时，JavaScript 执行会暂停，等待被请求的模块加载完成并返回其<code>module.exports</code>的内容。这种同步加载方式在服务器端环境（如 Node.js）是比较合理的，因为在服务器启动阶段，模块的加载顺序和完整性很重要，而且服务器环境通常不会有像浏览器那样对加载时间非常敏感的用户体验问题。但是在浏览器环境中，同步加载模块可能会导致页面的长时间阻塞，影响用户体验。</p>\n</li>\n<li><p>作用域和模块独立性</p>\n<ul>\n<li><strong>模块级别的作用域</strong>：和 ES Modules 类似，CommonJS 模块也有自己独立的作用域。模块内部的变量和函数不会自动暴露到全局环境中，这有助于保持代码的模块化。例如，在一个 CommonJS 模块内部定义的变量<code>var internalVariable = &#39;This is internal&#39;;</code>不会在其他模块中直接可见。</li>\n<li><strong>值传递特性</strong>：当一个模块通过<code>require</code>导入另一个模块的内容时，实际上是对<code>module.exports</code>内容的复制（对于基本类型是值复制，对于对象类型是引用复制）。例如，如果一个模块导出了一个对象<code>module.exports = &#123; count: 0 &#125;;</code>，另一个模块导入这个对象后<code>const myObject = require(&#39;./myObjectModule.js&#39;);</code>，当在第一个模块中修改<code>myObject.count</code>的值时，在第二个模块中这个值也会改变（因为对象是引用类型）。但是如果在第一个模块中重新赋值<code>module.exports</code>（如<code>module.exports = &#123; newCount: 1 &#125;;</code>），在第二个模块中<code>myObject</code>的值不会随之改变，因为这是一种值传递的关系。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>简化 module.exports 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于存储已经加载过的模块，避免重复加载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadedModules = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">require</span>(<span class=\"params\">modulePath</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据传递的模块路径，得到模块的绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleId = <span class=\"title function_\">getModuleId</span>(modulePath)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否已有缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loadedModules[modulePath]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadedModules[modulePath].<span class=\"property\">exports</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 导入的模块将会复制到 _require 函数中，模块的执行上下文将会存在该函数的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_require</span>(<span class=\"params\"><span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标模块的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个模块对象，包含 exports 属性用于存储要导出的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = &#123; <span class=\"attr\">exports</span>: &#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">exports</span> = <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> __filename = moduleId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> __dirname = <span class=\"title function_\">getDirname</span>(__filename)</span><br><span class=\"line\"></span><br><span class=\"line\">  _require.<span class=\"title function_\">call</span>(<span class=\"built_in\">exports</span>, <span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将模块添加到已加载模块列表中，虽然此时 exports 还为空，但避免后续重复创建模块对象</span></span><br><span class=\"line\">  loadedModules[modulePath] = <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>promise 的链式调用</p>\n<ul>\n<li><code>Promise.all()</code>中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败；</li>\n<li><code>Promise.race()</code>中的 Promise 序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败；</li>\n<li><code>Promise.any()</code>中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">myAll</span> = <span class=\"keyword\">function</span>(<span class=\"params\">proms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resolve, reject</span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123; resolve = res, reject = rej &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>, res = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prom <span class=\"keyword\">of</span> proms) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = len;</span><br><span class=\"line\">    len ++</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(prom).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res[index] = data</span><br><span class=\"line\">      len --;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, reject)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">myAll</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">3</span>), <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">4</span>), <span class=\"number\">5</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(datas)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err) <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">myAll</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>), <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>), <span class=\"number\">5</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(datas) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;promise1&#x27;</span>), <span class=\"number\">1001</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;promise2&#x27;</span>), <span class=\"number\">1000</span>) &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1, promise2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// promise2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">any</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = index</span><br><span class=\"line\">      index ++</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        count ++</span><br><span class=\"line\">        result[i] = err</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p1&#x27;</span>), <span class=\"number\">1001</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p2&#x27;</span>), <span class=\"number\">1000</span>) &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>([p1, p2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>, err))</span><br></pre></td></tr></table></figure>\n\n<p>并发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(url)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">urls, max_count, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>, count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_request</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = index</span><br><span class=\"line\">      index ++</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &gt;= urls.<span class=\"property\">length</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(urls[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = res</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = err</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        count ++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == urls.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt; urls.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">_request</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; max_count &amp;&amp; i &lt; urls.<span class=\"property\">length</span>; ++ i) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">_request</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">request</span>([<span class=\"string\">&#x27;https://cn.bing.com/search?q=1&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=2&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=3&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=4&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=5&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=6&#x27;</span>, </span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=7&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=8&#x27;</span>], <span class=\"number\">4</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"链式调用和延迟执行\"><a href=\"#链式调用和延迟执行\" class=\"headerlink\" title=\"链式调用和延迟执行\"></a>链式调用和延迟执行</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrange</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_do</span>(<span class=\"params\">do_str</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(do_str))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">wait</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;wait&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">      &#125;, delay * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;) )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">waitFirst</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">unshift</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;waitFirst&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">      &#125;, delay * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">execute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> task <span class=\"keyword\">of</span> queue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    execute,</span><br><span class=\"line\">    <span class=\"attr\">do</span>: _do,</span><br><span class=\"line\">    wait,</span><br><span class=\"line\">    waitFirst</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).do(&#x27;commit&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).wait(5).do(&#x27;commit&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"title function_\">arrange</span>(<span class=\"string\">&#x27;William&#x27;</span>).<span class=\"title function_\">waitFirst</span>(<span class=\"number\">5</span>).<span class=\"title function_\">do</span>(<span class=\"string\">&#x27;push&#x27;</span>).<span class=\"title function_\">execute</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象原型链-prototype，-proto\"><a href=\"#对象原型链-prototype，-proto\" class=\"headerlink\" title=\"对象原型链 prototype， __proto__\"></a>对象原型链 prototype， <code>__proto__</code></h2><p><img src=\"H:\\知识网络\\面试\\前端方向\\study\\imgs\\原型链\" alt=\"1733582096968\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">// 类本身存在 prototype，通过该类创建的对象的 __proto__ 对象指向 prototype</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span>)      <span class=\"comment\">// &#123; name: &#x27;lili&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == <span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>) <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Object-方法\"><a href=\"#Object-方法\" class=\"headerlink\" title=\"Object 方法\"></a>Object 方法</h2><p>Object.assign()，Object函数，获取对象的类型 instanceof，使对象属性不可变（writeable&#x3D;false，configurable&#x3D;false，Object.preventExtensions()，Object.seal()，Object.freeze()）</p>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>示例</th>\n<th>函数中 this 指向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过 new 调用</td>\n<td>new method()</td>\n<td>新对象</td>\n</tr>\n<tr>\n<td>直接调用</td>\n<td>method()</td>\n<td>全局对象</td>\n</tr>\n<tr>\n<td>通过对象调用</td>\n<td>obj.method()</td>\n<td>前面的对象</td>\n</tr>\n<tr>\n<td>call, apply, bind</td>\n<td>method.call(ctx)</td>\n<td>第一个参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"XMLHttpRequest-和-Fetch\"><a href=\"#XMLHttpRequest-和-Fetch\" class=\"headerlink\" title=\"XMLHttpRequest 和 Fetch\"></a>XMLHttpRequest 和 Fetch</h2><p>Reflect</p>\n<p>线程进程共享资源</p>\n<p>跨域解决方案</p>\n<p>dom、bom</p>\n<p>loader实现原理、eslint实现原理</p>\n<p>js 调用执行栈</p>\n<p>js 作用域</p>\n<p>TCP&#x2F;IP 协议</p>\n<p>计算机网络、操作系统</p>\n<p>死锁，如何解除死锁</p>\n<p>Symbol、DefineProperty、Proxy，Object.property.hasOwnProperty()</p>\n<p>浏览器加载HTML过程（重排、重绘）HTML+CSS + Javascript （JS是否会阻塞渲染队列）</p>\n<p>script标签的属性</p>\n<p>less、scss、css， 以及css-loader</p>\n<p>use strict</p>\n<p>vuex module, pinia</p>\n<p>设计模式</p>\n<p>MVVM、MVC</p>\n<p>js内存回收机制</p>\n<p>http 三次握手四次挥手</p>\n<p>websocket</p>\n<p>性能优化</p>\n<p>webpack、vite（esbuild、rollup）</p>\n<p>setup 和 setup函数</p>\n<p>vue, react 声明周期</p>\n<p>响应式原理、双向绑定（this.nextTick(), this.$set(), Object.defineProperty()）</p>\n<p>render 函数和 diff 算法</p>\n<h2 id=\"apply-call-函数\"><a href=\"#apply-call-函数\" class=\"headerlink\" title=\"apply &amp; call 函数\"></a>apply &amp; call 函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">testCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">_this, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">  _this.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  _this.<span class=\"title function_\">fn</span>(args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; data !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">        res[key] = <span class=\"title function_\">deepCopy</span>(data[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;jock&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">func</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"title function_\">deepCopy</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"property\">func</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"property\">age</span> = <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    age: 18,</span></span><br><span class=\"line\"><span class=\"comment\">//    name: &#x27;jock&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//    info: &#123; addr: &#x27;abc&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//    func: [Function: func]</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\">a.<span class=\"title function_\">func</span>() <span class=\"comment\">// 19</span></span><br><span class=\"line\">b.<span class=\"title function_\">func</span>() <span class=\"comment\">// jock</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>JavaScript 闭包的设计思想来源于 Scheme</p>\n<ul>\n<li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包</li>\n<li>闭包可以让你在一个内层函数中访问到外层函数的作用域</li>\n<li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来</li>\n</ul>\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>当使用按钮点击或者输入框事件监听时，<code>onclick</code> 或 <code>oninput</code> 函数将会被频繁触发，为了解决这一问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">callback, delay=<span class=\"number\">1000</span>, immidate=<span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_debounce</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer != <span class=\"literal\">null</span>) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      immidate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      <span class=\"comment\">// callback(args)</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _debounce</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>在固定的时间段内只会执行一次，不管触发了多少次。例如子弹射击游戏中，射击按键可能会快，执行射击不会一直往后延迟，而会在固定的频率下执行射击动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">callback, interval, immidate = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start_time = <span class=\"number\">0</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_throttle</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">false</span> &amp;&amp; start_time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest_time = interval - (now_time - start_time)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest_time &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _throttle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尾部执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">callback, interval, immidate = <span class=\"literal\">true</span>, trailing = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start_time = <span class=\"number\">0</span>  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_throttle</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">false</span> &amp;&amp; start_time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest_time = interval - (now_time - start_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest_time &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trailing &amp;&amp; timer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        start_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">        callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      &#125;, rest_time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _throttle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addMethod</span>(<span class=\"params\">obj, name, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> old = obj[name]</span><br><span class=\"line\">  obj[name] = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> == fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> old === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> old.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one argument function, argument: &#x27;</span>, a)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two arguments function, argument: &#x27;</span>, a, b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>() <span class=\"comment\">// no argument function</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">// one argument function, argument:  1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// two arguments function, argument:  1 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码存在一些问题：</p>\n<ul>\n<li><p>当存在默认参数时，会失效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one argument function, argument: &#x27;</span>, a)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two arguments function, argument: &#x27;</span>, a, b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>() <span class=\"comment\">// one argument function, argument:  1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// two arguments function, argument:  1 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当同为一个参数，但参数类型不一致也会失效</p>\n</li>\n</ul>\n<p>改进后的函数重载方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createOverload</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">overload</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = args.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> <span class=\"keyword\">typeof</span> arg).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = map.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;no implement function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  overload.<span class=\"property\">addImpl</span> = <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;last argument must be function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = args.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    map.<span class=\"title function_\">set</span>(key, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> overload</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun = <span class=\"title function_\">createOverload</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one number argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one string argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"string\">&#x27;string&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two string arguments function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>() <span class=\"comment\">// no argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">123</span>) <span class=\"comment\">// one number argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;str&#x27;</span>) <span class=\"comment\">// one string argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;str1&#x27;</span>, <span class=\"string\">&#x27;str2&#x27;</span>) <span class=\"comment\">// two string arguments function</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给-fetch-添加超时时间\"><a href=\"#给-fetch-添加超时时间\" class=\"headerlink\" title=\"给 fetch 添加超时时间\"></a>给 fetch 添加超时时间</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createRequestWithTimeout</span>(<span class=\"params\">timeout = <span class=\"number\">3000</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">url, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> abort = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>()</span><br><span class=\"line\">      options = options || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.<span class=\"property\">signal</span>) &#123;</span><br><span class=\"line\">        options.<span class=\"property\">signal</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;abort&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          abort.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        options.<span class=\"property\">signal</span> = abort.<span class=\"property\">signal</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;timeout&#x27;</span>))</span><br><span class=\"line\">        abort.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">      &#125;, timeout)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(url, options).<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetch</span> = (<span class=\"params\">url, options</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(url)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"title function_\">createRequestWithTimeout</span>()</span><br><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"大整数相加\"><a href=\"#大整数相加\" class=\"headerlink\" title=\"大整数相加\"></a>大整数相加</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; a </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; b </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">String</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a.<span class=\"property\">length</span>, b.<span class=\"property\">length</span>)</span><br><span class=\"line\">  a = a.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  b = b.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> carry = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; -- i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"built_in\">parseInt</span>(a[i]) + <span class=\"built_in\">parseInt</span>(b[i]) + carry</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      carry = <span class=\"number\">1</span></span><br><span class=\"line\">      sum = sum - <span class=\"number\">10</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      carry = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = sum + result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">&#x27;1&#x27;</span> + result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;1234567891011121314&#x27;</span>, <span class=\"string\">&#x27;3333333333333333333333333333&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 3333333334567901224344454647</span></span><br><span class=\"line\"></span><br><span class=\"line\">res = <span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;999&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1122</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"任务队列的中断和恢复\"><a href=\"#任务队列的中断和恢复\" class=\"headerlink\" title=\"任务队列的中断和恢复\"></a>任务队列的中断和恢复</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 依次顺序执行一系列任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有任务全部完成后可以得到每个任务的执行结果</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要返回两个方法，start 用于启动任务，pause 用于暂停任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个人物具有原子性，即不可终端，只能在两个任务之间中断</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">...any</span>&#125; tasks 任务列表，每个任务无参，异步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processTasks</span>(<span class=\"params\">...tasks</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"title function_\">async</span> (resolve) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRunning) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isRunning = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; tasks.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the <span class=\"subst\">$&#123;i&#125;</span> task is running`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> tasks[i]()</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the <span class=\"subst\">$&#123;i&#125;</span> task is finished`</span>)</span><br><span class=\"line\">          result.<span class=\"title function_\">push</span>(res)</span><br><span class=\"line\">          i ++</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isRunning == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">pause</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除异步任务的传递性：\"><a href=\"#消除异步任务的传递性：\" class=\"headerlink\" title=\"消除异步任务的传递性：\"></a>消除异步任务的传递性：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test1</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test2</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test3</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldFetch = globalThis.<span class=\"property\">fetch</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = &#123;<span class=\"attr\">status</span>: <span class=\"string\">&#x27;pending&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newFetch = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache.<span class=\"property\">status</span> == <span class=\"string\">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cache.<span class=\"property\">status</span> == <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"title function_\">oldFetch</span>(...args).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cache.<span class=\"property\">status</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">      cache.<span class=\"property\">value</span> = res</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cache.<span class=\"property\">status</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">      cache.<span class=\"property\">value</span> = err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> promise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fetch</span> = newFetch</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">      e.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        globalThis.<span class=\"property\">fetch</span> = newFetch</span><br><span class=\"line\">        <span class=\"title function_\">func</span>()</span><br><span class=\"line\">        globalThis.<span class=\"property\">fetch</span> = oldFetch</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  globalThis.<span class=\"property\">fetch</span> = oldFetch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">globalThis.<span class=\"property\">fetch</span> = <span class=\"title function_\">async</span> (...args) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"function\">() =&gt;</span> args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(main)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>基本数据类型：number、string、undefined、null、boolean、symbol</p>\n<p>引用数据类型：Array、Object、Function、Date、Regex</p>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><p>let 和 const</p>\n<ul>\n<li>全局定义的变量不再作为属性添加到全局对象中</li>\n<li>在变量定义之前使用它会报错</li>\n<li>不可重复定义同名变量</li>\n<li>使用 const 定义变量时，必须初始化</li>\n<li>变量具有会计作用域，在代码块之外不可以使用<ul>\n<li>在 for 循环中使用 let 定义变量，变量所在的作用域是循环体，也因此在循环外不能使用。</li>\n<li>另外 for 循环会对该变量做特殊处理，让每次循环使用的都是一个独立的循环变量，这可以解决 JS 由来已久的问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"class-和-function-：\"><a href=\"#class-和-function-：\" class=\"headerlink\" title=\"class 和 function ：\"></a>class 和 function ：</h2><p><strong>相同点：</strong></p>\n<ol>\n<li>class 和 function 都可以作为构造函数，通过 new 操作符来实例化。 </li>\n<li>类可以包含构造函数方法、实例方法、setter 函数、getter 函数和静态类方法，但这些 <strong>都不是</strong> 必须的。</li>\n</ol>\n<p><strong>不同点：</strong></p>\n<ol>\n<li><p>class 构造函数必须使用 new 操作符</p>\n</li>\n<li><p>class 声明不可以提升</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1) <span class=\"comment\">// Person &#123; name: &#x27;person1&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>) <span class=\"comment\">// ReferenceError: Cannot access &#x27;Person&#x27; before initialization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class 不可以用 call、apply、bind 改变执行上下文</p>\n</li>\n</ol>\n<p><strong>node 事件循环和浏览器事件循环区别</strong> </p>\n<p><strong>组合式 和 声明式 api 他们之间冲突，会优先使用哪个？</strong> </p>\n<p>如何将响应式数据变为非响应式</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">signle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_signle</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj = o</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _signle</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> signleObj = <span class=\"title function_\">signle</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title function_\">signleObj</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"title function_\">signleObj</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == b) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a: &#x27;</span>, a) <span class=\"comment\">// a:  &#123; name: &#x27;lili&#x27;, age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b: &#x27;</span>, b) <span class=\"comment\">// b:  &#123; name: &#x27;lili&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"手写-call、apply、bind\"><a href=\"#手写-call、apply、bind\" class=\"headerlink\" title=\"手写 call、apply、bind\"></a>手写 call、apply、bind</h2><ul>\n<li><code>call</code> 是一个一个地传递参数</li>\n<li><code>apply</code> 是通过数组来传递参数</li>\n<li><code>bind</code> 方法在创建新函数时可以预先传递部分参数，后续调用新函数时再传递剩余参数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(obj, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(obj, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bindTest = test.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"title function_\">bindTest</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>**test 函数 ** </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>手写 call</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">obj, ...args</span>) &#123;</span><br><span class=\"line\">  obj = obj == <span class=\"literal\">null</span> || obj == <span class=\"literal\">undefined</span>? globalThis : <span class=\"title class_\">Object</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;key&#x27;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  obj[key] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = obj[key](...args)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn] &#125; [ 1, 2, 3 ]</span></span><br><span class=\"line\">test.<span class=\"title function_\">myCall</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn], [Symbol(key)]: [Function: test] &#125; [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>手写 bind 函数</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">obj, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;fn&#x27;</span>)</span><br><span class=\"line\">    obj[key] = that</span><br><span class=\"line\">    <span class=\"comment\">// Object.defineProperty(obj, key, that)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123; <span class=\"comment\">// 是否通过 new 关键字调用，当通过 new 调用时：[Function (anonymous)]， 当之间调用时：undefined</span></span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> obj[key](...args, ...rest)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = obj[key](...args, ...rest)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testBind = test.<span class=\"title function_\">myBind</span>(obj, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"title function_\">testBind</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27;, fn: [Function: fn], [Symbol(fn)]: [Function: test] &#125; [ 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"global-和-window\"><a href=\"#global-和-window\" class=\"headerlink\" title=\"global 和 window\"></a>global 和 window</h2><ul>\n<li><strong>使用环境不同</strong>：<code>window</code> 主要用于浏览器环境，而 <code>global</code> 主要用于 Node.js 环境。这是它们最本质的区别，因为它们分别对应了不同的 JavaScript 运行平台。</li>\n<li><strong>功能内容不同：</strong> <ul>\n<li><code>window</code> 包含了许多与浏览器操作相关的属性和方法，如 DOM 操作、浏览器窗口控制、定时器等，这些功能是为了实现网页的展示和交互。</li>\n<li><code>global</code> 主要围绕 Node.js 的模块系统和服务器端运行相关的一些功能，如模块加载等。虽然它也作为全局变量和函数的挂载点，但具体的功能实现和 <code>window</code> 有很大差异。</li>\n</ul>\n</li>\n<li><strong>对象属性差异</strong>：在浏览器环境中，<code>window</code> 对象具有非常丰富的属性，其中一些属性在 Node.js 的 <code>global</code> 对象中是不存在的，反之亦然。<ul>\n<li><code>window</code> 有 <code>location</code> 属性用于获取和设置浏览器的 URL 相关信息而 <code>global</code> 在 Node.js 环境中没有这个属性；</li>\n<li><code>global</code> 中的 <code>require</code> 属性用于模块加载，在浏览器环境的 <code>window</code> 对象中通常没有（除非通过一些特殊的构建工具或者浏览器扩展等方式引入类似功能）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ES-Modules、CommonJS\"><a href=\"#ES-Modules、CommonJS\" class=\"headerlink\" title=\"ES Modules、CommonJS\"></a>ES Modules、CommonJS</h2><ul>\n<li><p>ES Modules 模块加载机制</p>\n<ul>\n<li><strong>静态分析</strong>：ES Modules 的一个重要特性是在编译阶段就进行模块依赖关系的静态分析。这意味着在代码执行之前，JavaScript 引擎就能确定模块之间的依赖关系。例如，在解析<code>import</code>语句时，会根据模块路径找到对应的模块文件，并分析其中的导出内容。这种静态分析有助于进行一些优化，比如在打包工具（如 Webpack）中，可以提前确定模块的依赖树，进行代码的合并、压缩等操作，减少浏览器加载时的请求数量。</li>\n<li><strong>异步加载特性</strong>：在浏览器环境中，ES Modules 天然支持异步加载。当浏览器遇到<code>import</code>语句时，它会异步地请求模块文件，不会阻塞后续代码的执行（只要后续代码不依赖于这个还未加载完成的模块）。这与浏览器的异步加载资源的特性相匹配，能够更好地利用浏览器的多线程加载能力，提高网页的加载性能。在 Node.js 环境中，虽然底层实现上也是异步加载，但在实际使用中，可能需要一些配置或者工具支持来更好地发挥其异步加载的优势。</li>\n</ul>\n</li>\n<li><p>作用域和模块独立性</p>\n<ul>\n<li><strong>严格的模块边界</strong>：每个 ES 模块都有自己独立的作用域，模块内部定义的变量、函数等不会自动暴露到全局环境中。这有效地避免了全局变量的污染，使得代码的模块化更加清晰。例如，在一个模块中定义的变量<code>let privateVariable = &#39;This is private&#39;;</code>在其他模块中无法直接访问，除非通过该模块的导出机制。</li>\n<li><strong>导入绑定的特性</strong>：当从一个模块导入内容到另一个模块时，导入的变量实际上是一种绑定关系。例如，如果一个模块导出了一个变量<code>export let counter = 0;</code>，另一个模块导入了这个变量<code>import &#123; counter &#125; from &#39;./counterModule.js&#39;;</code>，当在第一个模块中修改<code>counter</code>的值时，在第二个模块中这个变量的值也会相应改变。这种绑定是基于引用的，并且是只读的（不能在导入模块中直接重新赋值给导入的变量，如<code>counter = 1;</code>会报错，但可以通过调用第一个模块提供的修改函数来间接改变变量的值）。</li>\n</ul>\n</li>\n<li><p>CommonJS 模块加载机制</p>\n<ul>\n<li><p><strong>同步加载</strong>：CommonJS 模块加载是同步的。当执行<code>require</code>函数时，JavaScript 执行会暂停，等待被请求的模块加载完成并返回其<code>module.exports</code>的内容。这种同步加载方式在服务器端环境（如 Node.js）是比较合理的，因为在服务器启动阶段，模块的加载顺序和完整性很重要，而且服务器环境通常不会有像浏览器那样对加载时间非常敏感的用户体验问题。但是在浏览器环境中，同步加载模块可能会导致页面的长时间阻塞，影响用户体验。</p>\n</li>\n<li><p>作用域和模块独立性</p>\n<ul>\n<li><strong>模块级别的作用域</strong>：和 ES Modules 类似，CommonJS 模块也有自己独立的作用域。模块内部的变量和函数不会自动暴露到全局环境中，这有助于保持代码的模块化。例如，在一个 CommonJS 模块内部定义的变量<code>var internalVariable = &#39;This is internal&#39;;</code>不会在其他模块中直接可见。</li>\n<li><strong>值传递特性</strong>：当一个模块通过<code>require</code>导入另一个模块的内容时，实际上是对<code>module.exports</code>内容的复制（对于基本类型是值复制，对于对象类型是引用复制）。例如，如果一个模块导出了一个对象<code>module.exports = &#123; count: 0 &#125;;</code>，另一个模块导入这个对象后<code>const myObject = require(&#39;./myObjectModule.js&#39;);</code>，当在第一个模块中修改<code>myObject.count</code>的值时，在第二个模块中这个值也会改变（因为对象是引用类型）。但是如果在第一个模块中重新赋值<code>module.exports</code>（如<code>module.exports = &#123; newCount: 1 &#125;;</code>），在第二个模块中<code>myObject</code>的值不会随之改变，因为这是一种值传递的关系。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>简化 module.exports 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于存储已经加载过的模块，避免重复加载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadedModules = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">require</span>(<span class=\"params\">modulePath</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据传递的模块路径，得到模块的绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleId = <span class=\"title function_\">getModuleId</span>(modulePath)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否已有缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loadedModules[modulePath]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadedModules[modulePath].<span class=\"property\">exports</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 导入的模块将会复制到 _require 函数中，模块的执行上下文将会存在该函数的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_require</span>(<span class=\"params\"><span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标模块的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个模块对象，包含 exports 属性用于存储要导出的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = &#123; <span class=\"attr\">exports</span>: &#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">exports</span> = <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> __filename = moduleId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> __dirname = <span class=\"title function_\">getDirname</span>(__filename)</span><br><span class=\"line\"></span><br><span class=\"line\">  _require.<span class=\"title function_\">call</span>(<span class=\"built_in\">exports</span>, <span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将模块添加到已加载模块列表中，虽然此时 exports 还为空，但避免后续重复创建模块对象</span></span><br><span class=\"line\">  loadedModules[modulePath] = <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>promise 的链式调用</p>\n<ul>\n<li><code>Promise.all()</code>中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败；</li>\n<li><code>Promise.race()</code>中的 Promise 序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败；</li>\n<li><code>Promise.any()</code>中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">myAll</span> = <span class=\"keyword\">function</span>(<span class=\"params\">proms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resolve, reject</span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123; resolve = res, reject = rej &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>, res = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prom <span class=\"keyword\">of</span> proms) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = len;</span><br><span class=\"line\">    len ++</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(prom).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res[index] = data</span><br><span class=\"line\">      len --;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, reject)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">myAll</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">3</span>), <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">4</span>), <span class=\"number\">5</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(datas)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err) <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">myAll</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>), <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>), <span class=\"number\">5</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(datas) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;promise1&#x27;</span>), <span class=\"number\">1001</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;promise2&#x27;</span>), <span class=\"number\">1000</span>) &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1, promise2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// promise2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">any</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = index</span><br><span class=\"line\">      index ++</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        count ++</span><br><span class=\"line\">        result[i] = err</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p1&#x27;</span>), <span class=\"number\">1001</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p2&#x27;</span>), <span class=\"number\">1000</span>) &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>([p1, p2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>, err))</span><br></pre></td></tr></table></figure>\n\n<p>并发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(url)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">urls, max_count, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>, count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_request</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = index</span><br><span class=\"line\">      index ++</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &gt;= urls.<span class=\"property\">length</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(urls[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = res</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = err</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        count ++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == urls.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt; urls.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">_request</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; max_count &amp;&amp; i &lt; urls.<span class=\"property\">length</span>; ++ i) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">_request</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">request</span>([<span class=\"string\">&#x27;https://cn.bing.com/search?q=1&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=2&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=3&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=4&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=5&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=6&#x27;</span>, </span><br><span class=\"line\">          <span class=\"string\">&#x27;https://cn.bing.com/search?q=7&#x27;</span>, <span class=\"string\">&#x27;https://cn.bing.com/search?q=8&#x27;</span>], <span class=\"number\">4</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"链式调用和延迟执行\"><a href=\"#链式调用和延迟执行\" class=\"headerlink\" title=\"链式调用和延迟执行\"></a>链式调用和延迟执行</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrange</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_do</span>(<span class=\"params\">do_str</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(do_str))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">wait</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;wait&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">      &#125;, delay * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;) )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">waitFirst</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    queue.<span class=\"title function_\">unshift</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;waitFirst&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">      &#125;, delay * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">execute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> task <span class=\"keyword\">of</span> queue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    execute,</span><br><span class=\"line\">    <span class=\"attr\">do</span>: _do,</span><br><span class=\"line\">    wait,</span><br><span class=\"line\">    waitFirst</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).do(&#x27;commit&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"comment\">// arrange(&#x27;William&#x27;).wait(5).do(&#x27;commit&#x27;).execute()</span></span><br><span class=\"line\"><span class=\"title function_\">arrange</span>(<span class=\"string\">&#x27;William&#x27;</span>).<span class=\"title function_\">waitFirst</span>(<span class=\"number\">5</span>).<span class=\"title function_\">do</span>(<span class=\"string\">&#x27;push&#x27;</span>).<span class=\"title function_\">execute</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象原型链-prototype，-proto\"><a href=\"#对象原型链-prototype，-proto\" class=\"headerlink\" title=\"对象原型链 prototype， __proto__\"></a>对象原型链 prototype， <code>__proto__</code></h2><p><img src=\"H:\\知识网络\\面试\\前端方向\\study\\imgs\\原型链\" alt=\"1733582096968\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lili&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">// 类本身存在 prototype，通过该类创建的对象的 __proto__ 对象指向 prototype</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// &#123; name: &#x27;lili&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span>)      <span class=\"comment\">// &#123; name: &#x27;lili&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == <span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>) <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Object-方法\"><a href=\"#Object-方法\" class=\"headerlink\" title=\"Object 方法\"></a>Object 方法</h2><p>Object.assign()，Object函数，获取对象的类型 instanceof，使对象属性不可变（writeable&#x3D;false，configurable&#x3D;false，Object.preventExtensions()，Object.seal()，Object.freeze()）</p>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>示例</th>\n<th>函数中 this 指向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过 new 调用</td>\n<td>new method()</td>\n<td>新对象</td>\n</tr>\n<tr>\n<td>直接调用</td>\n<td>method()</td>\n<td>全局对象</td>\n</tr>\n<tr>\n<td>通过对象调用</td>\n<td>obj.method()</td>\n<td>前面的对象</td>\n</tr>\n<tr>\n<td>call, apply, bind</td>\n<td>method.call(ctx)</td>\n<td>第一个参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"XMLHttpRequest-和-Fetch\"><a href=\"#XMLHttpRequest-和-Fetch\" class=\"headerlink\" title=\"XMLHttpRequest 和 Fetch\"></a>XMLHttpRequest 和 Fetch</h2><p>Reflect</p>\n<p>线程进程共享资源</p>\n<p>跨域解决方案</p>\n<p>dom、bom</p>\n<p>loader实现原理、eslint实现原理</p>\n<p>js 调用执行栈</p>\n<p>js 作用域</p>\n<p>TCP&#x2F;IP 协议</p>\n<p>计算机网络、操作系统</p>\n<p>死锁，如何解除死锁</p>\n<p>Symbol、DefineProperty、Proxy，Object.property.hasOwnProperty()</p>\n<p>浏览器加载HTML过程（重排、重绘）HTML+CSS + Javascript （JS是否会阻塞渲染队列）</p>\n<p>script标签的属性</p>\n<p>less、scss、css， 以及css-loader</p>\n<p>use strict</p>\n<p>vuex module, pinia</p>\n<p>设计模式</p>\n<p>MVVM、MVC</p>\n<p>js内存回收机制</p>\n<p>http 三次握手四次挥手</p>\n<p>websocket</p>\n<p>性能优化</p>\n<p>webpack、vite（esbuild、rollup）</p>\n<p>setup 和 setup函数</p>\n<p>vue, react 声明周期</p>\n<p>响应式原理、双向绑定（this.nextTick(), this.$set(), Object.defineProperty()）</p>\n<p>render 函数和 diff 算法</p>\n<h2 id=\"apply-call-函数\"><a href=\"#apply-call-函数\" class=\"headerlink\" title=\"apply &amp; call 函数\"></a>apply &amp; call 函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">testCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">_this, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">  _this.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  _this.<span class=\"title function_\">fn</span>(args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; data !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">        res[key] = <span class=\"title function_\">deepCopy</span>(data[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;jock&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">func</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"title function_\">deepCopy</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"property\">func</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"property\">age</span> = <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    age: 18,</span></span><br><span class=\"line\"><span class=\"comment\">//    name: &#x27;jock&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//    info: &#123; addr: &#x27;abc&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//    func: [Function: func]</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\">a.<span class=\"title function_\">func</span>() <span class=\"comment\">// 19</span></span><br><span class=\"line\">b.<span class=\"title function_\">func</span>() <span class=\"comment\">// jock</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>JavaScript 闭包的设计思想来源于 Scheme</p>\n<ul>\n<li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包</li>\n<li>闭包可以让你在一个内层函数中访问到外层函数的作用域</li>\n<li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来</li>\n</ul>\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>当使用按钮点击或者输入框事件监听时，<code>onclick</code> 或 <code>oninput</code> 函数将会被频繁触发，为了解决这一问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">callback, delay=<span class=\"number\">1000</span>, immidate=<span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_debounce</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer != <span class=\"literal\">null</span>) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      immidate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      <span class=\"comment\">// callback(args)</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _debounce</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>在固定的时间段内只会执行一次，不管触发了多少次。例如子弹射击游戏中，射击按键可能会快，执行射击不会一直往后延迟，而会在固定的频率下执行射击动作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">callback, interval, immidate = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start_time = <span class=\"number\">0</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_throttle</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">false</span> &amp;&amp; start_time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest_time = interval - (now_time - start_time)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest_time &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _throttle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尾部执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">callback, interval, immidate = <span class=\"literal\">true</span>, trailing = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start_time = <span class=\"number\">0</span>  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_throttle</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immidate === <span class=\"literal\">false</span> &amp;&amp; start_time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest_time = interval - (now_time - start_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest_time &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      start_time = now_time</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trailing &amp;&amp; timer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        start_time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">        callback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      &#125;, rest_time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _throttle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addMethod</span>(<span class=\"params\">obj, name, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> old = obj[name]</span><br><span class=\"line\">  obj[name] = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> == fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> old === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> old.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one argument function, argument: &#x27;</span>, a)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two arguments function, argument: &#x27;</span>, a, b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>() <span class=\"comment\">// no argument function</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">// one argument function, argument:  1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// two arguments function, argument:  1 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码存在一些问题：</p>\n<ul>\n<li><p>当存在默认参数时，会失效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one argument function, argument: &#x27;</span>, a)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addMethod</span>(obj, <span class=\"string\">&#x27;getUser&#x27;</span>, <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two arguments function, argument: &#x27;</span>, a, b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>() <span class=\"comment\">// one argument function, argument:  1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">obj.<span class=\"title function_\">getUser</span>(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>) <span class=\"comment\">// two arguments function, argument:  1 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当同为一个参数，但参数类型不一致也会失效</p>\n</li>\n</ul>\n<p>改进后的函数重载方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createOverload</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">overload</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = args.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> <span class=\"keyword\">typeof</span> arg).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = map.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;no implement function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  overload.<span class=\"property\">addImpl</span> = <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;last argument must be function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = args.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    map.<span class=\"title function_\">set</span>(key, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> overload</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun = <span class=\"title function_\">createOverload</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;no argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one number argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;one string argument function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun.<span class=\"title function_\">addImpl</span>(<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"string\">&#x27;string&#x27;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;two string arguments function&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>() <span class=\"comment\">// no argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">123</span>) <span class=\"comment\">// one number argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;str&#x27;</span>) <span class=\"comment\">// one string argument function</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;str1&#x27;</span>, <span class=\"string\">&#x27;str2&#x27;</span>) <span class=\"comment\">// two string arguments function</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给-fetch-添加超时时间\"><a href=\"#给-fetch-添加超时时间\" class=\"headerlink\" title=\"给 fetch 添加超时时间\"></a>给 fetch 添加超时时间</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createRequestWithTimeout</span>(<span class=\"params\">timeout = <span class=\"number\">3000</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">url, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> abort = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>()</span><br><span class=\"line\">      options = options || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.<span class=\"property\">signal</span>) &#123;</span><br><span class=\"line\">        options.<span class=\"property\">signal</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;abort&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          abort.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        options.<span class=\"property\">signal</span> = abort.<span class=\"property\">signal</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;timeout&#x27;</span>))</span><br><span class=\"line\">        abort.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">      &#125;, timeout)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(url, options).<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetch</span> = (<span class=\"params\">url, options</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(url)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"title function_\">createRequestWithTimeout</span>()</span><br><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"大整数相加\"><a href=\"#大整数相加\" class=\"headerlink\" title=\"大整数相加\"></a>大整数相加</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; a </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; b </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">String</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a.<span class=\"property\">length</span>, b.<span class=\"property\">length</span>)</span><br><span class=\"line\">  a = a.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  b = b.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> carry = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; -- i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"built_in\">parseInt</span>(a[i]) + <span class=\"built_in\">parseInt</span>(b[i]) + carry</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      carry = <span class=\"number\">1</span></span><br><span class=\"line\">      sum = sum - <span class=\"number\">10</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      carry = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = sum + result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">&#x27;1&#x27;</span> + result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;1234567891011121314&#x27;</span>, <span class=\"string\">&#x27;3333333333333333333333333333&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 3333333334567901224344454647</span></span><br><span class=\"line\"></span><br><span class=\"line\">res = <span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;999&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1122</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"任务队列的中断和恢复\"><a href=\"#任务队列的中断和恢复\" class=\"headerlink\" title=\"任务队列的中断和恢复\"></a>任务队列的中断和恢复</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 依次顺序执行一系列任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有任务全部完成后可以得到每个任务的执行结果</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要返回两个方法，start 用于启动任务，pause 用于暂停任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个人物具有原子性，即不可终端，只能在两个任务之间中断</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">...any</span>&#125; tasks 任务列表，每个任务无参，异步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processTasks</span>(<span class=\"params\">...tasks</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"title function_\">async</span> (resolve) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRunning) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isRunning = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; tasks.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the <span class=\"subst\">$&#123;i&#125;</span> task is running`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> tasks[i]()</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the <span class=\"subst\">$&#123;i&#125;</span> task is finished`</span>)</span><br><span class=\"line\">          result.<span class=\"title function_\">push</span>(res)</span><br><span class=\"line\">          i ++</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isRunning == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">pause</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      isRunning = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除异步任务的传递性：\"><a href=\"#消除异步任务的传递性：\" class=\"headerlink\" title=\"消除异步任务的传递性：\"></a>消除异步任务的传递性：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test1</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test2</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">test3</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldFetch = globalThis.<span class=\"property\">fetch</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = &#123;<span class=\"attr\">status</span>: <span class=\"string\">&#x27;pending&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newFetch = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache.<span class=\"property\">status</span> == <span class=\"string\">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cache.<span class=\"property\">status</span> == <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"title function_\">oldFetch</span>(...args).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cache.<span class=\"property\">status</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">      cache.<span class=\"property\">value</span> = res</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cache.<span class=\"property\">status</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">      cache.<span class=\"property\">value</span> = err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> promise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fetch</span> = newFetch</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">      e.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        globalThis.<span class=\"property\">fetch</span> = newFetch</span><br><span class=\"line\">        <span class=\"title function_\">func</span>()</span><br><span class=\"line\">        globalThis.<span class=\"property\">fetch</span> = oldFetch</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  globalThis.<span class=\"property\">fetch</span> = oldFetch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">globalThis.<span class=\"property\">fetch</span> = <span class=\"title function_\">async</span> (...args) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"function\">() =&gt;</span> args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(main)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"React 学习笔记","date":"2025-04-19T12:31:42.000Z","_content":"\n# React 学习\n\n\n\n## 第一站\n\n一个简单的例子\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n  \n  <script crossorigin src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n  <script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n  <!-- 添加对 jsx 语法的支持 -->\n  <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n  <script type=\"text/babel\">\n    const app = ReactDOM.createRoot(document.querySelector('#app'))\n    let text = 'Hello World'\n\n    function changeText() {\n      text = 'Hello React'\n      render()\n    }\n\n    function render() {\n      app.render(\n        <div>\n          <h1>{text}</h1>\n          <button onClick={changeText}>Click</button>\n        </div>\n      )\n    }\n\n    render()\n  </script>\n</body>\n</html>\n```\n\n\n\n### 使用类的方式创建组件\n\n```jsx\nimport React, { Component } from \"react\"\nimport About from './About'\n\nexport default class extends Component {\n  constructor() {\n    super()\n    this.state = {\n      message: 'Hello world!',\n      count: 0\n    }\n  }\n\n  componentDidMount() {\n    console.log('after component mount')\n  }\n\n  componentDidUpdate() {\n    console.log('after component update')\n  }\n\n  componentWillUnmount() {\n    console.log('before component unmount')\n  }\n\n  render() {\n    const {count} = this.state\n\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n        <About></About>\n        <h2>{count}</h2>\n        <button onClick={() => this.setState({count: count + 1})}>Add One</button>\n      </div>\n    )\n  }\n}\n```\n\n#### 类组件的声明周期\n\n- construct：在组件被实例化的时候执行\n  - 如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数\n  - 通过给 this.state 赋值对象来初始化内部的 state\n  - 为事件绑定实例（this）\n- render：组件实例化或更新界面中的变量都会被重新执行\n- componentDidMount：组件被挂载后会执行\n  - 依赖于 DOM 的操作可以在这里进行\n  - 在此处发送网络请求就是最好的地方\n  - 可以在此处添加一些订阅（会在 componentWillUnmount 取消订阅）\n- componentDidUpdate：组件被更新后会执行（render 先于此函数执行）\n  - 当组件更新后，可以在此处对 DOM 进行操作\n  - 如果对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）\n- componentWillUnmount：组件被销毁前执行\n  - 在此方法中执行必要的清理操作，例如：清除 timer，取消网络请求或清除在 componentDidMount 中创建的订阅等\n\n#### 父子组件通信\n\nFather component\n\n```jsx\nimport React, { Component } from 'react'\nimport Child from './Child'\n\nexport default class Father extends Component {\n  constructor() {\n    super()\n    this.state = { count: 0 }\n  }\n\n  render() {\n    const { count } = this.state\n    return (\n      <div>\n        <h2>Father</h2>\n        <p>{count}</p>\n\n        <Child data={['father transfer data1', 'father transfer data2']}\n               title={123}\n               changeNumber={(num) => this.setState({count: count + num})} />\n      </div>\n    )\n  }\n}\n```\n\nChild component\n\n```jsx\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Child extends Component {\n  // 可以通过这种方式设置默认值，此设置将会覆盖外部设置的所有默认值\n  static defaultProps = {\n    innerDefaultValue: 'inner default value'\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  addNumber(num) {\n    this.props.changeNumber(num)\n  }\n\n  render() {\n    const {data, title, defaultValue, innerDefaultValue} = this.props\n\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{title}</p>\n        <p>{defaultValue}</p>\n        <p>{innerDefaultValue}</p>\n        <button onClick={() => this.addNumber(1)}>Add 1</button>\n        <button onClick={() => this.addNumber(-1)}>Dec 1</button>\n        <ul>\n          {\n            data?.map(item => <li key={item}>{item}</li>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 未传入属性进行限制\nChild.propTypes = {\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string,\n  changeNumber: PropTypes.func.isRequired\n}\n\n// 设置默认值\n// Child.defaultProps = {\n//   defaultValue: 'default'\n// }\n\nexport default Child\n```\n\n\n\n### 使用函数式定义组件\n\n```jsx\n/*\n  1. 函数组件没有声明周期\n  2. this 关键字不能指向组件实例（因为没有组件实例）\n  3. 没有内部状态\n*/\nexport default function About() {\n  return <div>About</div>\n}\n```\n\n\n\n### 对参数进行校验\n\n对于传递给子组件的数据，有时候我们可能希望进行验证\n\n- 项目中默认继承了 Flow 或者 TypeScript，那么直接就可以进行类型验证\n- 但是，即使我们没有使用 Flow 或者 TypeScript，也可以通过 prop-types 库来进行参数验证\n\n安装 prop-types 库\n\n```bash\nnpm install prop-types -D\n```\n\n在组件传值进行类型限制\n\n```jsx\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Child extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const {data, title, defaultValue} = this.props\n\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{title}</p>\n        <p>{defaultValue}</p>\n        <ul>\n          {\n            data?.map(item => <li key={item}>{item}</li>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 未传入属性进行限制\nChild.propTypes = {\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string\n}\n\n// 设置默认值\nChild.defaultProps = {\n  defaultValue: 'default'\n}\n\nexport default Child\n```\n\n\n\n### 插槽\n\n在插槽组件中拿到 this.props 的 children 属性，该属性包含了父组件在使用该组件传递的元素\n\n插槽组件\n\n```jsx\nimport { Component } from 'react'\n\nimport './index.css'\n\nexport default class extends Component {\n  render() {\n    // 接收参数一\n    // const {children} = this.props\n\n    // return (\n    //   <div className='nav-bar'>\n    //     <div className='left'>{children[0]}</div>\n    //     <div className='center'>{children[1]}</div>\n    //     <div className='right'>{children[2]}</div>\n    //   </div>\n    // )\n\n    // 接收参数二\n    const {leftSlot, centerSlot, rightSlot} = this.props\n    return (\n      <div className='nav-bar'>\n        <div className=\"left\">{leftSlot('left')}</div>\n        <div className=\"center\">{centerSlot}</div>\n        <div className=\"right\">{rightSlot}</div>\n      </div>\n    )\n  }\n}\n```\n\n父组件\n\n```jsx\nimport { Component } from \"react\"\n\nimport NavBar from \"../NavBar\"\n\nexport default class extends Component {\n  render() {\n    // 传递方式一\n    // return (\n    //   <div>\n    //     <h1>Hello world</h1>\n    //     <NavBar>\n    //       {/* 当只传递一个元素时，子元素接收到 children 不为数组，只为该元素 */}\n    //       <button>left button</button>\n    //       <input type=\"text\" />\n    //       <i>三</i>\n    //     </NavBar>\n    //   </div>\n    // )\n\n    // 传递方式二\n    return (\n      <div>\n        <h1>Hello world</h1>\n        {/* 通过使用函数的方式达到作用域插槽的效果 */}\n        <NavBar leftSlot={text => <button>{text}</button>}\n                centerSlot={<input />}\n                rightSlot={<i>三</i>}/>\n      </div> \n    )\n  }\n}\n```\n\n\n\n### 跨组件通信\n\n1. 定义上下文对象\n\n   主题上下文对象\n\n```js\nimport { createContext } from \"react\"\n\n// 设置默认值，当需要使用该上下文的组件并没有被 Provider 包裹时，将会显示该值\nconst ThemeContext = createContext({color: '#999', backgroundColor: '#eee'})\n\nexport default ThemeContext\n```\n\n​\t用户上下文\n\n```jsx\nimport { createContext } from \"react\"\n\nconst UserContext = createContext()\n\nexport default UserContext\n```\n\n1. 在需要传递数据的组件中使用该上下文并传递数据\n\n   ```jsx\n   import { Component } from \"react\"\n   \n   import ThemeContext from './context/ThemeContext'\n   import UserContext from './context/UserContext'\n   import Father from \"./components/Father\"\n   \n   \n   export default class extends Component {\n     render() {\n       return (\n         <div>\n           <h1>Hello world</h1>\n           {/* 将需要使用到该上下文的元素使用 Provider 包裹，并传入 value */}\n           <UserContext.Provider value={{username: 'zhangsan', age: 18}}>\n             <ThemeContext.Provider value={{color: 'red', backgroundColor: '#9900aa'}}>\n               <Father />\n             </ThemeContext.Provider>\n           </UserContext.Provider>\n         </div>\n       )\n     }\n   }\n   ```\n\n2. 在需要引用该值的组件中导入该上下文对象，并设置该子组件的 contextTypes 属性为该上下文对象\n\n   ```jsx\n   import React, { Component } from 'react'\n   \n   import ThemeContext from '../../context/ThemeContext'\n   import UserContext from '../../context/UserContext'\n   \n   class Child extends Component {\n     render() {\n       // 获取该上下文对象的所有值\n       const {color, backgroundColor} = this.context\n   \n       return (\n         <div style={{color: color, backgroundColor: backgroundColor}}>\n           <h3>Child</h3>\n           <UserContext.Consumer>\n             {\n               user => {\n                 return (\n                   <ul>\n                     <li>username: {user.username}</li>\n                     <li>age: {user.age}</li>\n                   </ul>\n                 )\n               }\n             }\n           </UserContext.Consumer>\n         </div>\n       )\n     }\n   }\n   // 设置该组件的 contextType 为上下文对象\n   Child.contextType = ThemeContext\n   \n   export default Child\n   ```\n\n   在函数式组件中使用该上下文\n\n   ```jsx\n   import ThemeContext from \"../../context/ThemeContext\"\n   \n   function ChildMain () {\n     return(\n       <div>\n         <ThemeContext.Consumer>\n           {\n             value => {\n               return <div style={{color: value.color, backgroundColor: value.backgroundColor}}>\n                 child main\n               </div>\n             }\n           }\n         </ThemeContext.Consumer>\n       </div>\n     )\n   }\n   \n   export default ChildMain\n   ```\n\n   \n\n### 事件总线\n\n事件总线类的定义\n\n```js\nclass EventBus {\n\n  eventList = new Map()\n\n  /**\n   * 触发事件\n   * @param {String} eventName \n   * @param  {...any} args \n   */\n  emit(eventName, ...args) {\n    if (!this.eventList.has(eventName)) {\n      throw new Error('No such event emit')\n    }\n    const funs = this.eventList.get(eventName)\n    for (let fun of funs) {\n      fun(...args)\n    }\n  }\n\n  /**\n   * 监听事件\n   * @param {String} eventName \n   * @param {Function} callback \n   * @param {Object} that \n   */\n  on(eventName, callback, that) {\n    if (this.eventList.has(eventName)) {\n      this.eventList.get(eventName).add(callback.bind(that))\n    } else {\n      this.eventList.set(eventName, new Set([callback.bind(that)]))\n    }\n  }\n\n  /**\n   * 销毁事件\n   * @param {String} eventName \n   */\n  off(eventName) {\n    if (!this.eventList.has(eventName)) {\n      throw new Error('No such event emit')\n    }\n    this.eventList.delete(eventName)\n  }\n}\n\nexport default EventBus\n```\n\n定义一个事件总线类\n\n```js\nimport EventBus from \"@/utils/eventBus\"\n\nexport default new EventBus()\n```\n\n发送事件组件使用 emit 发送事件\n\n```jsx\nimport { Component } from \"react\"\n\nimport eventBus from '@/events/EventBus'\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      title: 'Hello Father'\n    }\n  }\n\n  componentDidMount() {\n    console.log('Father component Mounted')\n  }\n\n  componentDidUpdate() {\n    console.log('Father component Updated')\n  }\n\n  changeTitle() {\n    eventBus.emit('UpdateTitle', {name: 'zhangsan', age: 19})\n    this.setState({\n      title: 'Hello Father Component'\n    })\n  }\n\n  render() {\n    const { title } = this.state\n\n    return (\n      <div>\n        <h2>Father Component</h2>\n        <button onClick={() => this.changeTitle()}>{title}</button>\n      </div>\n    )\n  }\n}\n```\n\n监听事件组件使用 on 监听事件\n\n```jsx\nimport React, { Component } from 'react'\n\nimport Father from '@components/Father'\nimport eventBus from '@/events/EventBus'\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      appName: 'App'\n    }\n  }\n\n  componentDidMount() {\n    console.log('App component Mounted')\n    eventBus.on('UpdateTitle', (args) => {\n      console.log(args)\n      this.setState({\n        appName: 'App Component'\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    console.log('App component updated')\n  }\n\n  render() {\n    const { appName } = this.state\n\n    return (\n      <div>\n        <h1>{appName}</h1>\n        <Father></Father>\n      </div>\n    )\n  }\n}\n```\n\n输出结果\n\n```bash\nFather component Mounted\nApp component Mounted\n{name: 'zhangsan', age: 19}\nFather component Updated\nApp component updated\n```\n\n// TODO 由此可以推断出，挂载组件从内往外，更新组件从外往内\n\n\n\n### setState 函数\n\nsetState 为异步函数，设计为异步函数可以显著提升性能\n\n- 如果每次调用 setState 都进行一次更新，那么意味着 render 函数会被频繁调用，界面重新渲染这样效率很低\n- 最好的办法应该是获取到多个更新，之后进行批量更新\n- 如果同步更新了 state，但是还没有执行 render 函数，那么 state 和 props 不能保持同步\n  - state 和 props 不能保持一致性，在开发过程中产生很多的问题\n\n```jsx\nimport { Component } from \"react\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  addCount() {\n    // 通过回调的方式处理更新的数据\n    this.setState((state, props) => {\n      // 可以编写一些对新的 state 的处理逻辑，\n      // 可以获得之前的 state 和 props 对象\n      console.log(state, props)\n      return {\n        count: state.count + 1\n      }\n    })\n\n    // setState 是一个异步函数，在这个地方将会打印修改之前的 state\n    console.log(this.state)\n\n    // 通过传入回调函数，该回调函数将会在更新之后执行\n    this.setState({\n      count: this.state.count + 1\n    }, () => {\n      // componentDidUpdate 声明周期函数将会先于这个函数执行\n      console.log(this.state)\n    })\n\n    // 在 react 18 之前如下代码（setTimeout 或者 原生 dom 事件中 或者 promise 中）将会输出修改后的，也即 setState 变成同步函数\n    // 在 react 18 及之后，如下代码仍然是异步，输出也是修改前的 count\n    setTimeout(() => {\n      this.setState({count: this.state.count + 1})\n      console.log('setTimeout function', this.state.count)\n    }, 0)\n\n    document.querySelector('button').onclick = () => {\n      this.setState({count: this.state.count + 1})\n      console.log('onclick event', this.state.count)\n    }\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n将 setState 变为同步可以通过 flushSync 函数\n\n```jsx\nimport { Component } from \"react\"\nimport { flushSync } from \"react-dom\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  addCount() { \n    flushSync(() => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    })\n    // 这里将会拿到更新之后的结果\n    console.log(this.state.count)\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n\n\n### SCU（should component update）\n\n```jsx\nimport { Component } from \"react\"\nimport { flushSync } from \"react-dom\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  // 此种方式成为 SCU should component update\n  // 当此函数返回 false 时不会重新渲染，当返回 true 时会重新渲染\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps, nextState, nextProps == this.props, nextState.count == this.state.count)\n    if (nextProps == this.props && nextState.count == this.state.count) {\n      // 不进行重新渲染\n      return false\n    }\n    return true\n  }\n\n  addCount() { \n    flushSync(() => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    })\n    // 这里将会拿到更新之后的结果\n    console.log(this.state.count)\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n### PureComponent 和 memo\n\n> PureComponent 相当于使用 shouldComponentUpdate，其在该函数中进行比较 state 和 props.\n>\n> 其比较的为浅层的，当比较的是引用类型的数据时，其内部属性发生改变，将不会调用 render 函数\n>\n> 因此在对 state 中的属性进行修改时，应创建新对象\n>\n> memo 为 函数式组件的 PureComponent\n\n```jsx\nimport { PureComponent } from \"react\"\nimport Child from \"@components/Child\"\nimport ChildFunction from \"@components/ChildFunction\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('app updated')\n  }\n\n  addCount() { \n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n    console.log('App render')\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n        <Child count={count}></Child>\n        <ChildFunction message={title}></ChildFunction>\n      </div>\n    )\n  }\n}\n```\n\nChild\n\n```jsx\nimport { PureComponent } from \"react\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      message: 'child message'\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('child update')\n  }\n\n  render() {\n    console.log('child render')\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{this.state.message}</p>\n      </div>\n    )\n  }\n}\n```\n\nChildFunction\n\n```jsx\nimport { memo } from \"react\"\n\nconst ChildFunction = memo(function(props) {\n  return (\n    <div>\n      <h2>Child Function</h2>\n      <p>{props.message}</p>\n    </div>\n  )\n})\n\nexport default ChildFunction\n```\n\n修改对象触发 render 更新\n\n```jsx\nimport { PureComponent } from \"react\"\nimport Child from \"@components/Child\"\nimport ChildFunction from \"@components/ChildFunction\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10,\n      books: [\n        {name: 'book1', price: 80, count: 1},\n        {name: 'book2', price: 78, count: 1},\n        {name: 'book3', price: 90, count: 3},\n      ]\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('app updated')\n  }\n\n  addCount() { \n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  addBook() {\n    const books = [...this.state.books]\n    books.push({name: 'book4', price: 77, count: 1})\n    this.setState({\n      books: books\n    })\n  }\n\n  addBookCount(index) {\n    const books = [...this.state.books]\n    books[index].count ++\n    this.setState({\n      books: books\n    })\n  }\n\n  render() {\n    const {count, books} = this.state\n    const {title} = this.props\n    console.log('App render')\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n        <Child count={count}></Child>\n        <ChildFunction message={title}></ChildFunction>\n        <hr />\n        <ul>\n          {\n            books.map((book, index) => {\n              return (\n                <li key={index}>\n                  {book.name}-{book.price}-{book.count}\n                  <button onClick={() => this.addBookCount(index)}>Add 1</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n        <button onClick={() => this.addBook()}>Add New Book</button>\n      </div>\n    )\n  }\n}\n```\n\n\n\n### 获取组件实例 ref\n\n父组件\n\n```jsx\nimport React, { createRef, PureComponent } from 'react'\nimport Child from '@components/Child'\nimport ChildFunction from './components/ChildFunction'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    \n    // 推荐使用这种方式\n    this.node = createRef(),\n    this.node2 = null\n    this.child = createRef()\n    this.functionChild = createRef()\n  }\n\n  componentDidMount() {\n    console.log(this.node.current)\n    console.log(this.node2)\n    this.child.current.test()\n    console.log(this.child.current, this.child.current.test)\n    console.log(this.functionChild.current)\n  }\n\n  btnClick(e) {\n    console.log(e.target)\n    console.log(this.refs)\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>App</h1>\n        <div ref={this.node}>Ref1</div>\n        <div ref={e => this.node2 = e}>Ref2</div>\n        <button onClick={e => this.btnClick(e)}>button</button>\n        <Child ref={this.child}></Child>\n        <ChildFunction ref={this.functionChild} message='hello child function'></ChildFunction>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class Child extends PureComponent {\n  test() {\n    console.log('child test function execution!')\n  }\n  \n  render() {\n    return (\n      <h2>Child</h2>\n    )\n  }\n}\n\nexport default Child\n```\n\n函数子组件\n\n```jsx\nimport { forwardRef } from \"react\"\n\nconst ChildFunction = forwardRef(function (props, ref) {\n  console.log('child function props', props)\n  return (\n    <div>\n      <h2>Child FUnction</h2>\n      <p ref={ref}>child function ref</p>\n    </div>\n  )\n})\n\nexport default ChildFunction\n```\n\n\n\n### 受控组件\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      username: 'zhangsan'\n    }\n  }\n\n  inputChange(e) {\n    console.log(e.target.value)\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  render() {\n    const { username } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <p>{username}</p>\n        {/* 受控组件，当没有绑定 value 时为非受控组件 */}\n        <input type=\"text\" value={username} onChange={e => this.inputChange(e)} />\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n## 第二站\n\n### 受控组件的表单填写\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      username: '',\n      password: '',\n      hobbies: [\n        {id: 'sing', name: 'sing', isChecked: false},\n        {id: 'dance', name: 'dance', isChecked: false},\n        {id: 'rap', name: 'rap', isChecked: false},\n      ],\n      fruits: []\n    }\n  }\n\n  inputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  submitForm(e) {\n    e.preventDefault()\n    console.log(this.state.username, this.state.password)\n    console.log(this.state.hobbies.filter(hobby => hobby.isChecked).map(hobby => hobby.name))\n    console.log(this.state.fruits)\n  }\n\n  checkHobby(index) {\n    const hobbies = [...this.state.hobbies]\n    hobbies[index].isChecked = !hobbies[index].isChecked\n    this.setState({\n      hobbies: hobbies\n    })\n  }\n\n  selectFruit(e) {\n    const fruits = Array.from(e.target.selectedOptions).map(fruit => fruit.value)\n\n    this.setState({\n      fruits: fruits\n    })\n  }\n\n  render() {\n    const { username, password, hobbies, fruits } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <form onSubmit={e => this.submitForm(e)}>\n          {/* 受控组件，当没有绑定 value 时为非受控组件 */}\n          <label htmlFor=\"username\">\n            username: \n            <input id=\"username\" name='username' type=\"text\" value={username} onChange={e => this.inputChange(e)} />\n          </label>\n          <label htmlFor=\"password\">\n            password: \n            <input id=\"password\" name='password' type=\"password\" value={password} onChange={e => this.inputChange(e)} />\n          </label>\n\n          <div>\n            {\n              hobbies.map((hobby, index) => {\n                return (\n                  <label htmlFor={hobby.id} key={hobby.name}>\n                    {hobby.name}: \n                    <input id={hobby.id} type='checkbox'\n                          checked={hobby.isChecked}\n                          onChange={e => {this.checkHobby(index)}}/>\n                  </label>\n                )\n              })\n            }\n          </div>\n\n          <div>\n            <select value={fruits} multiple onChange={e => this.selectFruit(e)}>\n              <option value=\"apple\">Apple</option>\n              <option value=\"orange\">Orange</option>\n              <option value=\"banana\">Banana</option>\n            </select>\n          </div>\n\n          <input type='submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 非受控组件的表单\n\n```jsx\nimport React, { createRef, PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      notControlled: 'default value'\n    }\n    this.notControlledComponent = createRef()\n  }\n\n  submitForm(e) {\n    e.preventDefault() console.log(this.notControlledComponent.current.value)\n  }\n\n\n  render() {\n    const { notControlled } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <form onSubmit={e => this.submitForm(e)}>\n          <label htmlFor=\"not-controlled\">\n            not controlled component:\n            <input id='not-controlled' type=\"text\" ref={this.notControlledComponent} defaultValue={notControlled}/>\n          </label>\n\n          <input type='submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 高阶组件\n\n高阶组件的英文为 Higher-Order Components，简称为 HOC\n\n高阶组件的参数为组件，返回值为新组件的函数\n\n也即，高阶组件本身不是一个组件而是一个函数，这个函数的参是一个组件，返回值也是一个组件\n\n```js\nfunction HOC(Component) {\n    return NewComponent\t\n}\n```\n\n高阶组件函数通过上下文为使用该高阶组件的组件传递上下文\n\n```jsx\nimport ThemeContext from '../context/ThemeContext'\n\nexport default function (Component) {\n  return props => (\n    <ThemeContext.Consumer>\n      {\n        value => {\n          return (\n            <Component {...value} {...props}/>\n          )\n        }\n      }\n    </ThemeContext.Consumer>\n  )\n}\n```\n\n父组件通过上下文对象传值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport ThemeContext from './context/ThemeContext'\nimport About from './components/About'\n\nexport class App extends PureComponent {\n\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        <ThemeContext.Provider value={{color: 'red', backgroundColor: '#eee'}}>\n          <About></About>\n        </ThemeContext.Provider>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件中的使用上下文传来的值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport WithContext from '../hoc/WithContext'\n\nexport class About extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2>About: {this.props.color}-{this.props.backgroundColor}</h2>\n      </div>\n    )\n  }\n}\n\nexport default WithContext(About)\n```\n\n#### 高阶函数的意义\n\n早期 React 提供组件之间一种复用方式时 mixin，目前已经不再使用\n\n- Mixin 可能会相互依赖，相互耦合，不利于代码维护\n- 不同的 Mixin 中的方法可能会互相冲突\n  - MIxin 非常多时，组件处理起来会比较麻烦，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性\n\nHOC 的缺陷：\n\n- HOC 需要在原组件上进行包裹或者嵌套，如果大量使用 HOC，将会产生非常多的嵌套，这让调试变得非常困难\n- HOC 可以劫持 props，在不遵守约定的请胯下也可能造成冲突\n\nHooks 的出现，是开创性的，它解决了很多的 React 之前存在的问题：\n\n- this 指向问题\n- hoc 嵌套复杂度问题\n\n\n\n### Poral\n\n通过使用 createPortal 函数可以设置元素绑定到别的 dom 上\n\n自定义 modal 通过 portal 渲染到别的 dom 元素上\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { createPortal } from 'react-dom'\n\nexport class Modal extends PureComponent {\n  render() {\n    return (\n      <div>\n        {\n          createPortal(this.props.children, document.querySelector('#app'))\n        }\n      </div>\n    )\n  }\n}\n\nexport default Modal\n```\n\n在组件中使用该组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { createPortal } from 'react-dom'\nimport Modal from './components/Modal'\n\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        {\n          // 绑定到 app dom 上\n          createPortal(<h2>App Portal</h2>, document.querySelector('#app'))\n        }\n        <Modal>\n          <h2>Modal Portal Children 1</h2>\n          <h3>Modal Portal Children 2</h3>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n### Fragment\n\n由于 react 最外层必须为一个标签，导致页面渲染之后多使用一个div，可以通过 Fragment 组件，此时界面将不会多渲染一个标签\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\n\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      list: ['name', 'age']\n    }\n  }\n  render() {\n    const {list} = this.state\n    return (\n      // <Fragment>\n      //   <h1>App</h1>\n      //   <h2>App 2</h2>\n      // </Fragment>\n\n      // 语法糖写法\n      // <>\n      //   <h1>App</h1>\n      //   <h2>App 2</h2>\n      // </>\n      <>\n        {\n          // 此时必须要写 Fragment，不能使用语法糖的格式\n          list.map(item => {\n            return (\n              <Fragment key={item}>\n                <li>{item}</li>\n              </Fragment>\n            )\n          })\n        }\n      </>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n### StrictMode\n\nStrictMode 是一个用来突出显示应用程序中潜在问题的工具\n\n- 与 Fragment 一样，StrictMode 不会渲染任何可见的 UI\n- 它为后代元素触发额外的检查和警告，严格模式下将会识别过时的方法和类并抛出警告信息\n  - 识别不安全的声明周期\n  - 使用过时的 ref API\n  - 检测意外的副作用\n    - 这个组件的 constructor 会被调用两次\n    - 这是严格模式下故意进行的操作，让你来检查看在这里写的一些逻辑代码被调用多次时，是否会产生一些副作用\n    - 在生产环境中，是不会调用两次的\n  - 使用废弃的 findDOMNode 方法\n    - 在之前的 React API 中，可以通过 findDOMNode 来获取 DOM，不过已经不推荐使用了\n  - 检测过时的 context API\n    - 早期的 Context 是通过 static 属性声明 Context 对象属性，通过 getChildContext 返回 Context 对象等方式来使用 Context 的，目前这种方式已经不推荐使用\n- 严格模式检查仅在开发模式下运行；它们不会影响生产构建\n\n\n\n### 动画\n\nReact 通过使用动画插件 react-transition-group 实现组件的入场和离场动画，使用时需要额外的安装\n\n```bash\nnpm install react-transition-group --save\n```\n\n#### CSSTransition\n\nCSSTransition 是基于 Transition 组件构建的\n\nCSSTransition 执行过程中，有三个状态：appear、enter、exit\n\n他们有三种状态，需要定义对应的 CSS 样式\n\n1. 第一类，开始状态：对应的类是 -appear、-enter、exit\n2. 第二类：执行动画：对应的类是 -appear-active、-enter-active、-exit-active\n3. 第三类：执行结束：对应的类是 -appear-done、-enter-done、-exit-done\n\nCSSTransition 常见对应属性\n\n- in：触发进入或者推出状态\n  - 如果添加了 `unmountOnExit={true}` ，那么该组件会在执行退出动画时移除掉\n  - 当 in 为 trye 是，触发进入状态，会添加 -enter、-enter-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class、并且添加 -enter-done 的 class\n  - 当 in 为 false 时，触发退出状态，会添加 -exit、-exit-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class，并且添加 -enter-done 的 class\n- classNames：动画 class 的名称\n  - 决定了在编写 css 时，对应的 class 名称：比如 example-enter、example-enter-active、example-enter-done\n- timeout：类添加或移除的时间\n  - 当该值与样式中设置动画过度时间冲突时，动画执行时间为样式中所设定的，类绑定与消除为该 timeout 属性的值\n- appear：是否在初次进入添加动画（需要和 in 同时为 true）\n- unmountOnExit：退出后卸载组件\n\nCSSTransition 对应的钩子函数：主要为了检测动画执行过程\n\n- onEnter：在进入动画之前被触发\n- onEntering：在应用进入动画时被触发\n- onEntered：在应用进入动画结束后被触发\n\n*使用 CSSTransition 在 React 中将会报错：Transition.js:292  Uncaught TypeError: l.findDOMNode is not a function， 因此需要指定该组件的 nodeRef 属性为动画元素的根节点* \n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport './style/App'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActivate: false\n    }\n    this.nodeRef = createRef()\n  }\n\n  render() {\n    const { isActivate } = this.state\n    \n    return (\n      <Fragment>\n        <button onClick={e => this.setState({isActivate: !isActivate})}>Toggle</button>\n        <CSSTransition in={isActivate} timeout={2000} classNames='dh' unmountOnExit={true}\n                       // 当不添加 nodeRef 时将会报错，因为该组件使用了 findDOMNode 方法，该方法已经不支持\n                       // 通过设置 nodeRef 该组件将会使用 nodeRef 的值作为动画的根节点\n                       nodeRef={this.nodeRef} \n                       onEnter={e => console.log('开始进入动画')}\n                       onEntering={e => console.log('执行进入动画')}\n                       onEntered={e => console.log('执行进入动画结束')}\n                       onExit={e => console.log('开始离开动画')}\n                       onExiting={e => console.log('执行离开动画')}\n                       onExited={e => console.log('执行离开动画结束')}\n        >\n          {/* 必须存在一个根元素 */}\n          <div ref={this.nodeRef}>\n            <div>hidden element</div>\n            <p>hidden paragraph</p>\n          </div>\n        </CSSTransition>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n对应的样式\n\n```css\n.dh-enter {\n  opacity: 0;\n}\n\n.dh-enter-active {\n  opacity: 1;\n  transition: opacity 2s;\n}\n\n.dh-exit {\n  opacity: 1;\n}\n\n.dh-exit-active {\n  transition: opacity 2s;\n  opacity: 0;\n}\n```\n\n#### SwitchTransition\n\nSwitchTransition 可以完成两个组件之间切换的炫酷动画\n\n- 比如我们有一个按钮需要在 on 和 off 之间切换，我们希望看到 on 先从左侧退出，off 再从右侧进入\n- 这个动画在 vue 中被称之为 vue transition modes\n- react-transition-group 中使用 SwitchTransition 来实现该动画\n\nSwitchTransition 中主要有一个属性：mode，有两个值\n\n- in-out：表示新组件先进入，旧组件再移除\n- out-in：表示旧组件先移除，新组件再进入\n\nSwitchTransition 组件里面要有 CSSTransition 或者 Transition 组件，其 CSSTransition/Transition 需要设置 key 属性，表示切换不同的状态，该属性值主要设置不一样就代表进行切换\n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { CSSTransition, SwitchTransition } from 'react-transition-group'\nimport './style/App-Transition'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isLogin: false\n    }\n    this.nodeRef = createRef()\n  }\n\n  render() {\n    const { isLogin } = this.state\n    \n    return (\n      <Fragment>\n        <SwitchTransition mode='out-in'>\n          <CSSTransition nodeRef={this.nodeRef} \n                         key={isLogin ? 'login' : 'logout'}\n                         timeout={1000} classNames='dh'>\n            <button onClick={e => this.setState({isLogin: !isLogin})}\n                    ref={this.nodeRef}>\n                      { isLogin ? 'Login' : 'Logout' }\n            </button>\n          </CSSTransition>\n        </SwitchTransition>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n样式设置\n\n```css\n.dh-enter {\n  transform: translateX(-100%);\n}\n\n.dh-enter-active {\n  transform: translateX(0);\n  transition: transform 1s;\n}\n\n.dh-exit {\n  transform: translateX(0);\n}\n\n.dh-exit-active {\n  transition: transform 1s;\n  transform: translateX(-100%);\n}\n```\n\n#### TransitionGroup\n\n给一组元素设置动画\n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport './style/APP-TransitionGroup'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      books: [\n        {id: 1, name: 'aaa', price: 80},\n        {id: 2, name: 'bbb', price: 81},\n        {id: 3, name: 'ccc', price: 82},\n        {id: 4, name: 'ddd', price: 83},\n      ]\n    }\n    this.nodeRef = []\n    for (let i = 0; i < this.state.books.length; ++ i) {\n      this.nodeRef.push(createRef())\n    }\n  }\n\n  addNewBook() {\n    const books = [...this.state.books]\n    books.push({\n      id: new Date().getTime(),\n      name: 'eee',\n      price: 180\n    })\n    this.setState({\n      books\n    })\n    this.nodeRef.push(createRef())\n  }\n\n  deleteBook(index) {\n    const books = [...this.state.books]\n    books.splice(index, 1)\n    this.setState({ books })\n    this.nodeRef.splice(index, 1)\n  }\n\n  render() {\n    const { books } = this.state\n    \n    return (\n      <Fragment>\n        <TransitionGroup>\n          {\n            books.map((book, index) => {\n              return (\n                <CSSTransition key={book.id} nodeRef={this.nodeRef[index]}\n                               timeout={1000} classNames='example' unmountOnExit={true}>\n                  <li ref={this.nodeRef[index]}>\n                    <span>{book.name}-{book.price}</span>\n                    <button onClick={e => this.deleteBook(index)}>delete</button>\n                  </li>\n                </CSSTransition>\n              )\n            })\n          }\n        </TransitionGroup>\n        <button onClick={e => this.addNewBook()}>Add new book</button>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\nCSS 文件\n\n```css\n.example-enter {\n  transform: translateX(100px);\n}\n\n.example-enter-active {\n  transform: translateX(0);\n  transition: transform 1s ease;\n}\n\n.example-exit {\n  transition: transform 1s ease;\n  transform: translateX(0);\n}\n\n.example-exit-active {\n  transform: translateX(100px);\n}\n```\n\n\n\n### 样式\n\n#### 内联样式\n\nstyle 接受一个采用小驼峰命名属性的 JavaScript 对象，并且可以引用 state 中的状态来设置相关的样式\n\n内联样式的优点：\n\n1. 内联样式，样式之间不会有冲突\n2. 可以动态获取当前 state 中的状态\n\n内联样式的缺点：\n\n1. 写法上都需要使用驼峰表示\n2. 某些样式没有提示\n3. 大量的样式，代码混乱\n4. 某些样式无法编写（比如伪类，伪元素）\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  render() {\n    const style = {\n      color: 'red',\n      fontSize: '20px',\n      border: '1px solid #eee'\n    }\n    return (\n      <div>\n        <h1 style={style}>App</h1>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 引用外部 CSS 文件\n\n该方式将会对所有文件生效，即使是子组件中引用的样式文件也将对所有文件生效\n\n父组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport Home from './components/Home'\n\nexport class App extends PureComponent {\n\n  render() {\n    return (\n      <div>\n        <h1 className='title'>App</h1>\n        <Home></Home>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport '../styles/App'\n\nexport class Home extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2 className='title'>Home</h2>\n      </div>\n    )\n  }\n}\n\nexport default Home\n```\n\n样式文件（此样式将对所有文件生效）\n\n```css\n.title {\n  color: red;\n  border: 1px solid #eee;\n}\n```\n\n#### CSS Modules\n\ncss modules 并不是 React 特有的解决方案，而是所有使用了类似于 webpack 配置的环境下都可以使用的\n\n- 如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置 webpack.config.js 中的 modules: true 等\n\nReact 的脚手架已经内置了 css modules 的配置\n\n- .css/.less/.scss 等样式文件都需要修改成 .module.css/.module.less/.module.scss 等\n\ncss modules 确实解决了局部作用域的问题，但是这种方案仍存在如下的缺陷：\n\n1. 引用的类名，不能使用连接符（.home-title）其中 - 在 JavaScript 不被识别\n2. 所有的 className 都必须使用 {style.className} 的形式来编写\n3. 不方便动态修改某些样式，仍然需要使用内联样式的方式\n\n配置 webpack.config.js\n\n```js\nconst path = require('path')\nconst HTMLPlugin = require('html-webpack-plugin')\nconst {ProvidePlugin} = require('webpack')\nconst TerserPlugin = require('terser-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', {\n          loader: 'css-loader',\n          options: {\n            modules: {\n              // 使用 named 进行导出（即 export 方式），通过使用 import {类名} 导入\n              namedExport: true,\n              // 设置类的名字格式\n              localIdentName: '[local]_[contenthash:6]'\n            }\n          }\n        }]\n      },\n    ]\n  }\n}\n```\n\n在组件中使用该样式\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport {title} from './styles/App'\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(title)\n    return (\n      <div>\n        <h1 className={title}>App</h1>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### CSS in JS\n\nCSS-in-JS 是指一种模式，其中 CSS 由 JavaScript 生成，而不是在外部中定义\n\n这个功能并不是 React 的一部分，而是由第三方库提供\n\n- CSS-in-JS 通过 JavaScript 来为 CSS 赋予一些能力，包括 类似于 CSS 预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改状态等\n- 虽然 CSS 预处理器也具备某些能力，但是获取动态状态依然是一个不好处理的点\n\n目前比较理性的 CSS-in-JS 的库：\n\n1. styled-components（常用）\n2. emotion\n3. glamorous\n\n使用 styled-components\n\n```bash\nnpm install styled-components -D\n```\n\n定义 CSS js 文件\n\n```js\nimport styled from \"styled-components\"\n\n// 可以通过 attrs 函数设置样式属性\nconst AppStyleWrapper = styled.div.attrs(props => ({\n  color: props.color || 'red',\n  backgroundColor: '#ff8800'\n}))`\n  .title {\n    color: ${props => props.color};\n    font-size: ${props => props.fontSize};\n    border: 1px solid #aaa;\n\n    &:hover {\n      background-color: ${props => props.backgroundColor};\n      color: #fff;\n    }\n  }\n`\n\nexport default AppStyleWrapper\n```\n\n在组件中使用该样式\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport AppStyleWrapper from './styles/App'\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(AppStyleWrapper)\n    return (\n      // 传递参数，该组件将参数接收到 props 中\n      <AppStyleWrapper color='yellow' fontSize='50px'>\n        <h1 className='title'>App</h1>\n      </AppStyleWrapper>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 主题和继承\n\nAbout 组件样式\n\n```js\nimport styled from \"styled-components\"\n\nconst AboutFatherStyleWrapper = styled.div`\n  .content {\n    border: 1px solid #aaa;\n  }\n`\n\n// 继承 AboutFatherStyleWrapper 样式\nconst AboutStyleWrapper = styled(AboutFatherStyleWrapper)`\n  .about-title {\n    color: ${props => props.theme.color};\n    font-size: 18px;\n  }\n\n  .content {\n    color: ${props => props.theme.color};\n    background-color: ${props => props.theme.backgroundColor};\n  }\n`\n\nexport default AboutStyleWrapper\n```\n\nAbout 组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport AboutStyleWrapper from './style'\n\nexport class About extends PureComponent {\n  render() {\n    return (\n      <AboutStyleWrapper>\n        <h2 className='about-title'>About</h2>\n        <div className='content'>About content</div>\n      </AboutStyleWrapper>\n    )\n  }\n}\n\nexport default About\n```\n\nApp 组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport {ThemeProvider} from 'styled-components'\nimport AppStyleWrapper from './styles/App'\nimport About from './components/About'\n\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(AppStyleWrapper)\n    return (\n      // 通过 ThemeProvider 向所有子组件提供主题样式\n      <ThemeProvider theme={{color: '#909090', backgroundColor: '#09aaf3'}}>\n        {/* 传递参数，该组件将参数接收到 props 中 */}\n        <AppStyleWrapper fontSize='50px'>\n          <h1 className='title'>App</h1>\n        </AppStyleWrapper>\n        <About></About>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App\n```\n\n### classnames 库\n\n在需要动态添加样式时，使用 react 会比较繁琐\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\n\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActive: true,\n      isDelete: true\n    }\n  }\n\n  render() {\n    const { isActive, isDelete } = this.state\n    return (\n      <Fragment>\n        <div className={`${isActive? 'active' : ''} ${isDelete ? 'delete' : ''}`}>App</div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n通过使用 classnames 库来简化动态类的添加\n\n```bash\nnpm install classnames\n```\n\n在组件中的使用\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\nimport classnames from 'classnames'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActive: true,\n      isDelete: true\n    }\n  }\n\n  render() {\n    const { isActive, isDelete } = this.state\n    return (\n      <Fragment>\n        <div className={classnames('title', {'active': isActive, 'delete': isDelete})}>App</div>\n        <div className={classnames(['title', {'active': isActive, 'delete': isDelete}])}>App</div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n## 第三站\n\n### 纯函数\n\n在程序设计中，若一个函数符合以下条件，那么这个函数就是纯函数\n\n1. 此函数在相同的输入值时，需要产生相同的输出\n2. 函数的输出和输入值以外的其他隐藏信息或状态无关\n3. 该函数不能由语义上可观察的函数副作用，诸如 触发事件，使用输入输出设备，或更改输出值以外的内容等\n   1. 副作用表示在执行一个函数时，除了返回数值以外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储\n\n纯函数的优点：\n\n1. 在编写纯函数的时候，只需要单纯实现自己的业务逻辑即可不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改\n2. 在使用的时候，只需要确保输入的内容不会被任意篡改，并且确定的输入一定会有确定的输出\n\n\n\n### Redux\n\n随着需要管理的状态越来越多，越来越复杂，以及要管理的状态（包括服务器返回的数据，缓存数据、用户操作产生的数据、UI的状态），需要对状态进行监管。\n\nReact 是在视图层帮助我们解决了 DOM 的渲染过程，但是 State 任然留给我们自己管理\n\n- 无论是组件定义自己的 state，还是组件之间的通信通过 props 进行传递；也包括 context 进行数据之间的共享\n- React 主要负责帮助我们管理视图，state 如何维护最终还是我们自己来决定\n\nRedux 就是一个帮助我们管理 state 的容器；Redux 是 JavaScript 的状态容器，提供了可预测的状态管理\n\nRedux 除了可以和 React 一起使用之外，它也可以和其他界面库一起来用（Vue）并且他很小（包括依赖在内，只有 2kb）\n\n- Redux要求我们通过 action 来更新数据\n  - 所有数据的变化，必须通过派发（dispath）action 来更新\n  - action 是一个普通的 JavaScript 对象，用来描述这次更新 type 和 content\n  - 强制使用 action 的好处是可以清晰知道数据到底发生了什么样的变化，所有数据都是可追踪、可预测的\n- state 和 action 通过 reducer 进行联系\n  - reducer 是一个纯函数\n  - reducer 做的事情就是将传入的 state 和 action 结合起来生成一个新的 state\n\n引入 redux 包\n\n```bash\nnpm install redux --save\n```\n\nredux 基本使用\n\n```js\nconst {createStore} = require('redux')\n\nconst data = {\n  username: 'zhangsan',\n  age: 16\n}\n\n/**\n * 该函数将会被执行两次，第一次是刚开始创建的时候\n * @param {Object} state 未被修改的 state 的值\n * @param {Object} action 使用 store.dispatch 传入的 action\n * @returns 返回值将作为 store 之后存储的 state\n */\nfunction reducer(state = data, action) {\n  // 第一次打印：reducer:  { username: 'zhangsan', age: 16 } { type: '@@redux/INIT7.d.i.y.a.5' }\n  // 第二次打印：reducer:  { username: 'zhangsan', age: 16 } { type: 'update_username', username: 'wangwu' }\n  console.log('reducer: ', state, action)\n\n  if (action.type == 'update_username') {\n    return { ...state, username: action.username }\n  }\n\n  return state\n}\n\nconst store = createStore(reducer)\n\nconsole.log(store.getState()) // { username: 'zhangsan', age: 16 }\n// 这样修改将导致界面不会发生动态更新\n// store.getState().username = 'lisi'\n// console.log(store.getState())\n\nconst res = store.dispatch({type: 'update_username', username: 'wangwu'})\nconsole.log(res) // { type: 'update_username', username: 'wangwu' }\nconsole.log(store.getState()) // { username: 'wangwu', age: 16 }\n```\n\n通过订阅模式进行事件监听\n\n```js\nconst { createStore } = require('redux')\n\nconst data = [\n  {name: 'article1', author: 'zhangsan'},\n  {name: 'article2', author: 'lisi'}\n]\n\nfunction reducer(state = data, action) {\n  switch(action.type) {\n    case 'public article': \n      return [...state, action.article]\n    case 'delete article':\n      let res = [...state]\n      res.splice(action.start, action.count)\n      return res\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer)\nconst unsubscribe = store.subscribe(() => {\n  console.log('store subscribe: ', store.getState())\n})\n\nconst publicAction = (article) => ({\n  type: 'public article',\n  article\n})\n\nconst deleteAction = (start, count) => ({\n  type: 'delete article',\n  start: start,\n  count: count\n})\n\n/*\nstore subscribe:  [\n  { name: 'article1', author: 'zhangsan' },\n  { name: 'article2', author: 'lisi' },\n  { name: 'a1', author: 'wangwu' }\n]\n*/\nstore.dispatch(publicAction({name: 'a1', author: 'wangwu'}))\n/*\nstore subscribe:  [\n  { name: 'article1', author: 'zhangsan' },\n  { name: 'a1', author: 'wangwu' }\n]\n*/\nstore.dispatch(deleteAction(1, 1))\nunsubscribe()\n// 下面将不会触发订阅事件\nstore.dispatch(publicAction({name: 'a3', author: 'laowang'}))\n```\n\n对使用过程进行优化，通常将文件分为如下四个部分：\n\n```bash\nactionCreator.js # 存放创建的 action 函数\nconstants.js # 存放常量，即 switch 中的 case\nindex.js # 存放 store 对象\nreducer.js # 存放数据以及 reducer 函数\n```\n\nactionCreator.js\n\n```js\nimport { CHANGE_AGE, CHANGE_NAME } from \"./constants\";\n\nexport function changeName(username) {\n  return {\n    type: CHANGE_NAME,\n    username: username\n  }\n}\n\nexport function changeAge(age) {\n  return {\n    type: CHANGE_AGE,\n    age: age\n  }\n}\n```\n\nconstants.js\n\n```js\nexport const CHANGE_NAME = 'CHANGE_NAME'\nexport const CHANGE_AGE = 'CHANGE_AGE'\n```\n\nindex.js\n\n```js\nimport { createStore } from \"redux\"\n\nimport {reducer} from './reducer'\n\nconst store = createStore(reducer)\n\nexport default store\n```\n\nreducer.js\n\n```js\nimport { CHANGE_AGE, CHANGE_NAME } from \"./constants\"\n\nconst data = {\n  username: 'zhangsan',\n  age: 18\n}\n\nfunction reducer(state = data, action) {\n  switch(action.type) {\n    case CHANGE_NAME:\n      return {...state, username: action.username}\n    case CHANGE_AGE:\n      return {...state, age: action.age}\n    default:\n      return state\n  }\n}\n\nexport default reducer\n```\n\n#### Redux 三大原则\n\n单一数据源\n\n- 整个应用程序的 state 被存储在一颗 object tree 中，并且 这个 object tree 只存储在一个 store 中\n- Redux 并没有强制让我们不能创建多个 Store，但是那样做并不利于数据的维护\n- 单一的数据源可以让整个应用程序的 state 变得方便维护、追踪、修改\n\nState 是只读的\n\n- 唯一修改 state 的方法一定是触发 action，不要试图在其他地方通过任何的方式修改 state\n- 这样就确保了 View 或网络请求都不能直接修改 state，他们只能通过 action 来描述自己想要如何修改 state\n- 这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心 race condition（竞态）的问题\n\n使用纯函数来执行修改\n\n- 通过 reducer 将 旧 state 和 actions 联系在一起，并且返回一个新的 state\n- 随着应用程序的复杂度增加，我们可以将 reducer 拆分成多个小的 reducer 分别操作不同的 state tree 的一部分\n- 但是所有的 reducer 都应该是纯函数，不能产生任何的副作用\n\n\n\n### 在 React 中使用 Redux\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport store from './store/system'\nimport { addCount, desCount } from './store/system/actionCreators'\nimport About from './components/About'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      count: store.getState().count\n    }\n  }\n\n  componentDidMount() {\n    store.subscribe(() => {\n      this.setState({\n        count: store.getState().count\n      })\n    })\n  }\n\n  render() {\n    const {count} = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <div>{count}</div>\n        <button onClick={e => store.dispatch(addCount(1))}>Add</button>\n        <button onClick={e => store.dispatch(desCount(1))}>Des</button>\n        <About></About>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### React-Redux\n\n在 react 中使用封装后的 redux\n\n```bash\nnpm install react-redux\n```\n\n在根组件中使用 Provider 给后续组件设置 store\n\n```jsx\nimport {createRoot} from 'react-dom/client'\nimport { StrictMode } from 'react'\nimport { Provider } from \"react-redux\"\nimport store from './store'\n\nimport App from \"./App\"\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>\n)\n```\n\n在需要使用 store 组件中使用 connect 进行使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport store from '../store'\nimport { changeUsername } from '../store/actionCreator'\n\nexport class About extends PureComponent {\n  changeUsername() {\n    this.props.changeUsername('lisi')\n    console.log(this.props, store.getState())\n  }\n\n  render() {\n    const { username } = this.props\n    console.log(this.props, store.getState())\n    return (\n      <div>\n        <h2>About</h2>\n        <p>{username}</p>\n        <button onClick={() => this.changeUsername()}>Change Username</button>\n      </div>\n    )\n  }\n}\n\n// 过滤不需要的数据\nfunction mapStateToProps(state) {\n  console.log(state)\n  return {\n    username: state?.username,\n    age: state?.age\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeUsername(username) {\n      dispatch(changeUsername(username))\n    }\n  }\n}\n// connect 函数执行后返回一个高阶组件函数\n// connect 接收两个函数作为参数\nexport default connect(mapStateToProps, mapDispatchToProps)(About)\n```\n\n当使用异步请求时，需要对 dispatch 传递一个函数作为分发的对象，此时需要对 redux 进行增强，安装 redux-thunk 库\n\n```bash\nnpm install redux-thunk\n```\n\n在 actionCreator.js 文件中编写函数\n\n```js\nexport function addUser(userList) {\n  return {\n    type: ADD_USERS,\n    users: userList\n  }\n}\n\nexport function fetchData() {\n  // 定义异步请求函数，将该函数进行返回\n  function _fetch(dispatch, getState) {\n    fetch('http://jsonplaceholder.typicode.com/posts', {method: 'get'}).then(async res => {\n      const userList = await res.json()\n      dispatch(addUser(userList))\n    })\n  }\n\n  return _fetch\n}\n```\n\n在组件中只需要调用该函数即可\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchData } from '../store/actionCreator'\n\nexport class About extends PureComponent {\n\n  componentDidMount() {\n    this.props.fetchData()\n  }\n\n  render() {\n    const { users } = this.props\n    return (\n      <div>\n        <h2>About</h2>\n        <ul>\n          {\n            users?.map(user => (\n              <li key={user.id}>{user.id} - {user.userId} - {user.title}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 过滤不需要的数据\nfunction mapStateToProps(state) {\n  return {\n    users: state?.users\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData() {\n      dispatch(fetchData())\n    }\n  }\n}\n// connect 函数执行后返回一个高阶组件函数\n// connect 接收两个函数作为参数\nexport default connect(mapStateToProps, mapDispatchToProps)(About)\n```\n\nredux dev tools 开启\n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport reducer from './reducer'\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store\n```\n\n#### Redux 拆分\n\n通过创建独立的文件夹区分不同的 redux，在 index.js 中合并不同的  reducer \n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport homeReducer from \"../home/reducer\"\nimport profileReducer from \"../profile/reducer\"\n\nconst reducer = combineReducers({\n  home: homeReducer,\n  profile: profileReducer\n})\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store\n```\n\ncombineReducers 函数的实现类似于下面\n\n```js\nfunction reducer (state = {}, action) {\n  // 初始时，传入 reducer 的参数为：state: undefined action: {type: '@@INIT'}\n  console.log(state, action)\n  \n  return {\n    home: homeReducer(state.home, action),\n    profile: profileReducer(state.profile, action)\n  }\n}\n```\n\n#### Redux 插件\n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport reducer from './reducer'\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\n// 记录日志，通过对 dispatch 进行拦截\nfunction log(store) {\n  const dispatch = store.dispatch\n  function recordLog(action) {\n    console.log('before action execute', action)\n    dispatch(action)\n  }\n  store.dispatch = recordLog\n}\nlog(store)\n\nexport default store\n```\n\n#### Redux Toolkit\n\nredux toolkit 是官方推荐编写 redux 逻辑的方法，该工具能解决使用 redux 编写时逻辑过于繁琐，代码量过多且不利于管理等问题\n\nredux toolkit 的核心 API 主要包含如下：\n\n- configureStore：包装 createStore 以提供简化的配置选项和良好的默认值，它可以自动组合你的 slice reducer，添加你提供的任何 redux 中间件，redux-thunk 默认包含，并启用 redux devtool extension\n- createSlice：接受 reducer 函数的对象，切片名称和初始状态值，并自动生成切片 reducer，并带有相应的 actions\n- createAsyncThunk：接受一个动作类型字符串和一个返回 Promise 的函数，并生成一个 pending/fulfilled/rejected 基于该 Promise分派动作类型的 thunk\n\n安装 redux-toolkit\n\n```bash\nnpm install @reduxjs/toolkit react-redux\n```\n\n创建 store/index.js\n\n```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport profileReducer from './features/profile'\n\nconst store = configureStore({\n  reducer: {\n    profile: profileReducer\n  }\n})\n\nexport default store\n```\n\n创建对应的 reducer\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\"\n\nconst profileSlice = createSlice({\n  name: 'profile',\n  initialState: {\n    username: 'zhangsan',\n    age: 18\n  },\n  reducers: {\n    // action: {type: 'profile/changeUsername', payload: 'lisi'}\n    changeUsername(state, action) {\n      console.log(state, action)\n      state.username = action.payload\n    },\n    changeAge(state, aciton) {\n      console.log(state, aciton)\n      state.age = action.payload\n    }\n  }\n})\n\n\nexport const { changeUsername, changeAge } = profileSlice.actions\nexport default profileSlice.reducer\n```\n\n在组件中的使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeUsername, changeAge } from '../store/features/profile'\n\nexport class Profile extends PureComponent {\n  render() {\n    const { username, age } = this.props\n\n    return (\n      <div>\n        <h2>Profile</h2>\n        <p>{username} - {age}</p>\n        <button onClick={() => this.props.changeUsername('lisi')}>Change Username</button>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.profile.username,\n    age: state.profile.age\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeUsername(username) {\n      dispatch(changeUsername(username))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)\n```\n\n在 Redux Toolkit 中使用异步函数\n\n```js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\n\nexport const fetchData = createAsyncThunk('fetch/home', async (extractInfo, store) => {\n  const res = await fetch('http://jsonplaceholder.typicode.com/posts', {method: 'get'})\n  const data = await res.json()\n  // 可以通过如下方式直接在这个里面添加数据\n  store.dispatch(addUser(data))\n  return data\n})\n\nconst homeSlice = createSlice({\n  name: 'home',\n  initialState: {\n    users: []\n  },\n  reducers: {\n    addUser(state, action) {\n      state.users = action.payload\n    }\n  },\n  // 这种方式现已不支持\n  // extraReducers: {\n  //   [fetchData.pending](state, action) {\n  //     console.log(state, action, 'ready to fetch data')\n  //   },\n  //   [fetchData.fulfilled](state, action) {\n  //     console.log(state, action, 'have got data')\n  //   },\n  //   [fetchData.rejected](state, action) {\n  //     console.log(state, action, 'get data error')\n  //   }\n  // },\n  // 支持的写法\n  extraReducers: (builder) => {\n    builder.addCase(fetchData.pending, (state, action) => {\n      console.log(state, action, 'ready to fetch data')\n    }).addCase(fetchData.fulfilled, (state, action) => {\n      console.log(state, action, 'have got data')\n      // state.users = action.payload\n    }).addCase(fetchData.rejected, (state, action) => {\n      console.log(state, action, 'get data error')\n    })\n  }\n})\n\nexport const { addUser } = homeSlice.actions\nexport default homeSlice.reducer\n```\n\n在组件中的使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\n\nimport { fetchData } from '../store/features/home'\n\nexport class Home extends PureComponent {\n  componentDidMount() {\n    this.props.fetchHomeData()\n  }\n\n  render() {\n    const { users } = this.props\n    \n    return (\n      <div>\n        <h2>Home</h2>\n        <ul>\n          {\n            users.map(user => (\n              <li key={user.id}>{user.title}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.home.users\n})\nconst mapDispatchToProps = (dispatch) => ({\n  fetchHomeData() {\n    dispatch(fetchData({path: '123'}))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n```\n\n#### Redux Toolkit 的数据不可变性\n\nRedux Toolkit 底层使用了 immerjs 的一个库来保证数据的不可变性\n\n为了节约内存，又出现了一个新的算法：Persistent Data Structure （持久化数据结构或一致性数据结构）\n\n- 用一种数据结构来保存数据\n- 当数据被修改时，会返回一个对象，但是新的对象会尽可能利用之前的数据结构而不会对内存造成浪费\n\n#### connect 函数的实现\n\nconnect 函数\n\n```jsx\nimport { PureComponent } from \"react\"\n// import store from \"../store\"\nimport StoreContext from './StoreContext'\n\n/**\n * realize a connect function\n * @param {Function} mapStateToProps \n * @param {Function} mapDispatchToProps \n * @returns high component function\n */\nexport default function connect(mapStateToProps, mapDispatchToProps) {\n  return (Component) => {\n    class NewComponent extends PureComponent {\n      constructor(props, context) {\n        super(props)\n        console.log(context)\n        this.state = mapStateToProps(context.getState())\n      }\n      componentDidMount() {\n        this.unsubscribe = this.context.subscribe(() => {\n          this.setState(mapStateToProps(this.context.getState()))\n        })\n      }\n      componentWillUnmount() {\n        this.unsubscribe()\n      }\n      render() {\n        // state dispatch\n        const states = mapStateToProps(this.context.getState())\n        const dispatchs = mapDispatchToProps(this.context.dispatch)\n        return <Component {...this.props} {...states} {...dispatchs}/>\n      }\n    }\n\n    NewComponent.contextType = StoreContext\n    // return newComponent\n    return NewComponent\n  }\n}\n```\n\nStoreContext\n\n```js\nimport { createContext } from \"react\"\n\nconst StoreContext = createContext()\n\nexport default StoreContext\n```\n\nmain.js\n\n```jsx\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport StoreContext from './hoc/StoreContext'\n\nimport store from './store'\nimport App from './App'\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <StrictMode>\n    {/* 必须要加上 Provider */}\n    <Provider store={store}>\n      <StoreContext.Provider value={store}>\n        <App />\n      </StoreContext.Provider>\n    </Provider>\n  </StrictMode>\n)\n```\n\n#### React 中 state 管理\n\nreact 中管理状态可以通过：1. 组件中自己的state、2. Context 数据的共享状态、3. Redux 管理应用状态\n\n- UI 相关的组件内部可以维护的状态，在组件内部自己来维护\n- 大部分需要共享的状态，都交给 redux 来管理和维护\n- 从服务器请求的数据（包括请求的操作），交给 redux 来维护\n\n\n\n### React Router\n\n安装相关依赖\n\n```bash\nnpm install react-router-dom\n```\n\nreact-router 会包含一些 react-native 的内容，web 开发并不需要\n\nreact-router 最主要的时给我们提供一些组件：\n\n- BrowserRouter 或 HashRouter\n  - Router 中包含了对路径改变的监听，并且会将相应的路径传递给子组件\n  - BrowserRouter 使用 history 模式\n  - HashRouter 使用 hash 模式\n- Routes：包裹所有的 Route，在其中匹配一个路由\n  - Router5.x 使用的是 Switch 组件\n- Route：Route 用于匹配的路径\n  - path 属性：用于设置匹配到的路径\n  - element 属性：设置匹配到路径后，渲染的组件\n    - Router5.x 使用的是 component 属性\n  - exact：精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件\n    - Router6.x 不再支持该属性\n- Link 和 NavLink：\n  - 通常路径的跳转是使用 Link 组件，最终会被渲染成 a 元素\n  - NavLink 是 Link 基础之上增加了一些样式属性\n  - to 属性：Link 中最重要的属性，用于设置跳转到的路径\n\n#### Link 基本使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### NavLink 基本使用\n\n- style: 传入一个函数，函数接受一个对象，包含 isActive 属性\n- className： 传入函数，函数接受一个对象，包括 isActive 属性\n- 默认的 activeClassName：\n  - 事实上再默认匹配成功时，NavLink 就会添加上一个动他的 active class，可以直接使用该 class\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          {/* Link 当标签激活时不会添加 class */}\n          {/* <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link> */}\n          {/* NavLink 再标签激活时会添加 active class */}\n          {/* <NavLink to='/home'>Home</NavLink> */}\n          {/* 通过修改 className 改变激活时绑定的 class 属性 */}\n          <NavLink to='/home' className={({isActive}) => isActive ? 'link-active' : ''}>Home</NavLink>\n          {/* <NavLink to='/profile'>Profile</NavLink> */}\n          {/* {isActive: true, isPending: false, isTransitioning: false} */}\n          <NavLink to='/profile' style={({isActive}) => ({color: isActive ? 'red' : ''})}>Profile</NavLink>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\n#### Navigate 导航\n\nNavigate 用于路由的重定向，当这个组件出现时，就会执行跳转到对应的 to 路径中\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink, Navigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            {/* 设置路由自动跳转 */}\n            <Route path='/' element={<Navigate to='/home'/>}/>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n            <Route path='*' element={<NotFound />}/>\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 路由嵌套\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink, Navigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nimport HomeRecommand from './pages/HomeRecommand'\nimport HomeRanking from './pages/HomeRanking'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            {/* 设置路由自动跳转 */}\n            <Route path='/' element={<Navigate to='/home'/>}/>\n            <Route path='/home' element={<Home />}>\n              <Route path='/home' element={<Navigate to='/home/recommand' />}></Route>\n              <Route path='/home/recommand' element={<HomeRecommand/>}></Route>\n              <Route path='/home/ranking' element={<HomeRanking />}></Route>\n            </Route>\n            <Route path='/profile' element={<Profile />} />\n            <Route path='*' element={<NotFound />}/>\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\nHome.jsx\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Link, Outlet } from 'react-router-dom'\n\nexport class Home extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2>Home</h2>\n        <Link to='/home/recommand'>Recommand</Link>\n        <Link to='/home/ranking'>Ranking</Link>\n        {/* 设置占位符，渲染到此处 */}\n        <Outlet></Outlet>\n      </div>\n    )\n  }\n}\n\nexport default Home\n```\n\n#### useNavigator\n\n```jsx\nimport React from 'react'\nimport { Routes, Route, Link, NavLink, Navigate, useNavigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nimport HomeRecommand from './pages/HomeRecommand'\nimport HomeRanking from './pages/HomeRanking'\n\nexport function App(props) {\n  // 调用必须再顶层使用，不能在函数中使用\n  const navigator = useNavigate()\n\n  return (\n    <BaseStyle>\n      <h1>App</h1>\n      <div className=\"header\">\n        <button onClick={e => navigator('/home')}>Home Button</button>\n        <button onClick={e => navigator('/profile')}>Profile Button</button>\n        <hr />\n      </div>\n      <div className=\"content\">\n        <Routes>\n          {/* 设置路由自动跳转 */}\n          <Route path='/' element={<Navigate to='/home'/>}/>\n          <Route path='/home' element={<Home />}>\n            <Route path='/home' element={<Navigate to='/home/recommand' />}></Route>\n            <Route path='/home/recommand' element={<HomeRecommand/>}></Route>\n            <Route path='/home/ranking' element={<HomeRanking />}></Route>\n          </Route>\n          <Route path='/profile' element={<Profile />} />\n          <Route path='*' element={<NotFound />}/>\n        </Routes>\n      </div>\n      <div className=\"footer\">\n        <hr />\n        Footer\n      </div>\n    </BaseStyle>\n  )\n}\n\nexport default App\n```\n\n对 navigator 进行包装，使其可以在类组件中使用\n\n```jsx\nimport { useLocation, useNavigate, useParams, useSearchParams } from \"react-router-dom\"\n\nfunction withRouter(Component) {\n\n  return function (props) {\n    const navigator = useNavigate()\n    // 当通过动态路由传递参数时，使用 params 对象获取\n    const params = useParams()\n    // 查询字符串的参数\n    const location = useLocation()\n    const [searchParams] = useSearchParams()\n    const router = {navigator, params, location, searchParams}\n    return (\n      <Component {...props} router={router} />\n    )\n  }\n}\n\nexport default withRouter\n```\n\n获取传递的值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport withRouter from '../hoc/withRouter'\n\n\nexport class Profile extends PureComponent {\n  render() {\n    const { params, location, searchParams } = this.props.router\n    console.log(location, location.search)\n    console.log(searchParams.get('name'), searchParams.get('age'))\n    return (\n      <div>Profile: {params.id}</div>\n    )\n  }\n}\n\nexport default withRouter(Profile)\n```\n\n#### router 文件编写\n\n当使用配置去设置 router 时，需要使用 useRoutes hook，并且使用懒加载方式的组件需要被 Suspense 包裹\n\nmain.js\n\n```jsx\nimport { createRoot } from 'react-dom/client'\nimport { StrictMode, Suspense } from 'react'\n\nimport { HashRouter } from 'react-router-dom'\n\nimport App from './App'\n\nconst root = createRoot(document.querySelector('#root'))\n\nroot.render(\n  <StrictMode>\n    <HashRouter>\n      {/* 当路由设置懒加载之后，必须使用 Suspense 包裹 */}\n      <Suspense fallback={<h3>Loading ...</h3>}>\n        <App />\n      </Suspense>\n    </HashRouter>\n  </StrictMode>\n)\n```\n\nrouter.js\n\n```jsx\nimport { Navigate } from 'react-router-dom'\n\nimport Home from '../pages/Home'\nimport Profile from '../pages/Profile'\nimport NotFound from '../pages/NotFound'\n\n// import HomeRecommand from '../pages/HomeRecommand'\n// import HomeRanking from '../pages/HomeRanking'\nimport React from 'react'\n\n// 设置懒加载\nconst HomeRecommand = React.lazy(() => import('../pages/HomeRecommand'))\nconst HomeRanking = React.lazy(() => import('../pages/HomeRanking'))\n\nconst routes = [\n  {\n    path: '/',\n    element: <Navigate to='/home'/>\n  },\n  {\n    path: '/home',\n    element: <Home />,\n    children: [\n      {\n        path: '/home/recommand',\n        element: <HomeRecommand />\n      },\n      {\n        path: '/home/ranking',\n        element: <HomeRanking />\n      }\n    ]\n  },\n  {\n    path: 'profile',\n    element: <Profile />\n  },\n  {\n    path: '*',\n    element: <NotFound />\n  }\n]\n\nexport default routes\n```\n\n在组件中使用（组件必须是函数组件）\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { NavLink, useRoutes } from 'react-router-dom'\n\nimport BaseStyle from './style/base'\n\nimport withRouter from './hoc/withRouter'\nimport routes from './router'\n\n\nexport function App (props) {\n\n  const { navigator } = props.router\n  return (\n    <BaseStyle>\n      <h1>App</h1>\n      <div className=\"header\">\n      </div>\n      <div className=\"content\">\n        {useRoutes(routes)}\n      </div>\n      <div className=\"footer\">\n        <hr />\n        Footer\n      </div>\n    </BaseStyle>\n  )\n}\n\nexport default withRouter(App)\n```\n\n\n\n## 第四站\n\n### Hook\n\nHook 是 React 16.8 的新增的特性，它可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性（比如生命周期）\n\nclass 组件和函数式组件的对比：\n\n- class 组件可以定义自己的 state，用来保存组件自己内部的状态\n  - 函数式组件不可以，因为函数每次调用都会产生新的临时变量\n- class 组件有自己的声明周期，我们可以在对应的生命周期中完成自己的逻辑\n  - 比如在 componentDidMount 中发送网络请求，，并且该声明周期函数只会执行一次\n  - 函数式组件在学习 hooks 之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求\n- class 组件可以在状态改变时只会重新执行 render 函数以及我们希望重新调用的生命周期函数 componentDidUpdate 等\n  - 函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以让他们只调用一次\n\nclass 组件存在的问题：\n\n- 我们在最初编写一个 class 组件时，往往逻辑比较简单，并不会非常复杂，但是随着业务的增多，我们的 class 组件会变得越来越复杂。比u componentDidMount 中可能会包含大量的逻辑代码，包括网络请求，一些事件的监听（还需要再 componentWillUnmount 中移除）。对于这样的 class 实际上非常难拆分，因为他们的逻辑往往混在一起，强行拆分反而会照成设计过度，增加代码的复杂度\n- 再前面为了一些状态的复用，我们需要使用告诫组件\n- redux 中的 connect 或者 react-router 中的 withRouter，这些高阶组件的设计的目的就是为了状态的复用\n- 类似于 Provider、Consumer 来共享一些状态，但是多次使用 Consumer 时，我们的代码会存在多层嵌套，这些代码让我们不管时在编写和设计上来说，都变得非常困呐\n\n只能在函数最外层调用 Hook，不要再循环、条件判断或者钩子函数中调用\n\n只能在 React 的函数组件中调用 Hook，不要在其他 JavaScript 函数中调用\n\n#### useState\n\nuseState 可以传入一个函数，该函数的返回值作为 state\n\n```jsx\nimport React, { memo, useState } from 'react'\n\nconst Counter = memo(() => {\n  const [count, setCount] = useState(1)\n  return (\n    <div>\n      <h2>Count: {count}</h2>\n      <button onClick={e => setCount(count + 1)}>Add 1</button>\n      <button onClick={e => setCount(count - 1)}>Min 1</button>\n    </div>\n  )\n})\n\nexport default Counter\n```\n\n#### useEffect\n\nEffect Hook 可以用来完成一些类似于 class 声明周期的功能\n\n网络秦桧去，手动更新 DOM，一些事件的监听，都是 React 更新 DOM 的一些副作用，对于完成这些功能的 Hook 被称之为 Effect Hook\n\n- 通过使用 useEffect，可以告诉 React 需要在渲染后执行某些操作\n- useEffect 传入的回调将会在 React 执行完成更新 DOM 操作之后，被执行\n- 默认情况下，无论是第一次渲染之后，还是每次更新之后，都会执行这个回调函数\n- useEffect 的回调函数中可以返回一个回调函数，这个回调函数将会在useEffect 下一次回调函数执行前执行\n- 一个函数组件中可以编写多个 useEffect ，这些回调函数将会依次执行\n\n```jsx\nimport React, { memo, useEffect, useState } from 'react'\n\nconst ChangeTitle = memo((props) => {\n  const [counter, setCounter] = useState(0)\n\n  useEffect(() => {\n    // 当前传入的回调函数会在组件被渲染完成后执行\n    // 网络请求/DOM 操作/事件监听 可以在此时\n    console.log('modify counter', counter)\n    document.title = counter\n  }, [counter]) // 当 counter 发生变化时，才会执行\n\n  useEffect(() => {\n    // 这个回调类似于 componentDidMount\n    console.log('event on')\n\n    return () => {\n      // 这个回调类似于 componentDidUnmount\n      console.log('cancel event')\n    }\n  }, []) // 当组件挂载时才会执行\n  \n  return (\n    <div>\n      <h2>Count: {counter}</h2>\n      <button onClick={e => setCounter(counter + 1)}>Change Counter</button>\n    </div>\n  )\n})\n\nexport default ChangeTitle\n```\n\n#### useContext\n\n当 Provider 提供的数据发生变化时，使用该数据对应的组件就会重新渲染\n\n创建上下文对象\n\n```js\nimport { createContext } from 'react'\n\nconst UserContext = createContext()\nconst ThemeContext = createContext()\n\nexport {\n  UserContext,\n  ThemeContext\n}\n```\n\n在组件中使用 Provider\n\n```jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\n\nimport App from './App'\nimport { ThemeContext, UserContext } from './context'\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <ThemeContext.Provider value={{color: 'red', fontSize: '20px'}}>\n    <UserContext.Provider value={{username: 'zhangsan', age: 19}}>\n      <App />\n    </UserContext.Provider>\n  </ThemeContext.Provider>\n)\n```\n\n在子组件中使用 useContext\n\n```jsx\nimport React, { memo, useContext } from 'react'\nimport { ThemeContext, UserContext } from '../context'\n\nconst UseContext = memo((props) => {\n  const user = useContext(UserContext)\n  const theme = useContext(ThemeContext)\n  \n  return (\n    <div>\n      <h2 style={{color: theme.color, fontSize: theme.fontSize}}>UseContext</h2>\n      <p>{user.username} - {user.age}</p>\n    </div>\n  )\n})\n\nexport default UseContext\n```\n\n#### useReducer\n\nuseReducer 仅仅是 useState 的一种替代方案\n\n- 在某些场景下，如果 state 的处理逻辑比较复杂，我们可以通过 useReducer 来对其进行拆分\n- 或者这些修改的 state 需要依赖之前的 state 时，也可以使用\n\n```jsx\nimport React, { memo, useReducer } from 'react'\n\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'increase':\n      return { ...state, count: state.count + 1 }\n    case 'decrease':\n      return { ...state, count: state.count - 1 }\n    case 'add_user':\n      return { ...state, users: action.payload }\n    default:\n      return state\n  }\n}\n\nconst UseReduce = memo(() => {\n  const [state, dispatch] = useReducer(reducer, {count: 0, users: [], recommands: []})\n\n  return (\n    <div>\n      <h2>UseReducer: {state.count}</h2>\n      <button onClick={e => dispatch({type: 'increase'})}>+</button>\n      <button onClick={e => dispatch({type: 'decrease'})}>-</button>\n      {\n        state.users.map(user => (\n          <li key={user.id}>{user.username} - {user.age}</li>\n        ))\n      }\n      <button onClick={e => dispatch({type: 'add_user', payload: [{id: 1, username: 'zhangsan', age: 19}]})}>Add User</button>\n    </div>\n  )\n})\n\nexport default UseReduce\n```\n\n#### useCallback\n\nuseCallback 的实际目的是为了进行性能的优化\n\n- useCallback 会返回一个函数的 memoized （记忆的值）\n- 在依赖不变的情况下，动词定义的时候，返回的值是相同的\n- 使用 useCallback 的目的是不希望子组件进行多次渲染，而不是为了缓存函数\n\n```jsx\nimport React, { memo, useCallback, useRef, useState } from 'react'\n\n\nconst Child = memo((props) => {\n  const {increase} = props\n\n  console.log('child component update')\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <button onClick={increase}>Child Increase</button>\n    </div>\n  )\n})\n\nconst UseCallback = memo(() => {\n  const [count, setCounter] = useState(0)\n  const [message, setMessage] = useState('hello')\n\n  // 在组件每次更新时，都会生成一个新的 increase 函数，将会触发 Child 组件更新\n  // function increase() {\n  //   setCounter(count + 1)\n  // }\n\n  // 使用 useCallback 将会记忆之前的 回调 函数，当 count 发生变化时，才会使用新的回调\n  // const increase = useCallback(function () {\n  //   setCounter(count + 1)\n  // }, [count]) // 当不指定 依赖的对象时，会产生闭包陷阱，无论执行多少次 increase 函数，count 仍然为原来的值 0，界面不会发生更新\n\n  // 进一步进行优化，当修改 count 时，该函数将不更新\n  const countRef = useRef(count) // 使用 useRef 将会创建一个不变对象，该对象永远指向设置的值\n  countRef.current = count\n  const increase = useCallback(function() {\n    setCounter(countRef.current + 1)\n  }, [])\n\n  return (\n    <div>\n      <h2>UseCallback: {count}</h2>\n      <button onClick={increase}>Increase</button>\n      <button onClick={e => setMessage(Math.random())}>changeMessage - {message}</button>\n      <Child increase={increase}></Child>\n    </div>\n  )\n})\n\nexport default UseCallback\n```\n\n#### useMemo\n\nuseMemo 和 useCallback 都是对传入的东西进行缓存（类似于单例），useMemo 执行的结果是传入回调的返回值，useCallback 执行的结果是传入的回调函数\n\n- 进行大量计算操作，需要让相关函数在每次渲染后都不重新执行\n- 对于子组件传递相同对象时，使用 useMemo 进行性能优化\n\n```jsx\nimport React, { memo, useMemo, useRef, useState } from 'react'\n\nfunction calTotal(num) {\n  console.log('execute cal total, only be executed once')\n  for (let i = 0; i < 100; ++ i) num = num + i\n  return num\n}\n\nconst Child = memo((props) => {\n  const user = props.user\n  console.log('child component update only once')\n  return (\n    <div>\n      <h2>Child - {user.username} - {user.age}</h2>\n    </div>\n  )\n})\n\nconst UseMemo = memo(() => {\n  const [count, setCount] = useState(0)\n  const total = useMemo(() => {\n    // 通过 useMemo 缓存计算的结果，该回调只会被执行一次\n    return calTotal(40)\n  }, [])\n\n  const countRef = useRef(count)\n  countRef.current = count\n  // 通过 useMemo 模仿 useCallback\n  const increase = useMemo(() => {\n    return () => {\n      setCount(countRef.current + 1)\n    }\n  }, [])\n\n  // 此时 user 的内存地址将不会发生改变，子组件将不会重新渲染\n  const user = useMemo(() => ({username: 'zhangsan', age: 19}), [])\n\n  return (\n    <div>\n      <h2>UseMemo: count: {count} - total: {total}</h2>\n      <button onClick={increase}>Increase</button>\n      <Child user={user}/>\n    </div>\n  )\n})\n\nexport default UseMemo\n```\n\n#### useRef\n\nuseRef 返回一个 ref 对象，返回的 ref 对象在组件的整个声明周期保持不变\n\n```jsx\nimport React, { memo, useCallback, useRef, useState } from 'react'\n\n// 通过 obj 也可以解决闭包陷阱\nconst obj = {count: 0}\n\nconst UseRef = memo(() => {\n  const [count, setCount] = useState(0)\n  const elementRef = useRef()\n\n  function getRef() {\n    console.log(elementRef.current)\n  }\n  // 通过定义全局对象可以达到和 useRef 同样的效果\n  // obj.count = count\n  // const increase = useCallback(() => {\n  //   // setCount(count + 1)\n  //   setCount(obj.count + 1)\n  // }, [])\n  \n  const countRef = useRef(count)\n  countRef.current = count\n  const increase = useCallback(() => {\n    setCount(countRef.current + 1)\n  }, [])\n\n  return (\n    <div>\n      <h2 ref={elementRef}>UseRef: {count}</h2>\n      <button onClick={getRef}>Get Ref</button>\n      <button onClick={increase}>Increase</button>\n    </div>\n  )\n})\n\nexport default UseRef\n```\n\n#### useImperativeHandler\n\n```jsx\nimport React, { forwardRef, memo, useImperativeHandle, useRef } from 'react'\n\nconst Child = memo(forwardRef((props, ref) => {\n  const inputRef = useRef()\n\n  // 通过 useImperativeHandler 可以限制父组件对子组件的控制权限\n  ref = useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus()\n      }\n    }\n  })\n  return (\n    <div>\n      <h2>Child</h2>\n      <input type=\"text\" ref={inputRef} />\n    </div>\n  )\n}))\n\nconst UseImperativeHandle = memo(() => {\n  const inputRef = useRef()\n  function focus(){\n    inputRef.current.focus()\n    console.log(inputRef.current.value)\n  }\n  return (\n    <div>\n      <h2>UseImperativeHandle</h2>\n      <Child ref={inputRef}></Child>\n      <button onClick={focus}>Focus</button>\n    </div>\n  )\n})\n\nexport default UseImperativeHandle\n```\n\n#### useLayoutEffect\n\n- useEffect 会在渲染的内容更新到 DOM 上后执行，不会阻塞 DOM 的更新\n- useLayoutEffect 会在渲染的内容更新到 DOM 上之前执行，会阻塞 DOM 的更新\n\n官方更推荐使用 useEffect 而不是 useLayoutEffect\n\n```jsx\nimport React, { memo, useEffect, useLayoutEffect } from 'react'\n\nconst UseLayoutEffect = memo(() => {\n  useLayoutEffect(() => {\n    console.log('useLayoutEffect')\n  })\n  useEffect(() => {\n    console.log('useEffect')\n  })\n  return (\n    <div>UseLayoutEffect</div>\n  )\n})\n\nexport default UseLayoutEffect\n```\n\n#### useTransition\n\n返回一个状态值表示过度任务的等待状态，以及启动一个该过度任务的函数。它告诉 react 对于某部分任务的更新优先级较低，可以稍后进行更新\n\n```jsx\nimport React, { memo, useState, useTransition } from 'react'\n\nconst itemList= new Array(1000).fill(1).map((item, index) => 'index' + index)\n\nconst App = memo((props) => {\n  const [items, setItems] = useState(itemList)\n  // pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false\n  const [pending, setTransition] = useTransition()\n\n  function valueChangeHandle(e) {\n    // 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿\n    // setItems(itemList.filter(item => item.includes(e.target.value)))\n\n    setTransition(() => {\n      setItems(itemList.filter(item => item.includes(e.target.value)))\n    })\n  }\n\n  return (\n    <div>\n      <h1>App</h1>\n      <input type=\"text\" onInput={valueChangeHandle} />\n      { pending && <p>is ready to loading</p>}\n      <ul>\n        {\n          items.map(item => {\n            return <li key={item}>{item}</li>\n          })\n        }\n      </ul>\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n#### useDeferredValue\n\nuseDeferredValue 接受一个值，并返回该值的副本，该副本将推迟到更紧急的更新之后。他和 useTransition 类似\n\n```jsx\nimport React, { memo, useDeferredValue, useState, useTransition } from 'react'\n\nconst itemList= new Array(1000).fill(1).map((item, index) => 'index' + index)\n\nconst App = memo((props) => {\n  const [items, setItems] = useState(itemList)\n  // 将返回 items 的副本\n  const deferredItems = useDeferredValue(items)\n  // pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false\n  const [pending, setTransition] = useTransition()\n\n  function valueChangeHandle(e) {\n    // 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿\n    // setItems(itemList.filter(item => item.includes(e.target.value)))\n\n    setTransition(() => {\n      setItems(itemList.filter(item => item.includes(e.target.value)))\n    })\n  }\n\n  return (\n    <div>\n      <h1>App</h1>\n      <input type=\"text\" onInput={valueChangeHandle} />\n      { pending && <p>is ready to loading</p>}\n      <ul>\n        {\n          // 此时的界面渲染将会被推迟\n          deferredItems.map(item => {\n            return <li key={item}>{item}</li>\n          })\n        }\n      </ul>\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n\n\n\n\n### 自定义 Hook\n\n#### 自定义生命周期 Hook\n\n```jsx\nimport React, { memo, useEffect, useState } from 'react'\n\n/*\n 输出顺序：\n child componentDidMount\n father componentDidMount\n child componetWillUnmount （点击 toggle 按钮后）\n child componentDidMount （再次点击 toggle 按钮后）\n*/\nconst lifeStyle = (cname) => {\n  useEffect(() => {\n    console.log(cname, 'componentDidMount')\n    return () => {\n      console.log(cname, 'componetWillUnmount')\n    }\n  }, [])\n}\n\nconst Child = memo(() => {\n  lifeStyle('child')\n  return (\n    <h2>Child</h2>\n  )\n})\n\nconst CustomerLifeStyle = memo(() => {\n  const [isShow, setIsShow] = useState(true)\n  lifeStyle('father')\n  return (\n    <div>\n      <h2>LifeStyle</h2>\n      <button onClick={e => setIsShow(!isShow)}>toggle destroy</button>\n      { isShow && <Child />}\n    </div>\n  )\n})\n\nexport default CustomerLifeStyle\n```\n\n#### 自定义监控滚动位置 Hook\n\n```jsx\nimport { useEffect, useState } from \"react\"\n\nconst useScroll = () => {\n  const [scrollX, setScrollX] = useState(0)\n  const [scrollY, setScrollY] = useState(0)\n\n  useEffect(() => {\n    window.addEventListener('scroll', (e) => {\n      setScrollX(window.scrollX)\n      setScrollY(window.scrollY)\n    })\n\n    return () => {\n      window.removeEventListener('scroll')\n    }\n  }, [])\n\n  return [scrollX, scrollY]\n}\n\nimport React, { memo } from 'react'\n\nconst CustomerScroll = memo(() => {\n  const [scrollX, scrollY] = useScroll()\n  return (\n    <div style={{height: '50vh', width: '150vh'}}>CustomerScroll - [{scrollX}] - [{scrollY}]</div>\n  )\n})\n\nexport default CustomerScroll\n```\n\n### Redux 中的 Hook\n\nuseSelector 用于获取当前的 state\n\nuseDispatch 用于分发事件\n\n定义 store\n\n```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './features/count'\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n\nexport default store\n```\n\n定义 reducer\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\"\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    count: 10\n  },\n  reducers: {\n    addCount(state, action) {\n      state.count += action.payload\n    },\n    minCount(state, action) {\n      state.count -= action.payload\n    }\n  }\n})\n\nexport const { addCount, minCount } = counterSlice.actions\n\nexport default counterSlice.reducer\n```\n\n在组件中使用\n\n```jsx\nimport React, { memo } from 'react'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport { addCount, minCount } from './store/features/count'\n\nconst App = memo((props) => {\n  const { count, addCounter, minCounter } = props\n\n  // 使用 redux 钩子函数引入\n  const state = useSelector((state) => {\n    return state.counter\n  })\n  const dispatch = useDispatch()\n  \n  return (\n    <div>\n      <h1>App</h1>\n      <p>{count}</p>\n      <button onClick={e => addCounter(1)}>Add</button>\n      <button onClick={e => minCounter(1)}>Min</button>\n\n      <hr />\n\n      <h2>New App</h2>\n      <p>{state.count}</p>\n      <button onClick={e => dispatch(addCount(1))}>Add</button>\n      <button onClick={e => dispatch(minCount(1))}>Min</button>\n    </div>\n  )\n})\n\n// 之前引入 redux 方式\nconst mapStateToProps = (state) => ({\n  count: state.counter.count\n})\nconst mapDispatchToProps = (dispatch) => ({\n  addCounter: (num) => dispatch(addCount(num)),\n  minCounter: (num) => dispatch(minCount(num))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n```\n\n\n\n当使用 useSelector 获取状态时，当改变状态时，所有使用到 useSelector 的组件都会重新渲染，使用 shallowEqual 进行浅层比较\n\n```jsx\nimport React, { memo } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\nimport { addCount, minCount, changeMessage } from './store/features/count'\n\nconst Home = memo(() => {\n  console.log('Home render')\n  // 此时，父组件更改 state ，该组件将会被重新渲染\n  // const { message } = useSelector((state) => state.counter)\n  // 使用 shallowEqual 父组件更改的内容子组件没有使用，子组件将不会重新渲染\n  const message = useSelector((state) => state.counter.message, shallowEqual)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <h2>Home: {message}</h2>\n      <button onClick={e => dispatch(changeMessage('home'))}>Change Message</button>\n    </div>\n  )\n})\n\nconst App = memo((props) => {\n  // 使用 redux 钩子函数引入\n  const state = useSelector((state) => {\n    return state.counter\n  })\n  const dispatch = useDispatch()\n  console.log('App render')\n  return (\n    <div>\n      <h1>App</h1>\n      <p>{state.count}</p>\n      <button onClick={e => dispatch(addCount(1))}>Add</button>\n      <button onClick={e => dispatch(minCount(1))}>Min</button>\n      <Home />\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n\n\n### 服务端渲染\n\n#### useId\n\nuseId 是一个用于生成横跨服务器端和客户端的稳定的唯一 ID 的同时避免 hydration 不匹配的 Hook\n\n- useId 是用于 react 的同构应用开发的，前端的 SPA 页面并不需要使用\n- useId 可以保证应用程序在客户端和服务端生成唯一的 ID，这样可以有效的避免通过一些手段生成的 id 不一致，造成 hydration mismatch\n\n\n\n### 项目搭建\n\n由于使用 create-react-app 命令创建项目时，所有关于 webpack 的配置都被隐藏可以通过如下方式进行项目的配置\n\n1. 使用 eject 命令导出（不可逆）`npm run eject` \n2. 使用 craco `npm install @craco/craco@alpha -D` （推荐）\n\ncreate-react-app config\n\ncraco 进行对项目进行配置 [详细配置信息](https://craco.js.org/docs/configuration/devserver/) \n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n      '@components': path.resolve(__dirname, './src/components'),\n      '@utils': path.resolve(__dirname, './src/utils')\n    },\n    configure: {\n      resolve: {\n        extensions: ['.jsx', 'js', '.ts', '.tsx', '.css', '.scss', '.less']\n      }\n    }\n  },\n  devServer: {\n    host: '0.0.0.0',\n    port: 9000,\n    open: false\n  }\n}\n```\n\n并需要在 package.json 文件中使用 craco 命令启动项目\n\n```json\n  \"scripts\": {\n    \"start\": \"craco start\",\n    \"build\": \"crac0 build\",\n    \"test\": \"craco test\",\n    \"eject\": \"react-scripts eject\"\n  }\n```\n\n","source":"_posts/react.md","raw":"---\ntitle: React 学习笔记\ndate: 2025-04-19 20:31:42\ntags: [React]\ncategories: [编程]\n---\n\n# React 学习\n\n\n\n## 第一站\n\n一个简单的例子\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n  \n  <script crossorigin src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n  <script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n  <!-- 添加对 jsx 语法的支持 -->\n  <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n  <script type=\"text/babel\">\n    const app = ReactDOM.createRoot(document.querySelector('#app'))\n    let text = 'Hello World'\n\n    function changeText() {\n      text = 'Hello React'\n      render()\n    }\n\n    function render() {\n      app.render(\n        <div>\n          <h1>{text}</h1>\n          <button onClick={changeText}>Click</button>\n        </div>\n      )\n    }\n\n    render()\n  </script>\n</body>\n</html>\n```\n\n\n\n### 使用类的方式创建组件\n\n```jsx\nimport React, { Component } from \"react\"\nimport About from './About'\n\nexport default class extends Component {\n  constructor() {\n    super()\n    this.state = {\n      message: 'Hello world!',\n      count: 0\n    }\n  }\n\n  componentDidMount() {\n    console.log('after component mount')\n  }\n\n  componentDidUpdate() {\n    console.log('after component update')\n  }\n\n  componentWillUnmount() {\n    console.log('before component unmount')\n  }\n\n  render() {\n    const {count} = this.state\n\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n        <About></About>\n        <h2>{count}</h2>\n        <button onClick={() => this.setState({count: count + 1})}>Add One</button>\n      </div>\n    )\n  }\n}\n```\n\n#### 类组件的声明周期\n\n- construct：在组件被实例化的时候执行\n  - 如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数\n  - 通过给 this.state 赋值对象来初始化内部的 state\n  - 为事件绑定实例（this）\n- render：组件实例化或更新界面中的变量都会被重新执行\n- componentDidMount：组件被挂载后会执行\n  - 依赖于 DOM 的操作可以在这里进行\n  - 在此处发送网络请求就是最好的地方\n  - 可以在此处添加一些订阅（会在 componentWillUnmount 取消订阅）\n- componentDidUpdate：组件被更新后会执行（render 先于此函数执行）\n  - 当组件更新后，可以在此处对 DOM 进行操作\n  - 如果对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）\n- componentWillUnmount：组件被销毁前执行\n  - 在此方法中执行必要的清理操作，例如：清除 timer，取消网络请求或清除在 componentDidMount 中创建的订阅等\n\n#### 父子组件通信\n\nFather component\n\n```jsx\nimport React, { Component } from 'react'\nimport Child from './Child'\n\nexport default class Father extends Component {\n  constructor() {\n    super()\n    this.state = { count: 0 }\n  }\n\n  render() {\n    const { count } = this.state\n    return (\n      <div>\n        <h2>Father</h2>\n        <p>{count}</p>\n\n        <Child data={['father transfer data1', 'father transfer data2']}\n               title={123}\n               changeNumber={(num) => this.setState({count: count + num})} />\n      </div>\n    )\n  }\n}\n```\n\nChild component\n\n```jsx\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Child extends Component {\n  // 可以通过这种方式设置默认值，此设置将会覆盖外部设置的所有默认值\n  static defaultProps = {\n    innerDefaultValue: 'inner default value'\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  addNumber(num) {\n    this.props.changeNumber(num)\n  }\n\n  render() {\n    const {data, title, defaultValue, innerDefaultValue} = this.props\n\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{title}</p>\n        <p>{defaultValue}</p>\n        <p>{innerDefaultValue}</p>\n        <button onClick={() => this.addNumber(1)}>Add 1</button>\n        <button onClick={() => this.addNumber(-1)}>Dec 1</button>\n        <ul>\n          {\n            data?.map(item => <li key={item}>{item}</li>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 未传入属性进行限制\nChild.propTypes = {\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string,\n  changeNumber: PropTypes.func.isRequired\n}\n\n// 设置默认值\n// Child.defaultProps = {\n//   defaultValue: 'default'\n// }\n\nexport default Child\n```\n\n\n\n### 使用函数式定义组件\n\n```jsx\n/*\n  1. 函数组件没有声明周期\n  2. this 关键字不能指向组件实例（因为没有组件实例）\n  3. 没有内部状态\n*/\nexport default function About() {\n  return <div>About</div>\n}\n```\n\n\n\n### 对参数进行校验\n\n对于传递给子组件的数据，有时候我们可能希望进行验证\n\n- 项目中默认继承了 Flow 或者 TypeScript，那么直接就可以进行类型验证\n- 但是，即使我们没有使用 Flow 或者 TypeScript，也可以通过 prop-types 库来进行参数验证\n\n安装 prop-types 库\n\n```bash\nnpm install prop-types -D\n```\n\n在组件传值进行类型限制\n\n```jsx\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Child extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const {data, title, defaultValue} = this.props\n\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{title}</p>\n        <p>{defaultValue}</p>\n        <ul>\n          {\n            data?.map(item => <li key={item}>{item}</li>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 未传入属性进行限制\nChild.propTypes = {\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string\n}\n\n// 设置默认值\nChild.defaultProps = {\n  defaultValue: 'default'\n}\n\nexport default Child\n```\n\n\n\n### 插槽\n\n在插槽组件中拿到 this.props 的 children 属性，该属性包含了父组件在使用该组件传递的元素\n\n插槽组件\n\n```jsx\nimport { Component } from 'react'\n\nimport './index.css'\n\nexport default class extends Component {\n  render() {\n    // 接收参数一\n    // const {children} = this.props\n\n    // return (\n    //   <div className='nav-bar'>\n    //     <div className='left'>{children[0]}</div>\n    //     <div className='center'>{children[1]}</div>\n    //     <div className='right'>{children[2]}</div>\n    //   </div>\n    // )\n\n    // 接收参数二\n    const {leftSlot, centerSlot, rightSlot} = this.props\n    return (\n      <div className='nav-bar'>\n        <div className=\"left\">{leftSlot('left')}</div>\n        <div className=\"center\">{centerSlot}</div>\n        <div className=\"right\">{rightSlot}</div>\n      </div>\n    )\n  }\n}\n```\n\n父组件\n\n```jsx\nimport { Component } from \"react\"\n\nimport NavBar from \"../NavBar\"\n\nexport default class extends Component {\n  render() {\n    // 传递方式一\n    // return (\n    //   <div>\n    //     <h1>Hello world</h1>\n    //     <NavBar>\n    //       {/* 当只传递一个元素时，子元素接收到 children 不为数组，只为该元素 */}\n    //       <button>left button</button>\n    //       <input type=\"text\" />\n    //       <i>三</i>\n    //     </NavBar>\n    //   </div>\n    // )\n\n    // 传递方式二\n    return (\n      <div>\n        <h1>Hello world</h1>\n        {/* 通过使用函数的方式达到作用域插槽的效果 */}\n        <NavBar leftSlot={text => <button>{text}</button>}\n                centerSlot={<input />}\n                rightSlot={<i>三</i>}/>\n      </div> \n    )\n  }\n}\n```\n\n\n\n### 跨组件通信\n\n1. 定义上下文对象\n\n   主题上下文对象\n\n```js\nimport { createContext } from \"react\"\n\n// 设置默认值，当需要使用该上下文的组件并没有被 Provider 包裹时，将会显示该值\nconst ThemeContext = createContext({color: '#999', backgroundColor: '#eee'})\n\nexport default ThemeContext\n```\n\n​\t用户上下文\n\n```jsx\nimport { createContext } from \"react\"\n\nconst UserContext = createContext()\n\nexport default UserContext\n```\n\n1. 在需要传递数据的组件中使用该上下文并传递数据\n\n   ```jsx\n   import { Component } from \"react\"\n   \n   import ThemeContext from './context/ThemeContext'\n   import UserContext from './context/UserContext'\n   import Father from \"./components/Father\"\n   \n   \n   export default class extends Component {\n     render() {\n       return (\n         <div>\n           <h1>Hello world</h1>\n           {/* 将需要使用到该上下文的元素使用 Provider 包裹，并传入 value */}\n           <UserContext.Provider value={{username: 'zhangsan', age: 18}}>\n             <ThemeContext.Provider value={{color: 'red', backgroundColor: '#9900aa'}}>\n               <Father />\n             </ThemeContext.Provider>\n           </UserContext.Provider>\n         </div>\n       )\n     }\n   }\n   ```\n\n2. 在需要引用该值的组件中导入该上下文对象，并设置该子组件的 contextTypes 属性为该上下文对象\n\n   ```jsx\n   import React, { Component } from 'react'\n   \n   import ThemeContext from '../../context/ThemeContext'\n   import UserContext from '../../context/UserContext'\n   \n   class Child extends Component {\n     render() {\n       // 获取该上下文对象的所有值\n       const {color, backgroundColor} = this.context\n   \n       return (\n         <div style={{color: color, backgroundColor: backgroundColor}}>\n           <h3>Child</h3>\n           <UserContext.Consumer>\n             {\n               user => {\n                 return (\n                   <ul>\n                     <li>username: {user.username}</li>\n                     <li>age: {user.age}</li>\n                   </ul>\n                 )\n               }\n             }\n           </UserContext.Consumer>\n         </div>\n       )\n     }\n   }\n   // 设置该组件的 contextType 为上下文对象\n   Child.contextType = ThemeContext\n   \n   export default Child\n   ```\n\n   在函数式组件中使用该上下文\n\n   ```jsx\n   import ThemeContext from \"../../context/ThemeContext\"\n   \n   function ChildMain () {\n     return(\n       <div>\n         <ThemeContext.Consumer>\n           {\n             value => {\n               return <div style={{color: value.color, backgroundColor: value.backgroundColor}}>\n                 child main\n               </div>\n             }\n           }\n         </ThemeContext.Consumer>\n       </div>\n     )\n   }\n   \n   export default ChildMain\n   ```\n\n   \n\n### 事件总线\n\n事件总线类的定义\n\n```js\nclass EventBus {\n\n  eventList = new Map()\n\n  /**\n   * 触发事件\n   * @param {String} eventName \n   * @param  {...any} args \n   */\n  emit(eventName, ...args) {\n    if (!this.eventList.has(eventName)) {\n      throw new Error('No such event emit')\n    }\n    const funs = this.eventList.get(eventName)\n    for (let fun of funs) {\n      fun(...args)\n    }\n  }\n\n  /**\n   * 监听事件\n   * @param {String} eventName \n   * @param {Function} callback \n   * @param {Object} that \n   */\n  on(eventName, callback, that) {\n    if (this.eventList.has(eventName)) {\n      this.eventList.get(eventName).add(callback.bind(that))\n    } else {\n      this.eventList.set(eventName, new Set([callback.bind(that)]))\n    }\n  }\n\n  /**\n   * 销毁事件\n   * @param {String} eventName \n   */\n  off(eventName) {\n    if (!this.eventList.has(eventName)) {\n      throw new Error('No such event emit')\n    }\n    this.eventList.delete(eventName)\n  }\n}\n\nexport default EventBus\n```\n\n定义一个事件总线类\n\n```js\nimport EventBus from \"@/utils/eventBus\"\n\nexport default new EventBus()\n```\n\n发送事件组件使用 emit 发送事件\n\n```jsx\nimport { Component } from \"react\"\n\nimport eventBus from '@/events/EventBus'\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      title: 'Hello Father'\n    }\n  }\n\n  componentDidMount() {\n    console.log('Father component Mounted')\n  }\n\n  componentDidUpdate() {\n    console.log('Father component Updated')\n  }\n\n  changeTitle() {\n    eventBus.emit('UpdateTitle', {name: 'zhangsan', age: 19})\n    this.setState({\n      title: 'Hello Father Component'\n    })\n  }\n\n  render() {\n    const { title } = this.state\n\n    return (\n      <div>\n        <h2>Father Component</h2>\n        <button onClick={() => this.changeTitle()}>{title}</button>\n      </div>\n    )\n  }\n}\n```\n\n监听事件组件使用 on 监听事件\n\n```jsx\nimport React, { Component } from 'react'\n\nimport Father from '@components/Father'\nimport eventBus from '@/events/EventBus'\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      appName: 'App'\n    }\n  }\n\n  componentDidMount() {\n    console.log('App component Mounted')\n    eventBus.on('UpdateTitle', (args) => {\n      console.log(args)\n      this.setState({\n        appName: 'App Component'\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    console.log('App component updated')\n  }\n\n  render() {\n    const { appName } = this.state\n\n    return (\n      <div>\n        <h1>{appName}</h1>\n        <Father></Father>\n      </div>\n    )\n  }\n}\n```\n\n输出结果\n\n```bash\nFather component Mounted\nApp component Mounted\n{name: 'zhangsan', age: 19}\nFather component Updated\nApp component updated\n```\n\n// TODO 由此可以推断出，挂载组件从内往外，更新组件从外往内\n\n\n\n### setState 函数\n\nsetState 为异步函数，设计为异步函数可以显著提升性能\n\n- 如果每次调用 setState 都进行一次更新，那么意味着 render 函数会被频繁调用，界面重新渲染这样效率很低\n- 最好的办法应该是获取到多个更新，之后进行批量更新\n- 如果同步更新了 state，但是还没有执行 render 函数，那么 state 和 props 不能保持同步\n  - state 和 props 不能保持一致性，在开发过程中产生很多的问题\n\n```jsx\nimport { Component } from \"react\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  addCount() {\n    // 通过回调的方式处理更新的数据\n    this.setState((state, props) => {\n      // 可以编写一些对新的 state 的处理逻辑，\n      // 可以获得之前的 state 和 props 对象\n      console.log(state, props)\n      return {\n        count: state.count + 1\n      }\n    })\n\n    // setState 是一个异步函数，在这个地方将会打印修改之前的 state\n    console.log(this.state)\n\n    // 通过传入回调函数，该回调函数将会在更新之后执行\n    this.setState({\n      count: this.state.count + 1\n    }, () => {\n      // componentDidUpdate 声明周期函数将会先于这个函数执行\n      console.log(this.state)\n    })\n\n    // 在 react 18 之前如下代码（setTimeout 或者 原生 dom 事件中 或者 promise 中）将会输出修改后的，也即 setState 变成同步函数\n    // 在 react 18 及之后，如下代码仍然是异步，输出也是修改前的 count\n    setTimeout(() => {\n      this.setState({count: this.state.count + 1})\n      console.log('setTimeout function', this.state.count)\n    }, 0)\n\n    document.querySelector('button').onclick = () => {\n      this.setState({count: this.state.count + 1})\n      console.log('onclick event', this.state.count)\n    }\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n将 setState 变为同步可以通过 flushSync 函数\n\n```jsx\nimport { Component } from \"react\"\nimport { flushSync } from \"react-dom\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  addCount() { \n    flushSync(() => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    })\n    // 这里将会拿到更新之后的结果\n    console.log(this.state.count)\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n\n\n### SCU（should component update）\n\n```jsx\nimport { Component } from \"react\"\nimport { flushSync } from \"react-dom\"\n\nexport default class extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated')\n  }\n\n  // 此种方式成为 SCU should component update\n  // 当此函数返回 false 时不会重新渲染，当返回 true 时会重新渲染\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps, nextState, nextProps == this.props, nextState.count == this.state.count)\n    if (nextProps == this.props && nextState.count == this.state.count) {\n      // 不进行重新渲染\n      return false\n    }\n    return true\n  }\n\n  addCount() { \n    flushSync(() => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    })\n    // 这里将会拿到更新之后的结果\n    console.log(this.state.count)\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n      </div>\n    )\n  }\n}\n```\n\n### PureComponent 和 memo\n\n> PureComponent 相当于使用 shouldComponentUpdate，其在该函数中进行比较 state 和 props.\n>\n> 其比较的为浅层的，当比较的是引用类型的数据时，其内部属性发生改变，将不会调用 render 函数\n>\n> 因此在对 state 中的属性进行修改时，应创建新对象\n>\n> memo 为 函数式组件的 PureComponent\n\n```jsx\nimport { PureComponent } from \"react\"\nimport Child from \"@components/Child\"\nimport ChildFunction from \"@components/ChildFunction\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('app updated')\n  }\n\n  addCount() { \n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  render() {\n    const {count} = this.state\n    const {title} = this.props\n    console.log('App render')\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n        <Child count={count}></Child>\n        <ChildFunction message={title}></ChildFunction>\n      </div>\n    )\n  }\n}\n```\n\nChild\n\n```jsx\nimport { PureComponent } from \"react\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      message: 'child message'\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('child update')\n  }\n\n  render() {\n    console.log('child render')\n    return (\n      <div>\n        <h2>Child</h2>\n        <p>{this.state.message}</p>\n      </div>\n    )\n  }\n}\n```\n\nChildFunction\n\n```jsx\nimport { memo } from \"react\"\n\nconst ChildFunction = memo(function(props) {\n  return (\n    <div>\n      <h2>Child Function</h2>\n      <p>{props.message}</p>\n    </div>\n  )\n})\n\nexport default ChildFunction\n```\n\n修改对象触发 render 更新\n\n```jsx\nimport { PureComponent } from \"react\"\nimport Child from \"@components/Child\"\nimport ChildFunction from \"@components/ChildFunction\"\n\nexport default class extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      count: 10,\n      books: [\n        {name: 'book1', price: 80, count: 1},\n        {name: 'book2', price: 78, count: 1},\n        {name: 'book3', price: 90, count: 3},\n      ]\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('app updated')\n  }\n\n  addCount() { \n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  addBook() {\n    const books = [...this.state.books]\n    books.push({name: 'book4', price: 77, count: 1})\n    this.setState({\n      books: books\n    })\n  }\n\n  addBookCount(index) {\n    const books = [...this.state.books]\n    books[index].count ++\n    this.setState({\n      books: books\n    })\n  }\n\n  render() {\n    const {count, books} = this.state\n    const {title} = this.props\n    console.log('App render')\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{count}</p>\n        <button onClick={() => this.addCount()}>+</button>\n        <Child count={count}></Child>\n        <ChildFunction message={title}></ChildFunction>\n        <hr />\n        <ul>\n          {\n            books.map((book, index) => {\n              return (\n                <li key={index}>\n                  {book.name}-{book.price}-{book.count}\n                  <button onClick={() => this.addBookCount(index)}>Add 1</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n        <button onClick={() => this.addBook()}>Add New Book</button>\n      </div>\n    )\n  }\n}\n```\n\n\n\n### 获取组件实例 ref\n\n父组件\n\n```jsx\nimport React, { createRef, PureComponent } from 'react'\nimport Child from '@components/Child'\nimport ChildFunction from './components/ChildFunction'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    \n    // 推荐使用这种方式\n    this.node = createRef(),\n    this.node2 = null\n    this.child = createRef()\n    this.functionChild = createRef()\n  }\n\n  componentDidMount() {\n    console.log(this.node.current)\n    console.log(this.node2)\n    this.child.current.test()\n    console.log(this.child.current, this.child.current.test)\n    console.log(this.functionChild.current)\n  }\n\n  btnClick(e) {\n    console.log(e.target)\n    console.log(this.refs)\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>App</h1>\n        <div ref={this.node}>Ref1</div>\n        <div ref={e => this.node2 = e}>Ref2</div>\n        <button onClick={e => this.btnClick(e)}>button</button>\n        <Child ref={this.child}></Child>\n        <ChildFunction ref={this.functionChild} message='hello child function'></ChildFunction>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class Child extends PureComponent {\n  test() {\n    console.log('child test function execution!')\n  }\n  \n  render() {\n    return (\n      <h2>Child</h2>\n    )\n  }\n}\n\nexport default Child\n```\n\n函数子组件\n\n```jsx\nimport { forwardRef } from \"react\"\n\nconst ChildFunction = forwardRef(function (props, ref) {\n  console.log('child function props', props)\n  return (\n    <div>\n      <h2>Child FUnction</h2>\n      <p ref={ref}>child function ref</p>\n    </div>\n  )\n})\n\nexport default ChildFunction\n```\n\n\n\n### 受控组件\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      username: 'zhangsan'\n    }\n  }\n\n  inputChange(e) {\n    console.log(e.target.value)\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  render() {\n    const { username } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <p>{username}</p>\n        {/* 受控组件，当没有绑定 value 时为非受控组件 */}\n        <input type=\"text\" value={username} onChange={e => this.inputChange(e)} />\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n## 第二站\n\n### 受控组件的表单填写\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      username: '',\n      password: '',\n      hobbies: [\n        {id: 'sing', name: 'sing', isChecked: false},\n        {id: 'dance', name: 'dance', isChecked: false},\n        {id: 'rap', name: 'rap', isChecked: false},\n      ],\n      fruits: []\n    }\n  }\n\n  inputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  submitForm(e) {\n    e.preventDefault()\n    console.log(this.state.username, this.state.password)\n    console.log(this.state.hobbies.filter(hobby => hobby.isChecked).map(hobby => hobby.name))\n    console.log(this.state.fruits)\n  }\n\n  checkHobby(index) {\n    const hobbies = [...this.state.hobbies]\n    hobbies[index].isChecked = !hobbies[index].isChecked\n    this.setState({\n      hobbies: hobbies\n    })\n  }\n\n  selectFruit(e) {\n    const fruits = Array.from(e.target.selectedOptions).map(fruit => fruit.value)\n\n    this.setState({\n      fruits: fruits\n    })\n  }\n\n  render() {\n    const { username, password, hobbies, fruits } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <form onSubmit={e => this.submitForm(e)}>\n          {/* 受控组件，当没有绑定 value 时为非受控组件 */}\n          <label htmlFor=\"username\">\n            username: \n            <input id=\"username\" name='username' type=\"text\" value={username} onChange={e => this.inputChange(e)} />\n          </label>\n          <label htmlFor=\"password\">\n            password: \n            <input id=\"password\" name='password' type=\"password\" value={password} onChange={e => this.inputChange(e)} />\n          </label>\n\n          <div>\n            {\n              hobbies.map((hobby, index) => {\n                return (\n                  <label htmlFor={hobby.id} key={hobby.name}>\n                    {hobby.name}: \n                    <input id={hobby.id} type='checkbox'\n                          checked={hobby.isChecked}\n                          onChange={e => {this.checkHobby(index)}}/>\n                  </label>\n                )\n              })\n            }\n          </div>\n\n          <div>\n            <select value={fruits} multiple onChange={e => this.selectFruit(e)}>\n              <option value=\"apple\">Apple</option>\n              <option value=\"orange\">Orange</option>\n              <option value=\"banana\">Banana</option>\n            </select>\n          </div>\n\n          <input type='submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 非受控组件的表单\n\n```jsx\nimport React, { createRef, PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  constructor() {\n    super()\n    this.state = {\n      notControlled: 'default value'\n    }\n    this.notControlledComponent = createRef()\n  }\n\n  submitForm(e) {\n    e.preventDefault() console.log(this.notControlledComponent.current.value)\n  }\n\n\n  render() {\n    const { notControlled } = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <form onSubmit={e => this.submitForm(e)}>\n          <label htmlFor=\"not-controlled\">\n            not controlled component:\n            <input id='not-controlled' type=\"text\" ref={this.notControlledComponent} defaultValue={notControlled}/>\n          </label>\n\n          <input type='submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 高阶组件\n\n高阶组件的英文为 Higher-Order Components，简称为 HOC\n\n高阶组件的参数为组件，返回值为新组件的函数\n\n也即，高阶组件本身不是一个组件而是一个函数，这个函数的参是一个组件，返回值也是一个组件\n\n```js\nfunction HOC(Component) {\n    return NewComponent\t\n}\n```\n\n高阶组件函数通过上下文为使用该高阶组件的组件传递上下文\n\n```jsx\nimport ThemeContext from '../context/ThemeContext'\n\nexport default function (Component) {\n  return props => (\n    <ThemeContext.Consumer>\n      {\n        value => {\n          return (\n            <Component {...value} {...props}/>\n          )\n        }\n      }\n    </ThemeContext.Consumer>\n  )\n}\n```\n\n父组件通过上下文对象传值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport ThemeContext from './context/ThemeContext'\nimport About from './components/About'\n\nexport class App extends PureComponent {\n\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        <ThemeContext.Provider value={{color: 'red', backgroundColor: '#eee'}}>\n          <About></About>\n        </ThemeContext.Provider>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件中的使用上下文传来的值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport WithContext from '../hoc/WithContext'\n\nexport class About extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2>About: {this.props.color}-{this.props.backgroundColor}</h2>\n      </div>\n    )\n  }\n}\n\nexport default WithContext(About)\n```\n\n#### 高阶函数的意义\n\n早期 React 提供组件之间一种复用方式时 mixin，目前已经不再使用\n\n- Mixin 可能会相互依赖，相互耦合，不利于代码维护\n- 不同的 Mixin 中的方法可能会互相冲突\n  - MIxin 非常多时，组件处理起来会比较麻烦，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性\n\nHOC 的缺陷：\n\n- HOC 需要在原组件上进行包裹或者嵌套，如果大量使用 HOC，将会产生非常多的嵌套，这让调试变得非常困难\n- HOC 可以劫持 props，在不遵守约定的请胯下也可能造成冲突\n\nHooks 的出现，是开创性的，它解决了很多的 React 之前存在的问题：\n\n- this 指向问题\n- hoc 嵌套复杂度问题\n\n\n\n### Poral\n\n通过使用 createPortal 函数可以设置元素绑定到别的 dom 上\n\n自定义 modal 通过 portal 渲染到别的 dom 元素上\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { createPortal } from 'react-dom'\n\nexport class Modal extends PureComponent {\n  render() {\n    return (\n      <div>\n        {\n          createPortal(this.props.children, document.querySelector('#app'))\n        }\n      </div>\n    )\n  }\n}\n\nexport default Modal\n```\n\n在组件中使用该组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { createPortal } from 'react-dom'\nimport Modal from './components/Modal'\n\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        {\n          // 绑定到 app dom 上\n          createPortal(<h2>App Portal</h2>, document.querySelector('#app'))\n        }\n        <Modal>\n          <h2>Modal Portal Children 1</h2>\n          <h3>Modal Portal Children 2</h3>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n### Fragment\n\n由于 react 最外层必须为一个标签，导致页面渲染之后多使用一个div，可以通过 Fragment 组件，此时界面将不会多渲染一个标签\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\n\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      list: ['name', 'age']\n    }\n  }\n  render() {\n    const {list} = this.state\n    return (\n      // <Fragment>\n      //   <h1>App</h1>\n      //   <h2>App 2</h2>\n      // </Fragment>\n\n      // 语法糖写法\n      // <>\n      //   <h1>App</h1>\n      //   <h2>App 2</h2>\n      // </>\n      <>\n        {\n          // 此时必须要写 Fragment，不能使用语法糖的格式\n          list.map(item => {\n            return (\n              <Fragment key={item}>\n                <li>{item}</li>\n              </Fragment>\n            )\n          })\n        }\n      </>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n### StrictMode\n\nStrictMode 是一个用来突出显示应用程序中潜在问题的工具\n\n- 与 Fragment 一样，StrictMode 不会渲染任何可见的 UI\n- 它为后代元素触发额外的检查和警告，严格模式下将会识别过时的方法和类并抛出警告信息\n  - 识别不安全的声明周期\n  - 使用过时的 ref API\n  - 检测意外的副作用\n    - 这个组件的 constructor 会被调用两次\n    - 这是严格模式下故意进行的操作，让你来检查看在这里写的一些逻辑代码被调用多次时，是否会产生一些副作用\n    - 在生产环境中，是不会调用两次的\n  - 使用废弃的 findDOMNode 方法\n    - 在之前的 React API 中，可以通过 findDOMNode 来获取 DOM，不过已经不推荐使用了\n  - 检测过时的 context API\n    - 早期的 Context 是通过 static 属性声明 Context 对象属性，通过 getChildContext 返回 Context 对象等方式来使用 Context 的，目前这种方式已经不推荐使用\n- 严格模式检查仅在开发模式下运行；它们不会影响生产构建\n\n\n\n### 动画\n\nReact 通过使用动画插件 react-transition-group 实现组件的入场和离场动画，使用时需要额外的安装\n\n```bash\nnpm install react-transition-group --save\n```\n\n#### CSSTransition\n\nCSSTransition 是基于 Transition 组件构建的\n\nCSSTransition 执行过程中，有三个状态：appear、enter、exit\n\n他们有三种状态，需要定义对应的 CSS 样式\n\n1. 第一类，开始状态：对应的类是 -appear、-enter、exit\n2. 第二类：执行动画：对应的类是 -appear-active、-enter-active、-exit-active\n3. 第三类：执行结束：对应的类是 -appear-done、-enter-done、-exit-done\n\nCSSTransition 常见对应属性\n\n- in：触发进入或者推出状态\n  - 如果添加了 `unmountOnExit={true}` ，那么该组件会在执行退出动画时移除掉\n  - 当 in 为 trye 是，触发进入状态，会添加 -enter、-enter-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class、并且添加 -enter-done 的 class\n  - 当 in 为 false 时，触发退出状态，会添加 -exit、-exit-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class，并且添加 -enter-done 的 class\n- classNames：动画 class 的名称\n  - 决定了在编写 css 时，对应的 class 名称：比如 example-enter、example-enter-active、example-enter-done\n- timeout：类添加或移除的时间\n  - 当该值与样式中设置动画过度时间冲突时，动画执行时间为样式中所设定的，类绑定与消除为该 timeout 属性的值\n- appear：是否在初次进入添加动画（需要和 in 同时为 true）\n- unmountOnExit：退出后卸载组件\n\nCSSTransition 对应的钩子函数：主要为了检测动画执行过程\n\n- onEnter：在进入动画之前被触发\n- onEntering：在应用进入动画时被触发\n- onEntered：在应用进入动画结束后被触发\n\n*使用 CSSTransition 在 React 中将会报错：Transition.js:292  Uncaught TypeError: l.findDOMNode is not a function， 因此需要指定该组件的 nodeRef 属性为动画元素的根节点* \n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport './style/App'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActivate: false\n    }\n    this.nodeRef = createRef()\n  }\n\n  render() {\n    const { isActivate } = this.state\n    \n    return (\n      <Fragment>\n        <button onClick={e => this.setState({isActivate: !isActivate})}>Toggle</button>\n        <CSSTransition in={isActivate} timeout={2000} classNames='dh' unmountOnExit={true}\n                       // 当不添加 nodeRef 时将会报错，因为该组件使用了 findDOMNode 方法，该方法已经不支持\n                       // 通过设置 nodeRef 该组件将会使用 nodeRef 的值作为动画的根节点\n                       nodeRef={this.nodeRef} \n                       onEnter={e => console.log('开始进入动画')}\n                       onEntering={e => console.log('执行进入动画')}\n                       onEntered={e => console.log('执行进入动画结束')}\n                       onExit={e => console.log('开始离开动画')}\n                       onExiting={e => console.log('执行离开动画')}\n                       onExited={e => console.log('执行离开动画结束')}\n        >\n          {/* 必须存在一个根元素 */}\n          <div ref={this.nodeRef}>\n            <div>hidden element</div>\n            <p>hidden paragraph</p>\n          </div>\n        </CSSTransition>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n对应的样式\n\n```css\n.dh-enter {\n  opacity: 0;\n}\n\n.dh-enter-active {\n  opacity: 1;\n  transition: opacity 2s;\n}\n\n.dh-exit {\n  opacity: 1;\n}\n\n.dh-exit-active {\n  transition: opacity 2s;\n  opacity: 0;\n}\n```\n\n#### SwitchTransition\n\nSwitchTransition 可以完成两个组件之间切换的炫酷动画\n\n- 比如我们有一个按钮需要在 on 和 off 之间切换，我们希望看到 on 先从左侧退出，off 再从右侧进入\n- 这个动画在 vue 中被称之为 vue transition modes\n- react-transition-group 中使用 SwitchTransition 来实现该动画\n\nSwitchTransition 中主要有一个属性：mode，有两个值\n\n- in-out：表示新组件先进入，旧组件再移除\n- out-in：表示旧组件先移除，新组件再进入\n\nSwitchTransition 组件里面要有 CSSTransition 或者 Transition 组件，其 CSSTransition/Transition 需要设置 key 属性，表示切换不同的状态，该属性值主要设置不一样就代表进行切换\n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { CSSTransition, SwitchTransition } from 'react-transition-group'\nimport './style/App-Transition'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isLogin: false\n    }\n    this.nodeRef = createRef()\n  }\n\n  render() {\n    const { isLogin } = this.state\n    \n    return (\n      <Fragment>\n        <SwitchTransition mode='out-in'>\n          <CSSTransition nodeRef={this.nodeRef} \n                         key={isLogin ? 'login' : 'logout'}\n                         timeout={1000} classNames='dh'>\n            <button onClick={e => this.setState({isLogin: !isLogin})}\n                    ref={this.nodeRef}>\n                      { isLogin ? 'Login' : 'Logout' }\n            </button>\n          </CSSTransition>\n        </SwitchTransition>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n样式设置\n\n```css\n.dh-enter {\n  transform: translateX(-100%);\n}\n\n.dh-enter-active {\n  transform: translateX(0);\n  transition: transform 1s;\n}\n\n.dh-exit {\n  transform: translateX(0);\n}\n\n.dh-exit-active {\n  transition: transform 1s;\n  transform: translateX(-100%);\n}\n```\n\n#### TransitionGroup\n\n给一组元素设置动画\n\n```jsx\nimport React, { createRef, Fragment, PureComponent } from 'react'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport './style/APP-TransitionGroup'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      books: [\n        {id: 1, name: 'aaa', price: 80},\n        {id: 2, name: 'bbb', price: 81},\n        {id: 3, name: 'ccc', price: 82},\n        {id: 4, name: 'ddd', price: 83},\n      ]\n    }\n    this.nodeRef = []\n    for (let i = 0; i < this.state.books.length; ++ i) {\n      this.nodeRef.push(createRef())\n    }\n  }\n\n  addNewBook() {\n    const books = [...this.state.books]\n    books.push({\n      id: new Date().getTime(),\n      name: 'eee',\n      price: 180\n    })\n    this.setState({\n      books\n    })\n    this.nodeRef.push(createRef())\n  }\n\n  deleteBook(index) {\n    const books = [...this.state.books]\n    books.splice(index, 1)\n    this.setState({ books })\n    this.nodeRef.splice(index, 1)\n  }\n\n  render() {\n    const { books } = this.state\n    \n    return (\n      <Fragment>\n        <TransitionGroup>\n          {\n            books.map((book, index) => {\n              return (\n                <CSSTransition key={book.id} nodeRef={this.nodeRef[index]}\n                               timeout={1000} classNames='example' unmountOnExit={true}>\n                  <li ref={this.nodeRef[index]}>\n                    <span>{book.name}-{book.price}</span>\n                    <button onClick={e => this.deleteBook(index)}>delete</button>\n                  </li>\n                </CSSTransition>\n              )\n            })\n          }\n        </TransitionGroup>\n        <button onClick={e => this.addNewBook()}>Add new book</button>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\nCSS 文件\n\n```css\n.example-enter {\n  transform: translateX(100px);\n}\n\n.example-enter-active {\n  transform: translateX(0);\n  transition: transform 1s ease;\n}\n\n.example-exit {\n  transition: transform 1s ease;\n  transform: translateX(0);\n}\n\n.example-exit-active {\n  transform: translateX(100px);\n}\n```\n\n\n\n### 样式\n\n#### 内联样式\n\nstyle 接受一个采用小驼峰命名属性的 JavaScript 对象，并且可以引用 state 中的状态来设置相关的样式\n\n内联样式的优点：\n\n1. 内联样式，样式之间不会有冲突\n2. 可以动态获取当前 state 中的状态\n\n内联样式的缺点：\n\n1. 写法上都需要使用驼峰表示\n2. 某些样式没有提示\n3. 大量的样式，代码混乱\n4. 某些样式无法编写（比如伪类，伪元素）\n\n```jsx\nimport React, { PureComponent } from 'react'\n\nexport class App extends PureComponent {\n\n  render() {\n    const style = {\n      color: 'red',\n      fontSize: '20px',\n      border: '1px solid #eee'\n    }\n    return (\n      <div>\n        <h1 style={style}>App</h1>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 引用外部 CSS 文件\n\n该方式将会对所有文件生效，即使是子组件中引用的样式文件也将对所有文件生效\n\n父组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport Home from './components/Home'\n\nexport class App extends PureComponent {\n\n  render() {\n    return (\n      <div>\n        <h1 className='title'>App</h1>\n        <Home></Home>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n子组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport '../styles/App'\n\nexport class Home extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2 className='title'>Home</h2>\n      </div>\n    )\n  }\n}\n\nexport default Home\n```\n\n样式文件（此样式将对所有文件生效）\n\n```css\n.title {\n  color: red;\n  border: 1px solid #eee;\n}\n```\n\n#### CSS Modules\n\ncss modules 并不是 React 特有的解决方案，而是所有使用了类似于 webpack 配置的环境下都可以使用的\n\n- 如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置 webpack.config.js 中的 modules: true 等\n\nReact 的脚手架已经内置了 css modules 的配置\n\n- .css/.less/.scss 等样式文件都需要修改成 .module.css/.module.less/.module.scss 等\n\ncss modules 确实解决了局部作用域的问题，但是这种方案仍存在如下的缺陷：\n\n1. 引用的类名，不能使用连接符（.home-title）其中 - 在 JavaScript 不被识别\n2. 所有的 className 都必须使用 {style.className} 的形式来编写\n3. 不方便动态修改某些样式，仍然需要使用内联样式的方式\n\n配置 webpack.config.js\n\n```js\nconst path = require('path')\nconst HTMLPlugin = require('html-webpack-plugin')\nconst {ProvidePlugin} = require('webpack')\nconst TerserPlugin = require('terser-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', {\n          loader: 'css-loader',\n          options: {\n            modules: {\n              // 使用 named 进行导出（即 export 方式），通过使用 import {类名} 导入\n              namedExport: true,\n              // 设置类的名字格式\n              localIdentName: '[local]_[contenthash:6]'\n            }\n          }\n        }]\n      },\n    ]\n  }\n}\n```\n\n在组件中使用该样式\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport {title} from './styles/App'\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(title)\n    return (\n      <div>\n        <h1 className={title}>App</h1>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### CSS in JS\n\nCSS-in-JS 是指一种模式，其中 CSS 由 JavaScript 生成，而不是在外部中定义\n\n这个功能并不是 React 的一部分，而是由第三方库提供\n\n- CSS-in-JS 通过 JavaScript 来为 CSS 赋予一些能力，包括 类似于 CSS 预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改状态等\n- 虽然 CSS 预处理器也具备某些能力，但是获取动态状态依然是一个不好处理的点\n\n目前比较理性的 CSS-in-JS 的库：\n\n1. styled-components（常用）\n2. emotion\n3. glamorous\n\n使用 styled-components\n\n```bash\nnpm install styled-components -D\n```\n\n定义 CSS js 文件\n\n```js\nimport styled from \"styled-components\"\n\n// 可以通过 attrs 函数设置样式属性\nconst AppStyleWrapper = styled.div.attrs(props => ({\n  color: props.color || 'red',\n  backgroundColor: '#ff8800'\n}))`\n  .title {\n    color: ${props => props.color};\n    font-size: ${props => props.fontSize};\n    border: 1px solid #aaa;\n\n    &:hover {\n      background-color: ${props => props.backgroundColor};\n      color: #fff;\n    }\n  }\n`\n\nexport default AppStyleWrapper\n```\n\n在组件中使用该样式\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport AppStyleWrapper from './styles/App'\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(AppStyleWrapper)\n    return (\n      // 传递参数，该组件将参数接收到 props 中\n      <AppStyleWrapper color='yellow' fontSize='50px'>\n        <h1 className='title'>App</h1>\n      </AppStyleWrapper>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 主题和继承\n\nAbout 组件样式\n\n```js\nimport styled from \"styled-components\"\n\nconst AboutFatherStyleWrapper = styled.div`\n  .content {\n    border: 1px solid #aaa;\n  }\n`\n\n// 继承 AboutFatherStyleWrapper 样式\nconst AboutStyleWrapper = styled(AboutFatherStyleWrapper)`\n  .about-title {\n    color: ${props => props.theme.color};\n    font-size: 18px;\n  }\n\n  .content {\n    color: ${props => props.theme.color};\n    background-color: ${props => props.theme.backgroundColor};\n  }\n`\n\nexport default AboutStyleWrapper\n```\n\nAbout 组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport AboutStyleWrapper from './style'\n\nexport class About extends PureComponent {\n  render() {\n    return (\n      <AboutStyleWrapper>\n        <h2 className='about-title'>About</h2>\n        <div className='content'>About content</div>\n      </AboutStyleWrapper>\n    )\n  }\n}\n\nexport default About\n```\n\nApp 组件\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport {ThemeProvider} from 'styled-components'\nimport AppStyleWrapper from './styles/App'\nimport About from './components/About'\n\n\nexport class App extends PureComponent {\n\n  render() {\n    console.log(AppStyleWrapper)\n    return (\n      // 通过 ThemeProvider 向所有子组件提供主题样式\n      <ThemeProvider theme={{color: '#909090', backgroundColor: '#09aaf3'}}>\n        {/* 传递参数，该组件将参数接收到 props 中 */}\n        <AppStyleWrapper fontSize='50px'>\n          <h1 className='title'>App</h1>\n        </AppStyleWrapper>\n        <About></About>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App\n```\n\n### classnames 库\n\n在需要动态添加样式时，使用 react 会比较繁琐\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\n\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActive: true,\n      isDelete: true\n    }\n  }\n\n  render() {\n    const { isActive, isDelete } = this.state\n    return (\n      <Fragment>\n        <div className={`${isActive? 'active' : ''} ${isDelete ? 'delete' : ''}`}>App</div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n通过使用 classnames 库来简化动态类的添加\n\n```bash\nnpm install classnames\n```\n\n在组件中的使用\n\n```jsx\nimport React, { Fragment, PureComponent } from 'react'\nimport classnames from 'classnames'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      isActive: true,\n      isDelete: true\n    }\n  }\n\n  render() {\n    const { isActive, isDelete } = this.state\n    return (\n      <Fragment>\n        <div className={classnames('title', {'active': isActive, 'delete': isDelete})}>App</div>\n        <div className={classnames(['title', {'active': isActive, 'delete': isDelete}])}>App</div>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n```\n\n\n\n## 第三站\n\n### 纯函数\n\n在程序设计中，若一个函数符合以下条件，那么这个函数就是纯函数\n\n1. 此函数在相同的输入值时，需要产生相同的输出\n2. 函数的输出和输入值以外的其他隐藏信息或状态无关\n3. 该函数不能由语义上可观察的函数副作用，诸如 触发事件，使用输入输出设备，或更改输出值以外的内容等\n   1. 副作用表示在执行一个函数时，除了返回数值以外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储\n\n纯函数的优点：\n\n1. 在编写纯函数的时候，只需要单纯实现自己的业务逻辑即可不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改\n2. 在使用的时候，只需要确保输入的内容不会被任意篡改，并且确定的输入一定会有确定的输出\n\n\n\n### Redux\n\n随着需要管理的状态越来越多，越来越复杂，以及要管理的状态（包括服务器返回的数据，缓存数据、用户操作产生的数据、UI的状态），需要对状态进行监管。\n\nReact 是在视图层帮助我们解决了 DOM 的渲染过程，但是 State 任然留给我们自己管理\n\n- 无论是组件定义自己的 state，还是组件之间的通信通过 props 进行传递；也包括 context 进行数据之间的共享\n- React 主要负责帮助我们管理视图，state 如何维护最终还是我们自己来决定\n\nRedux 就是一个帮助我们管理 state 的容器；Redux 是 JavaScript 的状态容器，提供了可预测的状态管理\n\nRedux 除了可以和 React 一起使用之外，它也可以和其他界面库一起来用（Vue）并且他很小（包括依赖在内，只有 2kb）\n\n- Redux要求我们通过 action 来更新数据\n  - 所有数据的变化，必须通过派发（dispath）action 来更新\n  - action 是一个普通的 JavaScript 对象，用来描述这次更新 type 和 content\n  - 强制使用 action 的好处是可以清晰知道数据到底发生了什么样的变化，所有数据都是可追踪、可预测的\n- state 和 action 通过 reducer 进行联系\n  - reducer 是一个纯函数\n  - reducer 做的事情就是将传入的 state 和 action 结合起来生成一个新的 state\n\n引入 redux 包\n\n```bash\nnpm install redux --save\n```\n\nredux 基本使用\n\n```js\nconst {createStore} = require('redux')\n\nconst data = {\n  username: 'zhangsan',\n  age: 16\n}\n\n/**\n * 该函数将会被执行两次，第一次是刚开始创建的时候\n * @param {Object} state 未被修改的 state 的值\n * @param {Object} action 使用 store.dispatch 传入的 action\n * @returns 返回值将作为 store 之后存储的 state\n */\nfunction reducer(state = data, action) {\n  // 第一次打印：reducer:  { username: 'zhangsan', age: 16 } { type: '@@redux/INIT7.d.i.y.a.5' }\n  // 第二次打印：reducer:  { username: 'zhangsan', age: 16 } { type: 'update_username', username: 'wangwu' }\n  console.log('reducer: ', state, action)\n\n  if (action.type == 'update_username') {\n    return { ...state, username: action.username }\n  }\n\n  return state\n}\n\nconst store = createStore(reducer)\n\nconsole.log(store.getState()) // { username: 'zhangsan', age: 16 }\n// 这样修改将导致界面不会发生动态更新\n// store.getState().username = 'lisi'\n// console.log(store.getState())\n\nconst res = store.dispatch({type: 'update_username', username: 'wangwu'})\nconsole.log(res) // { type: 'update_username', username: 'wangwu' }\nconsole.log(store.getState()) // { username: 'wangwu', age: 16 }\n```\n\n通过订阅模式进行事件监听\n\n```js\nconst { createStore } = require('redux')\n\nconst data = [\n  {name: 'article1', author: 'zhangsan'},\n  {name: 'article2', author: 'lisi'}\n]\n\nfunction reducer(state = data, action) {\n  switch(action.type) {\n    case 'public article': \n      return [...state, action.article]\n    case 'delete article':\n      let res = [...state]\n      res.splice(action.start, action.count)\n      return res\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer)\nconst unsubscribe = store.subscribe(() => {\n  console.log('store subscribe: ', store.getState())\n})\n\nconst publicAction = (article) => ({\n  type: 'public article',\n  article\n})\n\nconst deleteAction = (start, count) => ({\n  type: 'delete article',\n  start: start,\n  count: count\n})\n\n/*\nstore subscribe:  [\n  { name: 'article1', author: 'zhangsan' },\n  { name: 'article2', author: 'lisi' },\n  { name: 'a1', author: 'wangwu' }\n]\n*/\nstore.dispatch(publicAction({name: 'a1', author: 'wangwu'}))\n/*\nstore subscribe:  [\n  { name: 'article1', author: 'zhangsan' },\n  { name: 'a1', author: 'wangwu' }\n]\n*/\nstore.dispatch(deleteAction(1, 1))\nunsubscribe()\n// 下面将不会触发订阅事件\nstore.dispatch(publicAction({name: 'a3', author: 'laowang'}))\n```\n\n对使用过程进行优化，通常将文件分为如下四个部分：\n\n```bash\nactionCreator.js # 存放创建的 action 函数\nconstants.js # 存放常量，即 switch 中的 case\nindex.js # 存放 store 对象\nreducer.js # 存放数据以及 reducer 函数\n```\n\nactionCreator.js\n\n```js\nimport { CHANGE_AGE, CHANGE_NAME } from \"./constants\";\n\nexport function changeName(username) {\n  return {\n    type: CHANGE_NAME,\n    username: username\n  }\n}\n\nexport function changeAge(age) {\n  return {\n    type: CHANGE_AGE,\n    age: age\n  }\n}\n```\n\nconstants.js\n\n```js\nexport const CHANGE_NAME = 'CHANGE_NAME'\nexport const CHANGE_AGE = 'CHANGE_AGE'\n```\n\nindex.js\n\n```js\nimport { createStore } from \"redux\"\n\nimport {reducer} from './reducer'\n\nconst store = createStore(reducer)\n\nexport default store\n```\n\nreducer.js\n\n```js\nimport { CHANGE_AGE, CHANGE_NAME } from \"./constants\"\n\nconst data = {\n  username: 'zhangsan',\n  age: 18\n}\n\nfunction reducer(state = data, action) {\n  switch(action.type) {\n    case CHANGE_NAME:\n      return {...state, username: action.username}\n    case CHANGE_AGE:\n      return {...state, age: action.age}\n    default:\n      return state\n  }\n}\n\nexport default reducer\n```\n\n#### Redux 三大原则\n\n单一数据源\n\n- 整个应用程序的 state 被存储在一颗 object tree 中，并且 这个 object tree 只存储在一个 store 中\n- Redux 并没有强制让我们不能创建多个 Store，但是那样做并不利于数据的维护\n- 单一的数据源可以让整个应用程序的 state 变得方便维护、追踪、修改\n\nState 是只读的\n\n- 唯一修改 state 的方法一定是触发 action，不要试图在其他地方通过任何的方式修改 state\n- 这样就确保了 View 或网络请求都不能直接修改 state，他们只能通过 action 来描述自己想要如何修改 state\n- 这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心 race condition（竞态）的问题\n\n使用纯函数来执行修改\n\n- 通过 reducer 将 旧 state 和 actions 联系在一起，并且返回一个新的 state\n- 随着应用程序的复杂度增加，我们可以将 reducer 拆分成多个小的 reducer 分别操作不同的 state tree 的一部分\n- 但是所有的 reducer 都应该是纯函数，不能产生任何的副作用\n\n\n\n### 在 React 中使用 Redux\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport store from './store/system'\nimport { addCount, desCount } from './store/system/actionCreators'\nimport About from './components/About'\n\nexport class App extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      count: store.getState().count\n    }\n  }\n\n  componentDidMount() {\n    store.subscribe(() => {\n      this.setState({\n        count: store.getState().count\n      })\n    })\n  }\n\n  render() {\n    const {count} = this.state\n\n    return (\n      <div>\n        <h1>App</h1>\n        <div>{count}</div>\n        <button onClick={e => store.dispatch(addCount(1))}>Add</button>\n        <button onClick={e => store.dispatch(desCount(1))}>Des</button>\n        <About></About>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### React-Redux\n\n在 react 中使用封装后的 redux\n\n```bash\nnpm install react-redux\n```\n\n在根组件中使用 Provider 给后续组件设置 store\n\n```jsx\nimport {createRoot} from 'react-dom/client'\nimport { StrictMode } from 'react'\nimport { Provider } from \"react-redux\"\nimport store from './store'\n\nimport App from \"./App\"\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>\n)\n```\n\n在需要使用 store 组件中使用 connect 进行使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport store from '../store'\nimport { changeUsername } from '../store/actionCreator'\n\nexport class About extends PureComponent {\n  changeUsername() {\n    this.props.changeUsername('lisi')\n    console.log(this.props, store.getState())\n  }\n\n  render() {\n    const { username } = this.props\n    console.log(this.props, store.getState())\n    return (\n      <div>\n        <h2>About</h2>\n        <p>{username}</p>\n        <button onClick={() => this.changeUsername()}>Change Username</button>\n      </div>\n    )\n  }\n}\n\n// 过滤不需要的数据\nfunction mapStateToProps(state) {\n  console.log(state)\n  return {\n    username: state?.username,\n    age: state?.age\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeUsername(username) {\n      dispatch(changeUsername(username))\n    }\n  }\n}\n// connect 函数执行后返回一个高阶组件函数\n// connect 接收两个函数作为参数\nexport default connect(mapStateToProps, mapDispatchToProps)(About)\n```\n\n当使用异步请求时，需要对 dispatch 传递一个函数作为分发的对象，此时需要对 redux 进行增强，安装 redux-thunk 库\n\n```bash\nnpm install redux-thunk\n```\n\n在 actionCreator.js 文件中编写函数\n\n```js\nexport function addUser(userList) {\n  return {\n    type: ADD_USERS,\n    users: userList\n  }\n}\n\nexport function fetchData() {\n  // 定义异步请求函数，将该函数进行返回\n  function _fetch(dispatch, getState) {\n    fetch('http://jsonplaceholder.typicode.com/posts', {method: 'get'}).then(async res => {\n      const userList = await res.json()\n      dispatch(addUser(userList))\n    })\n  }\n\n  return _fetch\n}\n```\n\n在组件中只需要调用该函数即可\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchData } from '../store/actionCreator'\n\nexport class About extends PureComponent {\n\n  componentDidMount() {\n    this.props.fetchData()\n  }\n\n  render() {\n    const { users } = this.props\n    return (\n      <div>\n        <h2>About</h2>\n        <ul>\n          {\n            users?.map(user => (\n              <li key={user.id}>{user.id} - {user.userId} - {user.title}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\n// 过滤不需要的数据\nfunction mapStateToProps(state) {\n  return {\n    users: state?.users\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData() {\n      dispatch(fetchData())\n    }\n  }\n}\n// connect 函数执行后返回一个高阶组件函数\n// connect 接收两个函数作为参数\nexport default connect(mapStateToProps, mapDispatchToProps)(About)\n```\n\nredux dev tools 开启\n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport reducer from './reducer'\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store\n```\n\n#### Redux 拆分\n\n通过创建独立的文件夹区分不同的 redux，在 index.js 中合并不同的  reducer \n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport homeReducer from \"../home/reducer\"\nimport profileReducer from \"../profile/reducer\"\n\nconst reducer = combineReducers({\n  home: homeReducer,\n  profile: profileReducer\n})\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store\n```\n\ncombineReducers 函数的实现类似于下面\n\n```js\nfunction reducer (state = {}, action) {\n  // 初始时，传入 reducer 的参数为：state: undefined action: {type: '@@INIT'}\n  console.log(state, action)\n  \n  return {\n    home: homeReducer(state.home, action),\n    profile: profileReducer(state.profile, action)\n  }\n}\n```\n\n#### Redux 插件\n\n```js\nimport { legacy_createStore as createStore, applyMiddleware, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport reducer from './reducer'\n\n// 传递 trace 设置开启调用栈\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace: true}) || compose\n\n// 开启对 redux 扩展的支持\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\n// 记录日志，通过对 dispatch 进行拦截\nfunction log(store) {\n  const dispatch = store.dispatch\n  function recordLog(action) {\n    console.log('before action execute', action)\n    dispatch(action)\n  }\n  store.dispatch = recordLog\n}\nlog(store)\n\nexport default store\n```\n\n#### Redux Toolkit\n\nredux toolkit 是官方推荐编写 redux 逻辑的方法，该工具能解决使用 redux 编写时逻辑过于繁琐，代码量过多且不利于管理等问题\n\nredux toolkit 的核心 API 主要包含如下：\n\n- configureStore：包装 createStore 以提供简化的配置选项和良好的默认值，它可以自动组合你的 slice reducer，添加你提供的任何 redux 中间件，redux-thunk 默认包含，并启用 redux devtool extension\n- createSlice：接受 reducer 函数的对象，切片名称和初始状态值，并自动生成切片 reducer，并带有相应的 actions\n- createAsyncThunk：接受一个动作类型字符串和一个返回 Promise 的函数，并生成一个 pending/fulfilled/rejected 基于该 Promise分派动作类型的 thunk\n\n安装 redux-toolkit\n\n```bash\nnpm install @reduxjs/toolkit react-redux\n```\n\n创建 store/index.js\n\n```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport profileReducer from './features/profile'\n\nconst store = configureStore({\n  reducer: {\n    profile: profileReducer\n  }\n})\n\nexport default store\n```\n\n创建对应的 reducer\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\"\n\nconst profileSlice = createSlice({\n  name: 'profile',\n  initialState: {\n    username: 'zhangsan',\n    age: 18\n  },\n  reducers: {\n    // action: {type: 'profile/changeUsername', payload: 'lisi'}\n    changeUsername(state, action) {\n      console.log(state, action)\n      state.username = action.payload\n    },\n    changeAge(state, aciton) {\n      console.log(state, aciton)\n      state.age = action.payload\n    }\n  }\n})\n\n\nexport const { changeUsername, changeAge } = profileSlice.actions\nexport default profileSlice.reducer\n```\n\n在组件中的使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeUsername, changeAge } from '../store/features/profile'\n\nexport class Profile extends PureComponent {\n  render() {\n    const { username, age } = this.props\n\n    return (\n      <div>\n        <h2>Profile</h2>\n        <p>{username} - {age}</p>\n        <button onClick={() => this.props.changeUsername('lisi')}>Change Username</button>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.profile.username,\n    age: state.profile.age\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeUsername(username) {\n      dispatch(changeUsername(username))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)\n```\n\n在 Redux Toolkit 中使用异步函数\n\n```js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\n\nexport const fetchData = createAsyncThunk('fetch/home', async (extractInfo, store) => {\n  const res = await fetch('http://jsonplaceholder.typicode.com/posts', {method: 'get'})\n  const data = await res.json()\n  // 可以通过如下方式直接在这个里面添加数据\n  store.dispatch(addUser(data))\n  return data\n})\n\nconst homeSlice = createSlice({\n  name: 'home',\n  initialState: {\n    users: []\n  },\n  reducers: {\n    addUser(state, action) {\n      state.users = action.payload\n    }\n  },\n  // 这种方式现已不支持\n  // extraReducers: {\n  //   [fetchData.pending](state, action) {\n  //     console.log(state, action, 'ready to fetch data')\n  //   },\n  //   [fetchData.fulfilled](state, action) {\n  //     console.log(state, action, 'have got data')\n  //   },\n  //   [fetchData.rejected](state, action) {\n  //     console.log(state, action, 'get data error')\n  //   }\n  // },\n  // 支持的写法\n  extraReducers: (builder) => {\n    builder.addCase(fetchData.pending, (state, action) => {\n      console.log(state, action, 'ready to fetch data')\n    }).addCase(fetchData.fulfilled, (state, action) => {\n      console.log(state, action, 'have got data')\n      // state.users = action.payload\n    }).addCase(fetchData.rejected, (state, action) => {\n      console.log(state, action, 'get data error')\n    })\n  }\n})\n\nexport const { addUser } = homeSlice.actions\nexport default homeSlice.reducer\n```\n\n在组件中的使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\n\nimport { fetchData } from '../store/features/home'\n\nexport class Home extends PureComponent {\n  componentDidMount() {\n    this.props.fetchHomeData()\n  }\n\n  render() {\n    const { users } = this.props\n    \n    return (\n      <div>\n        <h2>Home</h2>\n        <ul>\n          {\n            users.map(user => (\n              <li key={user.id}>{user.title}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.home.users\n})\nconst mapDispatchToProps = (dispatch) => ({\n  fetchHomeData() {\n    dispatch(fetchData({path: '123'}))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n```\n\n#### Redux Toolkit 的数据不可变性\n\nRedux Toolkit 底层使用了 immerjs 的一个库来保证数据的不可变性\n\n为了节约内存，又出现了一个新的算法：Persistent Data Structure （持久化数据结构或一致性数据结构）\n\n- 用一种数据结构来保存数据\n- 当数据被修改时，会返回一个对象，但是新的对象会尽可能利用之前的数据结构而不会对内存造成浪费\n\n#### connect 函数的实现\n\nconnect 函数\n\n```jsx\nimport { PureComponent } from \"react\"\n// import store from \"../store\"\nimport StoreContext from './StoreContext'\n\n/**\n * realize a connect function\n * @param {Function} mapStateToProps \n * @param {Function} mapDispatchToProps \n * @returns high component function\n */\nexport default function connect(mapStateToProps, mapDispatchToProps) {\n  return (Component) => {\n    class NewComponent extends PureComponent {\n      constructor(props, context) {\n        super(props)\n        console.log(context)\n        this.state = mapStateToProps(context.getState())\n      }\n      componentDidMount() {\n        this.unsubscribe = this.context.subscribe(() => {\n          this.setState(mapStateToProps(this.context.getState()))\n        })\n      }\n      componentWillUnmount() {\n        this.unsubscribe()\n      }\n      render() {\n        // state dispatch\n        const states = mapStateToProps(this.context.getState())\n        const dispatchs = mapDispatchToProps(this.context.dispatch)\n        return <Component {...this.props} {...states} {...dispatchs}/>\n      }\n    }\n\n    NewComponent.contextType = StoreContext\n    // return newComponent\n    return NewComponent\n  }\n}\n```\n\nStoreContext\n\n```js\nimport { createContext } from \"react\"\n\nconst StoreContext = createContext()\n\nexport default StoreContext\n```\n\nmain.js\n\n```jsx\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport StoreContext from './hoc/StoreContext'\n\nimport store from './store'\nimport App from './App'\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <StrictMode>\n    {/* 必须要加上 Provider */}\n    <Provider store={store}>\n      <StoreContext.Provider value={store}>\n        <App />\n      </StoreContext.Provider>\n    </Provider>\n  </StrictMode>\n)\n```\n\n#### React 中 state 管理\n\nreact 中管理状态可以通过：1. 组件中自己的state、2. Context 数据的共享状态、3. Redux 管理应用状态\n\n- UI 相关的组件内部可以维护的状态，在组件内部自己来维护\n- 大部分需要共享的状态，都交给 redux 来管理和维护\n- 从服务器请求的数据（包括请求的操作），交给 redux 来维护\n\n\n\n### React Router\n\n安装相关依赖\n\n```bash\nnpm install react-router-dom\n```\n\nreact-router 会包含一些 react-native 的内容，web 开发并不需要\n\nreact-router 最主要的时给我们提供一些组件：\n\n- BrowserRouter 或 HashRouter\n  - Router 中包含了对路径改变的监听，并且会将相应的路径传递给子组件\n  - BrowserRouter 使用 history 模式\n  - HashRouter 使用 hash 模式\n- Routes：包裹所有的 Route，在其中匹配一个路由\n  - Router5.x 使用的是 Switch 组件\n- Route：Route 用于匹配的路径\n  - path 属性：用于设置匹配到的路径\n  - element 属性：设置匹配到路径后，渲染的组件\n    - Router5.x 使用的是 component 属性\n  - exact：精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件\n    - Router6.x 不再支持该属性\n- Link 和 NavLink：\n  - 通常路径的跳转是使用 Link 组件，最终会被渲染成 a 元素\n  - NavLink 是 Link 基础之上增加了一些样式属性\n  - to 属性：Link 中最重要的属性，用于设置跳转到的路径\n\n#### Link 基本使用\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n#### NavLink 基本使用\n\n- style: 传入一个函数，函数接受一个对象，包含 isActive 属性\n- className： 传入函数，函数接受一个对象，包括 isActive 属性\n- 默认的 activeClassName：\n  - 事实上再默认匹配成功时，NavLink 就会添加上一个动他的 active class，可以直接使用该 class\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          {/* Link 当标签激活时不会添加 class */}\n          {/* <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link> */}\n          {/* NavLink 再标签激活时会添加 active class */}\n          {/* <NavLink to='/home'>Home</NavLink> */}\n          {/* 通过修改 className 改变激活时绑定的 class 属性 */}\n          <NavLink to='/home' className={({isActive}) => isActive ? 'link-active' : ''}>Home</NavLink>\n          {/* <NavLink to='/profile'>Profile</NavLink> */}\n          {/* {isActive: true, isPending: false, isTransitioning: false} */}\n          <NavLink to='/profile' style={({isActive}) => ({color: isActive ? 'red' : ''})}>Profile</NavLink>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\n#### Navigate 导航\n\nNavigate 用于路由的重定向，当这个组件出现时，就会执行跳转到对应的 to 路径中\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink, Navigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            {/* 设置路由自动跳转 */}\n            <Route path='/' element={<Navigate to='/home'/>}/>\n            <Route path='/home' element={<Home />} />\n            <Route path='/profile' element={<Profile />} />\n            <Route path='*' element={<NotFound />}/>\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\n#### 路由嵌套\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Routes, Route, Link, NavLink, Navigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nimport HomeRecommand from './pages/HomeRecommand'\nimport HomeRanking from './pages/HomeRanking'\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <BaseStyle>\n        <h1>App</h1>\n        <div className=\"header\">\n          <Link to='/home'>Home</Link>\n          <Link to='/profile'>Profile</Link>\n          <hr />\n        </div>\n        <div className=\"content\">\n          <Routes>\n            {/* 设置路由自动跳转 */}\n            <Route path='/' element={<Navigate to='/home'/>}/>\n            <Route path='/home' element={<Home />}>\n              <Route path='/home' element={<Navigate to='/home/recommand' />}></Route>\n              <Route path='/home/recommand' element={<HomeRecommand/>}></Route>\n              <Route path='/home/ranking' element={<HomeRanking />}></Route>\n            </Route>\n            <Route path='/profile' element={<Profile />} />\n            <Route path='*' element={<NotFound />}/>\n          </Routes>\n        </div>\n        <div className=\"footer\">\n          <hr />\n          Footer\n        </div>\n      </BaseStyle>\n    )\n  }\n}\n\nexport default App\n```\n\nHome.jsx\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { Link, Outlet } from 'react-router-dom'\n\nexport class Home extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h2>Home</h2>\n        <Link to='/home/recommand'>Recommand</Link>\n        <Link to='/home/ranking'>Ranking</Link>\n        {/* 设置占位符，渲染到此处 */}\n        <Outlet></Outlet>\n      </div>\n    )\n  }\n}\n\nexport default Home\n```\n\n#### useNavigator\n\n```jsx\nimport React from 'react'\nimport { Routes, Route, Link, NavLink, Navigate, useNavigate } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport BaseStyle from './style/base'\nimport NotFound from './pages/NotFound'\n\nimport HomeRecommand from './pages/HomeRecommand'\nimport HomeRanking from './pages/HomeRanking'\n\nexport function App(props) {\n  // 调用必须再顶层使用，不能在函数中使用\n  const navigator = useNavigate()\n\n  return (\n    <BaseStyle>\n      <h1>App</h1>\n      <div className=\"header\">\n        <button onClick={e => navigator('/home')}>Home Button</button>\n        <button onClick={e => navigator('/profile')}>Profile Button</button>\n        <hr />\n      </div>\n      <div className=\"content\">\n        <Routes>\n          {/* 设置路由自动跳转 */}\n          <Route path='/' element={<Navigate to='/home'/>}/>\n          <Route path='/home' element={<Home />}>\n            <Route path='/home' element={<Navigate to='/home/recommand' />}></Route>\n            <Route path='/home/recommand' element={<HomeRecommand/>}></Route>\n            <Route path='/home/ranking' element={<HomeRanking />}></Route>\n          </Route>\n          <Route path='/profile' element={<Profile />} />\n          <Route path='*' element={<NotFound />}/>\n        </Routes>\n      </div>\n      <div className=\"footer\">\n        <hr />\n        Footer\n      </div>\n    </BaseStyle>\n  )\n}\n\nexport default App\n```\n\n对 navigator 进行包装，使其可以在类组件中使用\n\n```jsx\nimport { useLocation, useNavigate, useParams, useSearchParams } from \"react-router-dom\"\n\nfunction withRouter(Component) {\n\n  return function (props) {\n    const navigator = useNavigate()\n    // 当通过动态路由传递参数时，使用 params 对象获取\n    const params = useParams()\n    // 查询字符串的参数\n    const location = useLocation()\n    const [searchParams] = useSearchParams()\n    const router = {navigator, params, location, searchParams}\n    return (\n      <Component {...props} router={router} />\n    )\n  }\n}\n\nexport default withRouter\n```\n\n获取传递的值\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport withRouter from '../hoc/withRouter'\n\n\nexport class Profile extends PureComponent {\n  render() {\n    const { params, location, searchParams } = this.props.router\n    console.log(location, location.search)\n    console.log(searchParams.get('name'), searchParams.get('age'))\n    return (\n      <div>Profile: {params.id}</div>\n    )\n  }\n}\n\nexport default withRouter(Profile)\n```\n\n#### router 文件编写\n\n当使用配置去设置 router 时，需要使用 useRoutes hook，并且使用懒加载方式的组件需要被 Suspense 包裹\n\nmain.js\n\n```jsx\nimport { createRoot } from 'react-dom/client'\nimport { StrictMode, Suspense } from 'react'\n\nimport { HashRouter } from 'react-router-dom'\n\nimport App from './App'\n\nconst root = createRoot(document.querySelector('#root'))\n\nroot.render(\n  <StrictMode>\n    <HashRouter>\n      {/* 当路由设置懒加载之后，必须使用 Suspense 包裹 */}\n      <Suspense fallback={<h3>Loading ...</h3>}>\n        <App />\n      </Suspense>\n    </HashRouter>\n  </StrictMode>\n)\n```\n\nrouter.js\n\n```jsx\nimport { Navigate } from 'react-router-dom'\n\nimport Home from '../pages/Home'\nimport Profile from '../pages/Profile'\nimport NotFound from '../pages/NotFound'\n\n// import HomeRecommand from '../pages/HomeRecommand'\n// import HomeRanking from '../pages/HomeRanking'\nimport React from 'react'\n\n// 设置懒加载\nconst HomeRecommand = React.lazy(() => import('../pages/HomeRecommand'))\nconst HomeRanking = React.lazy(() => import('../pages/HomeRanking'))\n\nconst routes = [\n  {\n    path: '/',\n    element: <Navigate to='/home'/>\n  },\n  {\n    path: '/home',\n    element: <Home />,\n    children: [\n      {\n        path: '/home/recommand',\n        element: <HomeRecommand />\n      },\n      {\n        path: '/home/ranking',\n        element: <HomeRanking />\n      }\n    ]\n  },\n  {\n    path: 'profile',\n    element: <Profile />\n  },\n  {\n    path: '*',\n    element: <NotFound />\n  }\n]\n\nexport default routes\n```\n\n在组件中使用（组件必须是函数组件）\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { NavLink, useRoutes } from 'react-router-dom'\n\nimport BaseStyle from './style/base'\n\nimport withRouter from './hoc/withRouter'\nimport routes from './router'\n\n\nexport function App (props) {\n\n  const { navigator } = props.router\n  return (\n    <BaseStyle>\n      <h1>App</h1>\n      <div className=\"header\">\n      </div>\n      <div className=\"content\">\n        {useRoutes(routes)}\n      </div>\n      <div className=\"footer\">\n        <hr />\n        Footer\n      </div>\n    </BaseStyle>\n  )\n}\n\nexport default withRouter(App)\n```\n\n\n\n## 第四站\n\n### Hook\n\nHook 是 React 16.8 的新增的特性，它可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性（比如生命周期）\n\nclass 组件和函数式组件的对比：\n\n- class 组件可以定义自己的 state，用来保存组件自己内部的状态\n  - 函数式组件不可以，因为函数每次调用都会产生新的临时变量\n- class 组件有自己的声明周期，我们可以在对应的生命周期中完成自己的逻辑\n  - 比如在 componentDidMount 中发送网络请求，，并且该声明周期函数只会执行一次\n  - 函数式组件在学习 hooks 之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求\n- class 组件可以在状态改变时只会重新执行 render 函数以及我们希望重新调用的生命周期函数 componentDidUpdate 等\n  - 函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以让他们只调用一次\n\nclass 组件存在的问题：\n\n- 我们在最初编写一个 class 组件时，往往逻辑比较简单，并不会非常复杂，但是随着业务的增多，我们的 class 组件会变得越来越复杂。比u componentDidMount 中可能会包含大量的逻辑代码，包括网络请求，一些事件的监听（还需要再 componentWillUnmount 中移除）。对于这样的 class 实际上非常难拆分，因为他们的逻辑往往混在一起，强行拆分反而会照成设计过度，增加代码的复杂度\n- 再前面为了一些状态的复用，我们需要使用告诫组件\n- redux 中的 connect 或者 react-router 中的 withRouter，这些高阶组件的设计的目的就是为了状态的复用\n- 类似于 Provider、Consumer 来共享一些状态，但是多次使用 Consumer 时，我们的代码会存在多层嵌套，这些代码让我们不管时在编写和设计上来说，都变得非常困呐\n\n只能在函数最外层调用 Hook，不要再循环、条件判断或者钩子函数中调用\n\n只能在 React 的函数组件中调用 Hook，不要在其他 JavaScript 函数中调用\n\n#### useState\n\nuseState 可以传入一个函数，该函数的返回值作为 state\n\n```jsx\nimport React, { memo, useState } from 'react'\n\nconst Counter = memo(() => {\n  const [count, setCount] = useState(1)\n  return (\n    <div>\n      <h2>Count: {count}</h2>\n      <button onClick={e => setCount(count + 1)}>Add 1</button>\n      <button onClick={e => setCount(count - 1)}>Min 1</button>\n    </div>\n  )\n})\n\nexport default Counter\n```\n\n#### useEffect\n\nEffect Hook 可以用来完成一些类似于 class 声明周期的功能\n\n网络秦桧去，手动更新 DOM，一些事件的监听，都是 React 更新 DOM 的一些副作用，对于完成这些功能的 Hook 被称之为 Effect Hook\n\n- 通过使用 useEffect，可以告诉 React 需要在渲染后执行某些操作\n- useEffect 传入的回调将会在 React 执行完成更新 DOM 操作之后，被执行\n- 默认情况下，无论是第一次渲染之后，还是每次更新之后，都会执行这个回调函数\n- useEffect 的回调函数中可以返回一个回调函数，这个回调函数将会在useEffect 下一次回调函数执行前执行\n- 一个函数组件中可以编写多个 useEffect ，这些回调函数将会依次执行\n\n```jsx\nimport React, { memo, useEffect, useState } from 'react'\n\nconst ChangeTitle = memo((props) => {\n  const [counter, setCounter] = useState(0)\n\n  useEffect(() => {\n    // 当前传入的回调函数会在组件被渲染完成后执行\n    // 网络请求/DOM 操作/事件监听 可以在此时\n    console.log('modify counter', counter)\n    document.title = counter\n  }, [counter]) // 当 counter 发生变化时，才会执行\n\n  useEffect(() => {\n    // 这个回调类似于 componentDidMount\n    console.log('event on')\n\n    return () => {\n      // 这个回调类似于 componentDidUnmount\n      console.log('cancel event')\n    }\n  }, []) // 当组件挂载时才会执行\n  \n  return (\n    <div>\n      <h2>Count: {counter}</h2>\n      <button onClick={e => setCounter(counter + 1)}>Change Counter</button>\n    </div>\n  )\n})\n\nexport default ChangeTitle\n```\n\n#### useContext\n\n当 Provider 提供的数据发生变化时，使用该数据对应的组件就会重新渲染\n\n创建上下文对象\n\n```js\nimport { createContext } from 'react'\n\nconst UserContext = createContext()\nconst ThemeContext = createContext()\n\nexport {\n  UserContext,\n  ThemeContext\n}\n```\n\n在组件中使用 Provider\n\n```jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\n\nimport App from './App'\nimport { ThemeContext, UserContext } from './context'\n\nconst root = createRoot(document.querySelector('#root'))\nroot.render(\n  <ThemeContext.Provider value={{color: 'red', fontSize: '20px'}}>\n    <UserContext.Provider value={{username: 'zhangsan', age: 19}}>\n      <App />\n    </UserContext.Provider>\n  </ThemeContext.Provider>\n)\n```\n\n在子组件中使用 useContext\n\n```jsx\nimport React, { memo, useContext } from 'react'\nimport { ThemeContext, UserContext } from '../context'\n\nconst UseContext = memo((props) => {\n  const user = useContext(UserContext)\n  const theme = useContext(ThemeContext)\n  \n  return (\n    <div>\n      <h2 style={{color: theme.color, fontSize: theme.fontSize}}>UseContext</h2>\n      <p>{user.username} - {user.age}</p>\n    </div>\n  )\n})\n\nexport default UseContext\n```\n\n#### useReducer\n\nuseReducer 仅仅是 useState 的一种替代方案\n\n- 在某些场景下，如果 state 的处理逻辑比较复杂，我们可以通过 useReducer 来对其进行拆分\n- 或者这些修改的 state 需要依赖之前的 state 时，也可以使用\n\n```jsx\nimport React, { memo, useReducer } from 'react'\n\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'increase':\n      return { ...state, count: state.count + 1 }\n    case 'decrease':\n      return { ...state, count: state.count - 1 }\n    case 'add_user':\n      return { ...state, users: action.payload }\n    default:\n      return state\n  }\n}\n\nconst UseReduce = memo(() => {\n  const [state, dispatch] = useReducer(reducer, {count: 0, users: [], recommands: []})\n\n  return (\n    <div>\n      <h2>UseReducer: {state.count}</h2>\n      <button onClick={e => dispatch({type: 'increase'})}>+</button>\n      <button onClick={e => dispatch({type: 'decrease'})}>-</button>\n      {\n        state.users.map(user => (\n          <li key={user.id}>{user.username} - {user.age}</li>\n        ))\n      }\n      <button onClick={e => dispatch({type: 'add_user', payload: [{id: 1, username: 'zhangsan', age: 19}]})}>Add User</button>\n    </div>\n  )\n})\n\nexport default UseReduce\n```\n\n#### useCallback\n\nuseCallback 的实际目的是为了进行性能的优化\n\n- useCallback 会返回一个函数的 memoized （记忆的值）\n- 在依赖不变的情况下，动词定义的时候，返回的值是相同的\n- 使用 useCallback 的目的是不希望子组件进行多次渲染，而不是为了缓存函数\n\n```jsx\nimport React, { memo, useCallback, useRef, useState } from 'react'\n\n\nconst Child = memo((props) => {\n  const {increase} = props\n\n  console.log('child component update')\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <button onClick={increase}>Child Increase</button>\n    </div>\n  )\n})\n\nconst UseCallback = memo(() => {\n  const [count, setCounter] = useState(0)\n  const [message, setMessage] = useState('hello')\n\n  // 在组件每次更新时，都会生成一个新的 increase 函数，将会触发 Child 组件更新\n  // function increase() {\n  //   setCounter(count + 1)\n  // }\n\n  // 使用 useCallback 将会记忆之前的 回调 函数，当 count 发生变化时，才会使用新的回调\n  // const increase = useCallback(function () {\n  //   setCounter(count + 1)\n  // }, [count]) // 当不指定 依赖的对象时，会产生闭包陷阱，无论执行多少次 increase 函数，count 仍然为原来的值 0，界面不会发生更新\n\n  // 进一步进行优化，当修改 count 时，该函数将不更新\n  const countRef = useRef(count) // 使用 useRef 将会创建一个不变对象，该对象永远指向设置的值\n  countRef.current = count\n  const increase = useCallback(function() {\n    setCounter(countRef.current + 1)\n  }, [])\n\n  return (\n    <div>\n      <h2>UseCallback: {count}</h2>\n      <button onClick={increase}>Increase</button>\n      <button onClick={e => setMessage(Math.random())}>changeMessage - {message}</button>\n      <Child increase={increase}></Child>\n    </div>\n  )\n})\n\nexport default UseCallback\n```\n\n#### useMemo\n\nuseMemo 和 useCallback 都是对传入的东西进行缓存（类似于单例），useMemo 执行的结果是传入回调的返回值，useCallback 执行的结果是传入的回调函数\n\n- 进行大量计算操作，需要让相关函数在每次渲染后都不重新执行\n- 对于子组件传递相同对象时，使用 useMemo 进行性能优化\n\n```jsx\nimport React, { memo, useMemo, useRef, useState } from 'react'\n\nfunction calTotal(num) {\n  console.log('execute cal total, only be executed once')\n  for (let i = 0; i < 100; ++ i) num = num + i\n  return num\n}\n\nconst Child = memo((props) => {\n  const user = props.user\n  console.log('child component update only once')\n  return (\n    <div>\n      <h2>Child - {user.username} - {user.age}</h2>\n    </div>\n  )\n})\n\nconst UseMemo = memo(() => {\n  const [count, setCount] = useState(0)\n  const total = useMemo(() => {\n    // 通过 useMemo 缓存计算的结果，该回调只会被执行一次\n    return calTotal(40)\n  }, [])\n\n  const countRef = useRef(count)\n  countRef.current = count\n  // 通过 useMemo 模仿 useCallback\n  const increase = useMemo(() => {\n    return () => {\n      setCount(countRef.current + 1)\n    }\n  }, [])\n\n  // 此时 user 的内存地址将不会发生改变，子组件将不会重新渲染\n  const user = useMemo(() => ({username: 'zhangsan', age: 19}), [])\n\n  return (\n    <div>\n      <h2>UseMemo: count: {count} - total: {total}</h2>\n      <button onClick={increase}>Increase</button>\n      <Child user={user}/>\n    </div>\n  )\n})\n\nexport default UseMemo\n```\n\n#### useRef\n\nuseRef 返回一个 ref 对象，返回的 ref 对象在组件的整个声明周期保持不变\n\n```jsx\nimport React, { memo, useCallback, useRef, useState } from 'react'\n\n// 通过 obj 也可以解决闭包陷阱\nconst obj = {count: 0}\n\nconst UseRef = memo(() => {\n  const [count, setCount] = useState(0)\n  const elementRef = useRef()\n\n  function getRef() {\n    console.log(elementRef.current)\n  }\n  // 通过定义全局对象可以达到和 useRef 同样的效果\n  // obj.count = count\n  // const increase = useCallback(() => {\n  //   // setCount(count + 1)\n  //   setCount(obj.count + 1)\n  // }, [])\n  \n  const countRef = useRef(count)\n  countRef.current = count\n  const increase = useCallback(() => {\n    setCount(countRef.current + 1)\n  }, [])\n\n  return (\n    <div>\n      <h2 ref={elementRef}>UseRef: {count}</h2>\n      <button onClick={getRef}>Get Ref</button>\n      <button onClick={increase}>Increase</button>\n    </div>\n  )\n})\n\nexport default UseRef\n```\n\n#### useImperativeHandler\n\n```jsx\nimport React, { forwardRef, memo, useImperativeHandle, useRef } from 'react'\n\nconst Child = memo(forwardRef((props, ref) => {\n  const inputRef = useRef()\n\n  // 通过 useImperativeHandler 可以限制父组件对子组件的控制权限\n  ref = useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus()\n      }\n    }\n  })\n  return (\n    <div>\n      <h2>Child</h2>\n      <input type=\"text\" ref={inputRef} />\n    </div>\n  )\n}))\n\nconst UseImperativeHandle = memo(() => {\n  const inputRef = useRef()\n  function focus(){\n    inputRef.current.focus()\n    console.log(inputRef.current.value)\n  }\n  return (\n    <div>\n      <h2>UseImperativeHandle</h2>\n      <Child ref={inputRef}></Child>\n      <button onClick={focus}>Focus</button>\n    </div>\n  )\n})\n\nexport default UseImperativeHandle\n```\n\n#### useLayoutEffect\n\n- useEffect 会在渲染的内容更新到 DOM 上后执行，不会阻塞 DOM 的更新\n- useLayoutEffect 会在渲染的内容更新到 DOM 上之前执行，会阻塞 DOM 的更新\n\n官方更推荐使用 useEffect 而不是 useLayoutEffect\n\n```jsx\nimport React, { memo, useEffect, useLayoutEffect } from 'react'\n\nconst UseLayoutEffect = memo(() => {\n  useLayoutEffect(() => {\n    console.log('useLayoutEffect')\n  })\n  useEffect(() => {\n    console.log('useEffect')\n  })\n  return (\n    <div>UseLayoutEffect</div>\n  )\n})\n\nexport default UseLayoutEffect\n```\n\n#### useTransition\n\n返回一个状态值表示过度任务的等待状态，以及启动一个该过度任务的函数。它告诉 react 对于某部分任务的更新优先级较低，可以稍后进行更新\n\n```jsx\nimport React, { memo, useState, useTransition } from 'react'\n\nconst itemList= new Array(1000).fill(1).map((item, index) => 'index' + index)\n\nconst App = memo((props) => {\n  const [items, setItems] = useState(itemList)\n  // pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false\n  const [pending, setTransition] = useTransition()\n\n  function valueChangeHandle(e) {\n    // 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿\n    // setItems(itemList.filter(item => item.includes(e.target.value)))\n\n    setTransition(() => {\n      setItems(itemList.filter(item => item.includes(e.target.value)))\n    })\n  }\n\n  return (\n    <div>\n      <h1>App</h1>\n      <input type=\"text\" onInput={valueChangeHandle} />\n      { pending && <p>is ready to loading</p>}\n      <ul>\n        {\n          items.map(item => {\n            return <li key={item}>{item}</li>\n          })\n        }\n      </ul>\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n#### useDeferredValue\n\nuseDeferredValue 接受一个值，并返回该值的副本，该副本将推迟到更紧急的更新之后。他和 useTransition 类似\n\n```jsx\nimport React, { memo, useDeferredValue, useState, useTransition } from 'react'\n\nconst itemList= new Array(1000).fill(1).map((item, index) => 'index' + index)\n\nconst App = memo((props) => {\n  const [items, setItems] = useState(itemList)\n  // 将返回 items 的副本\n  const deferredItems = useDeferredValue(items)\n  // pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false\n  const [pending, setTransition] = useTransition()\n\n  function valueChangeHandle(e) {\n    // 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿\n    // setItems(itemList.filter(item => item.includes(e.target.value)))\n\n    setTransition(() => {\n      setItems(itemList.filter(item => item.includes(e.target.value)))\n    })\n  }\n\n  return (\n    <div>\n      <h1>App</h1>\n      <input type=\"text\" onInput={valueChangeHandle} />\n      { pending && <p>is ready to loading</p>}\n      <ul>\n        {\n          // 此时的界面渲染将会被推迟\n          deferredItems.map(item => {\n            return <li key={item}>{item}</li>\n          })\n        }\n      </ul>\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n\n\n\n\n### 自定义 Hook\n\n#### 自定义生命周期 Hook\n\n```jsx\nimport React, { memo, useEffect, useState } from 'react'\n\n/*\n 输出顺序：\n child componentDidMount\n father componentDidMount\n child componetWillUnmount （点击 toggle 按钮后）\n child componentDidMount （再次点击 toggle 按钮后）\n*/\nconst lifeStyle = (cname) => {\n  useEffect(() => {\n    console.log(cname, 'componentDidMount')\n    return () => {\n      console.log(cname, 'componetWillUnmount')\n    }\n  }, [])\n}\n\nconst Child = memo(() => {\n  lifeStyle('child')\n  return (\n    <h2>Child</h2>\n  )\n})\n\nconst CustomerLifeStyle = memo(() => {\n  const [isShow, setIsShow] = useState(true)\n  lifeStyle('father')\n  return (\n    <div>\n      <h2>LifeStyle</h2>\n      <button onClick={e => setIsShow(!isShow)}>toggle destroy</button>\n      { isShow && <Child />}\n    </div>\n  )\n})\n\nexport default CustomerLifeStyle\n```\n\n#### 自定义监控滚动位置 Hook\n\n```jsx\nimport { useEffect, useState } from \"react\"\n\nconst useScroll = () => {\n  const [scrollX, setScrollX] = useState(0)\n  const [scrollY, setScrollY] = useState(0)\n\n  useEffect(() => {\n    window.addEventListener('scroll', (e) => {\n      setScrollX(window.scrollX)\n      setScrollY(window.scrollY)\n    })\n\n    return () => {\n      window.removeEventListener('scroll')\n    }\n  }, [])\n\n  return [scrollX, scrollY]\n}\n\nimport React, { memo } from 'react'\n\nconst CustomerScroll = memo(() => {\n  const [scrollX, scrollY] = useScroll()\n  return (\n    <div style={{height: '50vh', width: '150vh'}}>CustomerScroll - [{scrollX}] - [{scrollY}]</div>\n  )\n})\n\nexport default CustomerScroll\n```\n\n### Redux 中的 Hook\n\nuseSelector 用于获取当前的 state\n\nuseDispatch 用于分发事件\n\n定义 store\n\n```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './features/count'\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n\nexport default store\n```\n\n定义 reducer\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\"\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    count: 10\n  },\n  reducers: {\n    addCount(state, action) {\n      state.count += action.payload\n    },\n    minCount(state, action) {\n      state.count -= action.payload\n    }\n  }\n})\n\nexport const { addCount, minCount } = counterSlice.actions\n\nexport default counterSlice.reducer\n```\n\n在组件中使用\n\n```jsx\nimport React, { memo } from 'react'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport { addCount, minCount } from './store/features/count'\n\nconst App = memo((props) => {\n  const { count, addCounter, minCounter } = props\n\n  // 使用 redux 钩子函数引入\n  const state = useSelector((state) => {\n    return state.counter\n  })\n  const dispatch = useDispatch()\n  \n  return (\n    <div>\n      <h1>App</h1>\n      <p>{count}</p>\n      <button onClick={e => addCounter(1)}>Add</button>\n      <button onClick={e => minCounter(1)}>Min</button>\n\n      <hr />\n\n      <h2>New App</h2>\n      <p>{state.count}</p>\n      <button onClick={e => dispatch(addCount(1))}>Add</button>\n      <button onClick={e => dispatch(minCount(1))}>Min</button>\n    </div>\n  )\n})\n\n// 之前引入 redux 方式\nconst mapStateToProps = (state) => ({\n  count: state.counter.count\n})\nconst mapDispatchToProps = (dispatch) => ({\n  addCounter: (num) => dispatch(addCount(num)),\n  minCounter: (num) => dispatch(minCount(num))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n```\n\n\n\n当使用 useSelector 获取状态时，当改变状态时，所有使用到 useSelector 的组件都会重新渲染，使用 shallowEqual 进行浅层比较\n\n```jsx\nimport React, { memo } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\nimport { addCount, minCount, changeMessage } from './store/features/count'\n\nconst Home = memo(() => {\n  console.log('Home render')\n  // 此时，父组件更改 state ，该组件将会被重新渲染\n  // const { message } = useSelector((state) => state.counter)\n  // 使用 shallowEqual 父组件更改的内容子组件没有使用，子组件将不会重新渲染\n  const message = useSelector((state) => state.counter.message, shallowEqual)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <h2>Home: {message}</h2>\n      <button onClick={e => dispatch(changeMessage('home'))}>Change Message</button>\n    </div>\n  )\n})\n\nconst App = memo((props) => {\n  // 使用 redux 钩子函数引入\n  const state = useSelector((state) => {\n    return state.counter\n  })\n  const dispatch = useDispatch()\n  console.log('App render')\n  return (\n    <div>\n      <h1>App</h1>\n      <p>{state.count}</p>\n      <button onClick={e => dispatch(addCount(1))}>Add</button>\n      <button onClick={e => dispatch(minCount(1))}>Min</button>\n      <Home />\n    </div>\n  )\n})\n\n\nexport default App\n```\n\n\n\n### 服务端渲染\n\n#### useId\n\nuseId 是一个用于生成横跨服务器端和客户端的稳定的唯一 ID 的同时避免 hydration 不匹配的 Hook\n\n- useId 是用于 react 的同构应用开发的，前端的 SPA 页面并不需要使用\n- useId 可以保证应用程序在客户端和服务端生成唯一的 ID，这样可以有效的避免通过一些手段生成的 id 不一致，造成 hydration mismatch\n\n\n\n### 项目搭建\n\n由于使用 create-react-app 命令创建项目时，所有关于 webpack 的配置都被隐藏可以通过如下方式进行项目的配置\n\n1. 使用 eject 命令导出（不可逆）`npm run eject` \n2. 使用 craco `npm install @craco/craco@alpha -D` （推荐）\n\ncreate-react-app config\n\ncraco 进行对项目进行配置 [详细配置信息](https://craco.js.org/docs/configuration/devserver/) \n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n      '@components': path.resolve(__dirname, './src/components'),\n      '@utils': path.resolve(__dirname, './src/utils')\n    },\n    configure: {\n      resolve: {\n        extensions: ['.jsx', 'js', '.ts', '.tsx', '.css', '.scss', '.less']\n      }\n    }\n  },\n  devServer: {\n    host: '0.0.0.0',\n    port: 9000,\n    open: false\n  }\n}\n```\n\n并需要在 package.json 文件中使用 craco 命令启动项目\n\n```json\n  \"scripts\": {\n    \"start\": \"craco start\",\n    \"build\": \"crac0 build\",\n    \"test\": \"craco test\",\n    \"eject\": \"react-scripts eject\"\n  }\n```\n\n","slug":"react","published":1,"updated":"2025-09-03T15:27:01.547Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkffd0008r44y4a1megun","content":"<h1 id=\"React-学习\"><a href=\"#React-学习\" class=\"headerlink\" title=\"React 学习\"></a>React 学习</h1><h2 id=\"第一站\"><a href=\"#第一站\" class=\"headerlink\" title=\"第一站\"></a>第一站</h2><p>一个简单的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">crossorigin</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">crossorigin</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 添加对 jsx 语法的支持 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> app = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&#x27;Hello World&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      text = <span class=\"string\">&#x27;Hello React&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">render</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      app.<span class=\"title function_\">render</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeText&#125;</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      )</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">render</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用类的方式创建组件\"><a href=\"#使用类的方式创建组件\" class=\"headerlink\" title=\"使用类的方式创建组件\"></a>使用类的方式创建组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world!&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after component mount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after component update&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before component unmount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123;count: count + 1&#125;)&#125;&gt;Add One<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类组件的声明周期\"><a href=\"#类组件的声明周期\" class=\"headerlink\" title=\"类组件的声明周期\"></a>类组件的声明周期</h4><ul>\n<li>construct：在组件被实例化的时候执行<ul>\n<li>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数</li>\n<li>通过给 this.state 赋值对象来初始化内部的 state</li>\n<li>为事件绑定实例（this）</li>\n</ul>\n</li>\n<li>render：组件实例化或更新界面中的变量都会被重新执行</li>\n<li>componentDidMount：组件被挂载后会执行<ul>\n<li>依赖于 DOM 的操作可以在这里进行</li>\n<li>在此处发送网络请求就是最好的地方</li>\n<li>可以在此处添加一些订阅（会在 componentWillUnmount 取消订阅）</li>\n</ul>\n</li>\n<li>componentDidUpdate：组件被更新后会执行（render 先于此函数执行）<ul>\n<li>当组件更新后，可以在此处对 DOM 进行操作</li>\n<li>如果对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）</li>\n</ul>\n</li>\n<li>componentWillUnmount：组件被销毁前执行<ul>\n<li>在此方法中执行必要的清理操作，例如：清除 timer，取消网络请求或清除在 componentDidMount 中创建的订阅等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h4><p>Father component</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; count &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Father<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">data</span>=<span class=\"string\">&#123;[</span>&#x27;<span class=\"attr\">father</span> <span class=\"attr\">transfer</span> <span class=\"attr\">data1</span>&#x27;, &#x27;<span class=\"attr\">father</span> <span class=\"attr\">transfer</span> <span class=\"attr\">data2</span>&#x27;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">               <span class=\"attr\">title</span>=<span class=\"string\">&#123;123&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">               <span class=\"attr\">changeNumber</span>=<span class=\"string\">&#123;(num)</span> =&gt;</span> this.setState(&#123;count: count + num&#125;)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Child component</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过这种方式设置默认值，此设置将会覆盖外部设置的所有默认值</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">innerDefaultValue</span>: <span class=\"string\">&#x27;inner default value&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addNumber</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">changeNumber</span>(num)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;data, title, defaultValue, innerDefaultValue&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;defaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;innerDefaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addNumber(1)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addNumber(-1)&#125;&gt;Dec 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            data?.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未传入属性进行限制</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">changeNumber</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">// Child.defaultProps = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   defaultValue: &#x27;default&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用函数式定义组件\"><a href=\"#使用函数式定义组件\" class=\"headerlink\" title=\"使用函数式定义组件\"></a>使用函数式定义组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1. 函数组件没有声明周期</span></span><br><span class=\"line\"><span class=\"comment\">  2. this 关键字不能指向组件实例（因为没有组件实例）</span></span><br><span class=\"line\"><span class=\"comment\">  3. 没有内部状态</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">About</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对参数进行校验\"><a href=\"#对参数进行校验\" class=\"headerlink\" title=\"对参数进行校验\"></a>对参数进行校验</h3><p>对于传递给子组件的数据，有时候我们可能希望进行验证</p>\n<ul>\n<li>项目中默认继承了 Flow 或者 TypeScript，那么直接就可以进行类型验证</li>\n<li>但是，即使我们没有使用 Flow 或者 TypeScript，也可以通过 prop-types 库来进行参数验证</li>\n</ul>\n<p>安装 prop-types 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install prop-types -D</span><br></pre></td></tr></table></figure>\n\n<p>在组件传值进行类型限制</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;data, title, defaultValue&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;defaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            data?.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未传入属性进行限制</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">defaultProps</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaultValue</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>在插槽组件中拿到 this.props 的 children 属性，该属性包含了父组件在使用该组件传递的元素</p>\n<p>插槽组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收参数一</span></span><br><span class=\"line\">    <span class=\"comment\">// const &#123;children&#125; = this.props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return (</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;div className=&#x27;nav-bar&#x27;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;left&#x27;&gt;&#123;children[0]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;center&#x27;&gt;&#123;children[1]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;right&#x27;&gt;&#123;children[2]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收参数二</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;leftSlot, centerSlot, rightSlot&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>&#123;leftSlot(&#x27;left&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>&#123;centerSlot&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>&#123;rightSlot&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NavBar</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../NavBar&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传递方式一</span></span><br><span class=\"line\">    <span class=\"comment\">// return (</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;h1&gt;Hello world&lt;/h1&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;NavBar&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &#123;/* 当只传递一个元素时，子元素接收到 children 不为数组，只为该元素 */&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;button&gt;left button&lt;/button&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;input type=&quot;text&quot; /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;i&gt;三&lt;/i&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;/NavBar&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递方式二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 通过使用函数的方式达到作用域插槽的效果 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavBar</span> <span class=\"attr\">leftSlot</span>=<span class=\"string\">&#123;text</span> =&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                centerSlot=&#123;<span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                rightSlot=&#123;<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"跨组件通信\"><a href=\"#跨组件通信\" class=\"headerlink\" title=\"跨组件通信\"></a>跨组件通信</h3><ol>\n<li><p>定义上下文对象</p>\n<p>主题上下文对象</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值，当需要使用该上下文的组件并没有被 Provider 包裹时，将会显示该值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title function_\">createContext</span>(&#123;<span class=\"attr\">color</span>: <span class=\"string\">&#x27;#999&#x27;</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#eee&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ThemeContext</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t用户上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserContext</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在需要传递数据的组件中使用该上下文并传递数据</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/UserContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Father&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 将需要使用到该上下文的元素使用 Provider 包裹，并传入 value */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;username:</span> &#x27;<span class=\"attr\">zhangsan</span>&#x27;, <span class=\"attr\">age:</span> <span class=\"attr\">18</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">9900aa</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Father</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要引用该值的组件中导入该上下文对象，并设置该子组件的 contextTypes 属性为该上下文对象</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../context/UserContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取该上下文对象的所有值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;color, backgroundColor&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">color</span>, <span class=\"attr\">backgroundColor:</span> <span class=\"attr\">backgroundColor</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UserContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            user =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>username: &#123;user.username&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>age: &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置该组件的 contextType 为上下文对象</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">contextType</span> = <span class=\"title class_\">ThemeContext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n<p>在函数式组件中使用该上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../context/ThemeContext&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ChildMain</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">value.color</span>, <span class=\"attr\">backgroundColor:</span> <span class=\"attr\">value.backgroundColor</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              child main</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildMain</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h3><p>事件总线类的定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventBus</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  eventList = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触发事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">...any</span>&#125; args </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">emit</span>(<span class=\"params\">eventName, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;No such event emit&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> funs = <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fun <span class=\"keyword\">of</span> funs) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fun</span>(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 监听事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; callback </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; that </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"params\">eventName, callback, that</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">get</span>(eventName).<span class=\"title function_\">add</span>(callback.<span class=\"title function_\">bind</span>(that))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">set</span>(eventName, <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([callback.<span class=\"title function_\">bind</span>(that)]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 销毁事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">off</span>(<span class=\"params\">eventName</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;No such event emit&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">delete</span>(eventName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">EventBus</span></span><br></pre></td></tr></table></figure>\n\n<p>定义一个事件总线类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">EventBus</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/eventBus&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventBus</span>()</span><br></pre></td></tr></table></figure>\n\n<p>发送事件组件使用 emit 发送事件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventBus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/events/EventBus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello Father&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Father component Mounted&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Father component Updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">changeTitle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    eventBus.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;UpdateTitle&#x27;</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span>&#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello Father Component&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; title &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Father Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.changeTitle()&#125;&gt;&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>监听事件组件使用 on 监听事件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@components/Father&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventBus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/events/EventBus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">appName</span>: <span class=\"string\">&#x27;App&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App component Mounted&#x27;</span>)</span><br><span class=\"line\">    eventBus.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;UpdateTitle&#x27;</span>, <span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">appName</span>: <span class=\"string\">&#x27;App Component&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; appName &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;appName&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Father</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Father</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Father component Mounted</span><br><span class=\"line\">App component Mounted</span><br><span class=\"line\">&#123;name: <span class=\"string\">&#x27;zhangsan&#x27;</span>, age: 19&#125;</span><br><span class=\"line\">Father component Updated</span><br><span class=\"line\">App component updated</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; TODO 由此可以推断出，挂载组件从内往外，更新组件从外往内</p>\n<h3 id=\"setState-函数\"><a href=\"#setState-函数\" class=\"headerlink\" title=\"setState 函数\"></a>setState 函数</h3><p>setState 为异步函数，设计为异步函数可以显著提升性能</p>\n<ul>\n<li>如果每次调用 setState 都进行一次更新，那么意味着 render 函数会被频繁调用，界面重新渲染这样效率很低</li>\n<li>最好的办法应该是获取到多个更新，之后进行批量更新</li>\n<li>如果同步更新了 state，但是还没有执行 render 函数，那么 state 和 props 不能保持同步<ul>\n<li>state 和 props 不能保持一致性，在开发过程中产生很多的问题</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过回调的方式处理更新的数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">state, props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可以编写一些对新的 state 的处理逻辑，</span></span><br><span class=\"line\">      <span class=\"comment\">// 可以获得之前的 state 和 props 对象</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, props)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setState 是一个异步函数，在这个地方将会打印修改之前的 state</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过传入回调函数，该回调函数将会在更新之后执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// componentDidUpdate 声明周期函数将会先于这个函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在 react 18 之前如下代码（setTimeout 或者 原生 dom 事件中 或者 promise 中）将会输出修改后的，也即 setState 变成同步函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 在 react 18 及之后，如下代码仍然是异步，输出也是修改前的 count</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout function&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onclick event&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将 setState 变为同步可以通过 flushSync 函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; flushSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"title function_\">flushSync</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这里将会拿到更新之后的结果</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCU（should-component-update）\"><a href=\"#SCU（should-component-update）\" class=\"headerlink\" title=\"SCU（should component update）\"></a>SCU（should component update）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; flushSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此种方式成为 SCU should component update</span></span><br><span class=\"line\">  <span class=\"comment\">// 当此函数返回 false 时不会重新渲染，当返回 true 时会重新渲染</span></span><br><span class=\"line\">  <span class=\"title function_\">shouldComponentUpdate</span>(<span class=\"params\">nextProps, nextState</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextProps, nextState, nextProps == <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, nextState.<span class=\"property\">count</span> == <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps == <span class=\"variable language_\">this</span>.<span class=\"property\">props</span> &amp;&amp; nextState.<span class=\"property\">count</span> == <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不进行重新渲染</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"title function_\">flushSync</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这里将会拿到更新之后的结果</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PureComponent-和-memo\"><a href=\"#PureComponent-和-memo\" class=\"headerlink\" title=\"PureComponent 和 memo\"></a>PureComponent 和 memo</h3><blockquote>\n<p>PureComponent 相当于使用 shouldComponentUpdate，其在该函数中进行比较 state 和 props.</p>\n<p>其比较的为浅层的，当比较的是引用类型的数据时，其内部属性发生改变，将不会调用 render 函数</p>\n<p>因此在对 state 中的属性进行修改时，应创建新对象</p>\n<p>memo 为 函数式组件的 PureComponent</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/Child&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/ChildFunction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;app updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Child</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;child message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child update&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child render&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ChildFunction</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChildFunction</span> = <span class=\"title function_\">memo</span>(<span class=\"keyword\">function</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child Function<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;props.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildFunction</span></span><br></pre></td></tr></table></figure>\n\n<p>修改对象触发 render 更新</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/Child&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/ChildFunction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">books</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book1&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">80</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book2&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">78</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book3&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">90</span>, <span class=\"attr\">count</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;app updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addBook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book4&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">77</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addBookCount</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books[index].<span class=\"property\">count</span> ++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count, books&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            books.map((book, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  &#123;book.name&#125;-&#123;book.price&#125;-&#123;book.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addBookCount(index)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addBook()&#125;&gt;Add New Book<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取组件实例-ref\"><a href=\"#获取组件实例-ref\" class=\"headerlink\" title=\"获取组件实例 ref\"></a>获取组件实例 ref</h3><p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@components/Child&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/ChildFunction&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 推荐使用这种方式</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">node</span> = <span class=\"title function_\">createRef</span>(),</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">node2</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">functionChild</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node2</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>.<span class=\"title function_\">test</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>.<span class=\"property\">test</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">functionChild</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">btnClick</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.node&#125;</span>&gt;</span>Ref1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.node2 = e&#125;&gt;Ref2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.btnClick(e)&#125;&gt;button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.child&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.functionChild&#125;</span> <span class=\"attr\">message</span>=<span class=\"string\">&#x27;hello child function&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child test function execution!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n<p>函数子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChildFunction</span> = <span class=\"title function_\">forwardRef</span>(<span class=\"keyword\">function</span> (<span class=\"params\">props, ref</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child function props&#x27;</span>, props)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child FUnction<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>child function ref<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildFunction</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">inputChange</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 受控组件，当没有绑定 value 时为非受控组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;username&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第二站\"><a href=\"#第二站\" class=\"headerlink\" title=\"第二站\"></a>第二站</h2><h3 id=\"受控组件的表单填写\"><a href=\"#受控组件的表单填写\" class=\"headerlink\" title=\"受控组件的表单填写\"></a>受控组件的表单填写</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">hobbies</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;sing&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;sing&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;dance&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dance&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;rap&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;rap&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">fruits</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">inputChange</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      [e.<span class=\"property\">target</span>.<span class=\"property\">name</span>]: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">submitForm</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">username</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">password</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">hobbies</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">hobby</span> =&gt;</span> hobby.<span class=\"property\">isChecked</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">hobby</span> =&gt;</span> hobby.<span class=\"property\">name</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">fruits</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">checkHobby</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hobbies = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">hobbies</span>]</span><br><span class=\"line\">    hobbies[index].<span class=\"property\">isChecked</span> = !hobbies[index].<span class=\"property\">isChecked</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">hobbies</span>: hobbies</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">selectFruit</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(e.<span class=\"property\">target</span>.<span class=\"property\">selectedOptions</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">fruit</span> =&gt;</span> fruit.<span class=\"property\">value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">fruits</span>: fruits</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username, password, hobbies, fruits &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.submitForm(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 受控组件，当没有绑定 value 时为非受控组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            username: </span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;username&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;username&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            password: </span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;password&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;password&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              hobbies.map((hobby, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&#123;hobby.id&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;hobby.name&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#123;hobby.name&#125;: </span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#123;hobby.id&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;checkbox&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                          <span class=\"attr\">checked</span>=<span class=\"string\">&#123;hobby.isChecked&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> &#123;this.checkHobby(index)&#125;&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                )</span></span><br><span class=\"line\"><span class=\"language-xml\">              &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;fruits&#125;</span> <span class=\"attr\">multiple</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.selectFruit(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;apple&quot;</span>&gt;</span>Apple<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;orange&quot;</span>&gt;</span>Orange<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;banana&quot;</span>&gt;</span>Banana<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;submit&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件的表单\"><a href=\"#非受控组件的表单\" class=\"headerlink\" title=\"非受控组件的表单\"></a>非受控组件的表单</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">notControlled</span>: <span class=\"string\">&#x27;default value&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">notControlledComponent</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">submitForm</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>() <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">notControlledComponent</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; notControlled &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.submitForm(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;not-controlled&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            not controlled component:</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;not-controlled&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.notControlledComponent&#125;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&#123;notControlled&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;submit&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h3><p>高阶组件的英文为 Higher-Order Components，简称为 HOC</p>\n<p>高阶组件的参数为组件，返回值为新组件的函数</p>\n<p>也即，高阶组件本身不是一个组件而是一个函数，这个函数的参是一个组件，返回值也是一个组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HOC</span>(<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">NewComponent</span>\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>高阶组件函数通过上下文为使用该高阶组件的组件传递上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context/ThemeContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return (</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...value</span>&#125; &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          )</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父组件通过上下文对象传值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">eee</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件中的使用上下文传来的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">WithContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hoc/WithContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About: &#123;this.props.color&#125;-&#123;this.props.backgroundColor&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">WithContext</span>(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高阶函数的意义\"><a href=\"#高阶函数的意义\" class=\"headerlink\" title=\"高阶函数的意义\"></a>高阶函数的意义</h4><p>早期 React 提供组件之间一种复用方式时 mixin，目前已经不再使用</p>\n<ul>\n<li>Mixin 可能会相互依赖，相互耦合，不利于代码维护</li>\n<li>不同的 Mixin 中的方法可能会互相冲突<ul>\n<li>MIxin 非常多时，组件处理起来会比较麻烦，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性</li>\n</ul>\n</li>\n</ul>\n<p>HOC 的缺陷：</p>\n<ul>\n<li>HOC 需要在原组件上进行包裹或者嵌套，如果大量使用 HOC，将会产生非常多的嵌套，这让调试变得非常困难</li>\n<li>HOC 可以劫持 props，在不遵守约定的请胯下也可能造成冲突</li>\n</ul>\n<p>Hooks 的出现，是开创性的，它解决了很多的 React 之前存在的问题：</p>\n<ul>\n<li>this 指向问题</li>\n<li>hoc 嵌套复杂度问题</li>\n</ul>\n<h3 id=\"Poral\"><a href=\"#Poral\" class=\"headerlink\" title=\"Poral\"></a>Poral</h3><p>通过使用 createPortal 函数可以设置元素绑定到别的 dom 上</p>\n<p>自定义 modal 通过 portal 渲染到别的 dom 元素上</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPortal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Modal</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          createPortal(this.props.children, document.querySelector(&#x27;#app&#x27;))</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Modal</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPortal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Modal</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Modal&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 绑定到 app dom 上</span></span><br><span class=\"line\"><span class=\"language-xml\">          createPortal(<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>App Portal<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>, document.querySelector(&#x27;#app&#x27;))</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Modal Portal Children 1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Modal Portal Children 2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h3><p>由于 react 最外层必须为一个标签，导致页面渲染之后多使用一个div，可以通过 Fragment 组件，此时界面将不会多渲染一个标签</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">list</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;list&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// &lt;Fragment&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h1&gt;App&lt;/h1&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h2&gt;App 2&lt;/h2&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;/Fragment&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 语法糖写法</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h1&gt;App&lt;/h1&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h2&gt;App 2&lt;/h2&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;/&gt;</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 此时必须要写 Fragment，不能使用语法糖的格式</span></span><br><span class=\"line\"><span class=\"language-xml\">          list.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Fragment</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            )</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"StrictMode\"><a href=\"#StrictMode\" class=\"headerlink\" title=\"StrictMode\"></a>StrictMode</h3><p>StrictMode 是一个用来突出显示应用程序中潜在问题的工具</p>\n<ul>\n<li>与 Fragment 一样，StrictMode 不会渲染任何可见的 UI</li>\n<li>它为后代元素触发额外的检查和警告，严格模式下将会识别过时的方法和类并抛出警告信息<ul>\n<li>识别不安全的声明周期</li>\n<li>使用过时的 ref API</li>\n<li>检测意外的副作用<ul>\n<li>这个组件的 constructor 会被调用两次</li>\n<li>这是严格模式下故意进行的操作，让你来检查看在这里写的一些逻辑代码被调用多次时，是否会产生一些副作用</li>\n<li>在生产环境中，是不会调用两次的</li>\n</ul>\n</li>\n<li>使用废弃的 findDOMNode 方法<ul>\n<li>在之前的 React API 中，可以通过 findDOMNode 来获取 DOM，不过已经不推荐使用了</li>\n</ul>\n</li>\n<li>检测过时的 context API<ul>\n<li>早期的 Context 是通过 static 属性声明 Context 对象属性，通过 getChildContext 返回 Context 对象等方式来使用 Context 的，目前这种方式已经不推荐使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>严格模式检查仅在开发模式下运行；它们不会影响生产构建</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><p>React 通过使用动画插件 react-transition-group 实现组件的入场和离场动画，使用时需要额外的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-transition-group --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSSTransition\"><a href=\"#CSSTransition\" class=\"headerlink\" title=\"CSSTransition\"></a>CSSTransition</h4><p>CSSTransition 是基于 Transition 组件构建的</p>\n<p>CSSTransition 执行过程中，有三个状态：appear、enter、exit</p>\n<p>他们有三种状态，需要定义对应的 CSS 样式</p>\n<ol>\n<li>第一类，开始状态：对应的类是 -appear、-enter、exit</li>\n<li>第二类：执行动画：对应的类是 -appear-active、-enter-active、-exit-active</li>\n<li>第三类：执行结束：对应的类是 -appear-done、-enter-done、-exit-done</li>\n</ol>\n<p>CSSTransition 常见对应属性</p>\n<ul>\n<li>in：触发进入或者推出状态<ul>\n<li>如果添加了 <code>unmountOnExit=&#123;true&#125;</code> ，那么该组件会在执行退出动画时移除掉</li>\n<li>当 in 为 trye 是，触发进入状态，会添加 -enter、-enter-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class、并且添加 -enter-done 的 class</li>\n<li>当 in 为 false 时，触发退出状态，会添加 -exit、-exit-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class，并且添加 -enter-done 的 class</li>\n</ul>\n</li>\n<li>classNames：动画 class 的名称<ul>\n<li>决定了在编写 css 时，对应的 class 名称：比如 example-enter、example-enter-active、example-enter-done</li>\n</ul>\n</li>\n<li>timeout：类添加或移除的时间<ul>\n<li>当该值与样式中设置动画过度时间冲突时，动画执行时间为样式中所设定的，类绑定与消除为该 timeout 属性的值</li>\n</ul>\n</li>\n<li>appear：是否在初次进入添加动画（需要和 in 同时为 true）</li>\n<li>unmountOnExit：退出后卸载组件</li>\n</ul>\n<p>CSSTransition 对应的钩子函数：主要为了检测动画执行过程</p>\n<ul>\n<li>onEnter：在进入动画之前被触发</li>\n<li>onEntering：在应用进入动画时被触发</li>\n<li>onEntered：在应用进入动画结束后被触发</li>\n</ul>\n<p><em>使用 CSSTransition 在 React 中将会报错：Transition.js:292  Uncaught TypeError: l.findDOMNode is not a function， 因此需要指定该组件的 nodeRef 属性为动画元素的根节点</em> </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CSSTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActivate</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActivate &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.setState(&#123;isActivate: !isActivate&#125;)&#125;&gt;Toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">in</span>=<span class=\"string\">&#123;isActivate&#125;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;2000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;dh&#x27;</span> <span class=\"attr\">unmountOnExit</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       // <span class=\"attr\">当不添加</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">时将会报错</span>，<span class=\"attr\">因为该组件使用了</span> <span class=\"attr\">findDOMNode</span> <span class=\"attr\">方法</span>，<span class=\"attr\">该方法已经不支持</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       // <span class=\"attr\">通过设置</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">该组件将会使用</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">的值作为动画的根节点</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       <span class=\"attr\">onEnter</span>=<span class=\"string\">&#123;e</span> =&gt;</span> console.log(&#x27;开始进入动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onEntering=&#123;e =&gt; console.log(&#x27;执行进入动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onEntered=&#123;e =&gt; console.log(&#x27;执行进入动画结束&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExit=&#123;e =&gt; console.log(&#x27;开始离开动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExiting=&#123;e =&gt; console.log(&#x27;执行离开动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExited=&#123;e =&gt; console.log(&#x27;执行离开动画结束&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 必须存在一个根元素 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hidden element<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hidden paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>对应的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SwitchTransition\"><a href=\"#SwitchTransition\" class=\"headerlink\" title=\"SwitchTransition\"></a>SwitchTransition</h4><p>SwitchTransition 可以完成两个组件之间切换的炫酷动画</p>\n<ul>\n<li>比如我们有一个按钮需要在 on 和 off 之间切换，我们希望看到 on 先从左侧退出，off 再从右侧进入</li>\n<li>这个动画在 vue 中被称之为 vue transition modes</li>\n<li>react-transition-group 中使用 SwitchTransition 来实现该动画</li>\n</ul>\n<p>SwitchTransition 中主要有一个属性：mode，有两个值</p>\n<ul>\n<li>in-out：表示新组件先进入，旧组件再移除</li>\n<li>out-in：表示旧组件先移除，新组件再进入</li>\n</ul>\n<p>SwitchTransition 组件里面要有 CSSTransition 或者 Transition 组件，其 CSSTransition&#x2F;Transition 需要设置 key 属性，表示切换不同的状态，该属性值主要设置不一样就代表进行切换</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CSSTransition</span>, <span class=\"title class_\">SwitchTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/App-Transition&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isLogin</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isLogin &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchTransition</span> <span class=\"attr\">mode</span>=<span class=\"string\">&#x27;out-in&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                         <span class=\"attr\">key</span>=<span class=\"string\">&#123;isLogin</span> ? &#x27;<span class=\"attr\">login</span>&#x27; <span class=\"attr\">:</span> &#x27;<span class=\"attr\">logout</span>&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                         <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;1000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;dh&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.setState(&#123;isLogin: !isLogin&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    ref=&#123;this.nodeRef&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                      &#123; isLogin ? &#x27;Login&#x27; : &#x27;Logout&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">SwitchTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>样式设置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TransitionGroup\"><a href=\"#TransitionGroup\" class=\"headerlink\" title=\"TransitionGroup\"></a>TransitionGroup</h4><p>给一组元素设置动画</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TransitionGroup</span>, <span class=\"title class_\">CSSTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/APP-TransitionGroup&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;bbb&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">81</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ccc&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">82</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ddd&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">83</span>&#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>.<span class=\"property\">length</span>; ++ i) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">push</span>(<span class=\"title function_\">createRef</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addNewBook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;eee&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">180</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">push</span>(<span class=\"title function_\">createRef</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">deleteBook</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; books &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; books &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TransitionGroup</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            books.map((book, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;book.id&#125;</span> <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef[index]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                               <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;1000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;example&#x27;</span> <span class=\"attr\">unmountOnExit</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.nodeRef[index]&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;book.name&#125;-&#123;book.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.deleteBook(index)&#125;&gt;delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">TransitionGroup</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.addNewBook()&#125;&gt;Add new book<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS 文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">100px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">100px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><h4 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h4><p>style 接受一个采用小驼峰命名属性的 JavaScript 对象，并且可以引用 state 中的状态来设置相关的样式</p>\n<p>内联样式的优点：</p>\n<ol>\n<li>内联样式，样式之间不会有冲突</li>\n<li>可以动态获取当前 state 中的状态</li>\n</ol>\n<p>内联样式的缺点：</p>\n<ol>\n<li>写法上都需要使用驼峰表示</li>\n<li>某些样式没有提示</li>\n<li>大量的样式，代码混乱</li>\n<li>某些样式无法编写（比如伪类，伪元素）</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> style = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;20px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">border</span>: <span class=\"string\">&#x27;1px solid #eee&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;style&#125;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用外部-CSS-文件\"><a href=\"#引用外部-CSS-文件\" class=\"headerlink\" title=\"引用外部 CSS 文件\"></a>引用外部 CSS 文件</h4><p>该方式将会对所有文件生效，即使是子组件中引用的样式文件也将对所有文件生效</p>\n<p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Home</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Home</span></span><br></pre></td></tr></table></figure>\n\n<p>样式文件（此样式将对所有文件生效）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-Modules\"><a href=\"#CSS-Modules\" class=\"headerlink\" title=\"CSS Modules\"></a>CSS Modules</h4><p>css modules 并不是 React 特有的解决方案，而是所有使用了类似于 webpack 配置的环境下都可以使用的</p>\n<ul>\n<li>如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置 webpack.config.js 中的 modules: true 等</li>\n</ul>\n<p>React 的脚手架已经内置了 css modules 的配置</p>\n<ul>\n<li>.css&#x2F;.less&#x2F;.scss 等样式文件都需要修改成 .module.css&#x2F;.module.less&#x2F;.module.scss 等</li>\n</ul>\n<p>css modules 确实解决了局部作用域的问题，但是这种方案仍存在如下的缺陷：</p>\n<ol>\n<li>引用的类名，不能使用连接符（.home-title）其中 - 在 JavaScript 不被识别</li>\n<li>所有的 className 都必须使用 {style.className} 的形式来编写</li>\n<li>不方便动态修改某些样式，仍然需要使用内联样式的方式</li>\n</ol>\n<p>配置 webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">ProvidePlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 使用 named 进行导出（即 export 方式），通过使用 import &#123;类名&#125; 导入</span></span><br><span class=\"line\">              <span class=\"attr\">namedExport</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"comment\">// 设置类的名字格式</span></span><br><span class=\"line\">              <span class=\"attr\">localIdentName</span>: <span class=\"string\">&#x27;[local]_[contenthash:6]&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该样式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;title&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(title)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h4><p>CSS-in-JS 是指一种模式，其中 CSS 由 JavaScript 生成，而不是在外部中定义</p>\n<p>这个功能并不是 React 的一部分，而是由第三方库提供</p>\n<ul>\n<li>CSS-in-JS 通过 JavaScript 来为 CSS 赋予一些能力，包括 类似于 CSS 预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改状态等</li>\n<li>虽然 CSS 预处理器也具备某些能力，但是获取动态状态依然是一个不好处理的点</li>\n</ul>\n<p>目前比较理性的 CSS-in-JS 的库：</p>\n<ol>\n<li>styled-components（常用）</li>\n<li>emotion</li>\n<li>glamorous</li>\n</ol>\n<p>使用 styled-components</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install styled-components -D</span><br></pre></td></tr></table></figure>\n\n<p>定义 CSS js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以通过 attrs 函数设置样式属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AppStyleWrapper</span> = styled.<span class=\"property\">div</span>.<span class=\"title function_\">attrs</span>(<span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: props.<span class=\"property\">color</span> || <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#ff8800&#x27;</span></span><br><span class=\"line\">&#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .title &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;props =&gt; props.fontSize&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid #aaa;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &amp;:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">      background-color: <span class=\"subst\">$&#123;props =&gt; props.backgroundColor&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">      color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">AppStyleWrapper</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该样式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AppStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">AppStyleWrapper</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 传递参数，该组件将参数接收到 props 中</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AppStyleWrapper</span> <span class=\"attr\">color</span>=<span class=\"string\">&#x27;yellow&#x27;</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">&#x27;50px&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">AppStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主题和继承\"><a href=\"#主题和继承\" class=\"headerlink\" title=\"主题和继承\"></a>主题和继承</h4><p>About 组件样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AboutFatherStyleWrapper</span> = styled.<span class=\"property\">div</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .content &#123;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid #aaa;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承 AboutFatherStyleWrapper 样式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AboutStyleWrapper</span> = <span class=\"title function_\">styled</span>(<span class=\"title class_\">AboutFatherStyleWrapper</span>)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .about-title &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.theme.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: 18px;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  .content &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.theme.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    background-color: <span class=\"subst\">$&#123;props =&gt; props.theme.backgroundColor&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">AboutStyleWrapper</span></span><br></pre></td></tr></table></figure>\n\n<p>About 组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AboutStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AboutStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;about-title&#x27;</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;content&#x27;</span>&gt;</span>About content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">AboutStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">About</span></span><br></pre></td></tr></table></figure>\n\n<p>App 组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ThemeProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;styled-components&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AppStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">AppStyleWrapper</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 通过 ThemeProvider 向所有子组件提供主题样式</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeProvider</span> <span class=\"attr\">theme</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;#<span class=\"attr\">909090</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">09aaf3</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 传递参数，该组件将参数接收到 props 中 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">AppStyleWrapper</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">&#x27;50px&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">AppStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ThemeProvider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"classnames-库\"><a href=\"#classnames-库\" class=\"headerlink\" title=\"classnames 库\"></a>classnames 库</h3><p>在需要动态添加样式时，使用 react 会比较繁琐</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">isDelete</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActive, isDelete &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span>`$&#123;<span class=\"attr\">isActive</span>? &#x27;<span class=\"attr\">active</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125; $&#123;<span class=\"attr\">isDelete</span> ? &#x27;<span class=\"attr\">delete</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125;`&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用 classnames 库来简化动态类的添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install classnames</span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> classnames <span class=\"keyword\">from</span> <span class=\"string\">&#x27;classnames&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">isDelete</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActive, isDelete &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classnames(</span>&#x27;<span class=\"attr\">title</span>&#x27;, &#123;&#x27;<span class=\"attr\">active</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isActive</span>, &#x27;<span class=\"attr\">delete</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isDelete</span>&#125;)&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classnames([</span>&#x27;<span class=\"attr\">title</span>&#x27;, &#123;&#x27;<span class=\"attr\">active</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isActive</span>, &#x27;<span class=\"attr\">delete</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isDelete</span>&#125;])&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第三站\"><a href=\"#第三站\" class=\"headerlink\" title=\"第三站\"></a>第三站</h2><h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>在程序设计中，若一个函数符合以下条件，那么这个函数就是纯函数</p>\n<ol>\n<li>此函数在相同的输入值时，需要产生相同的输出</li>\n<li>函数的输出和输入值以外的其他隐藏信息或状态无关</li>\n<li>该函数不能由语义上可观察的函数副作用，诸如 触发事件，使用输入输出设备，或更改输出值以外的内容等<ol>\n<li>副作用表示在执行一个函数时，除了返回数值以外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储</li>\n</ol>\n</li>\n</ol>\n<p>纯函数的优点：</p>\n<ol>\n<li>在编写纯函数的时候，只需要单纯实现自己的业务逻辑即可不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改</li>\n<li>在使用的时候，只需要确保输入的内容不会被任意篡改，并且确定的输入一定会有确定的输出</li>\n</ol>\n<h3 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h3><p>随着需要管理的状态越来越多，越来越复杂，以及要管理的状态（包括服务器返回的数据，缓存数据、用户操作产生的数据、UI的状态），需要对状态进行监管。</p>\n<p>React 是在视图层帮助我们解决了 DOM 的渲染过程，但是 State 任然留给我们自己管理</p>\n<ul>\n<li>无论是组件定义自己的 state，还是组件之间的通信通过 props 进行传递；也包括 context 进行数据之间的共享</li>\n<li>React 主要负责帮助我们管理视图，state 如何维护最终还是我们自己来决定</li>\n</ul>\n<p>Redux 就是一个帮助我们管理 state 的容器；Redux 是 JavaScript 的状态容器，提供了可预测的状态管理</p>\n<p>Redux 除了可以和 React 一起使用之外，它也可以和其他界面库一起来用（Vue）并且他很小（包括依赖在内，只有 2kb）</p>\n<ul>\n<li>Redux要求我们通过 action 来更新数据<ul>\n<li>所有数据的变化，必须通过派发（dispath）action 来更新</li>\n<li>action 是一个普通的 JavaScript 对象，用来描述这次更新 type 和 content</li>\n<li>强制使用 action 的好处是可以清晰知道数据到底发生了什么样的变化，所有数据都是可追踪、可预测的</li>\n</ul>\n</li>\n<li>state 和 action 通过 reducer 进行联系<ul>\n<li>reducer 是一个纯函数</li>\n<li>reducer 做的事情就是将传入的 state 和 action 结合起来生成一个新的 state</li>\n</ul>\n</li>\n</ul>\n<p>引入 redux 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux --save</span><br></pre></td></tr></table></figure>\n\n<p>redux 基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;createStore&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redux&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该函数将会被执行两次，第一次是刚开始创建的时候</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; state 未被修改的 state 的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; action 使用 store.dispatch 传入的 action</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回值将作为 store 之后存储的 state</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一次打印：reducer:  &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125; &#123; type: &#x27;@@redux/INIT7.d.i.y.a.5&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二次打印：reducer:  &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125; &#123; type: &#x27;update_username&#x27;, username: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;reducer: &#x27;</span>, state, action)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> == <span class=\"string\">&#x27;update_username&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">username</span>: action.<span class=\"property\">username</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>()) <span class=\"comment\">// &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这样修改将导致界面不会发生动态更新</span></span><br><span class=\"line\"><span class=\"comment\">// store.getState().username = &#x27;lisi&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(store.getState())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;update_username&#x27;</span>, <span class=\"attr\">username</span>: <span class=\"string\">&#x27;wangwu&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// &#123; type: &#x27;update_username&#x27;, username: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>()) <span class=\"comment\">// &#123; username: &#x27;wangwu&#x27;, age: 16 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过订阅模式进行事件监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createStore &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redux&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;article1&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;article2&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;lisi&#x27;</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;public article&#x27;</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> [...state, action.<span class=\"property\">article</span>]</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;delete article&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = [...state]</span><br><span class=\"line\">      res.<span class=\"title function_\">splice</span>(action.<span class=\"property\">start</span>, action.<span class=\"property\">count</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"><span class=\"keyword\">const</span> unsubscribe = store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;store subscribe: &#x27;</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">publicAction</span> = (<span class=\"params\">article</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;public article&#x27;</span>,</span><br><span class=\"line\">  article</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deleteAction</span> = (<span class=\"params\">start, count</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;delete article&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">start</span>: start,</span><br><span class=\"line\">  <span class=\"attr\">count</span>: count</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">store subscribe:  [</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article1&#x27;, author: &#x27;zhangsan&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article2&#x27;, author: &#x27;lisi&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;a1&#x27;, author: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">publicAction</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;wangwu&#x27;</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">store subscribe:  [</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article1&#x27;, author: &#x27;zhangsan&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;a1&#x27;, author: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">deleteAction</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\"><span class=\"comment\">// 下面将不会触发订阅事件</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">publicAction</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a3&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;laowang&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>对使用过程进行优化，通常将文件分为如下四个部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionCreator.js <span class=\"comment\"># 存放创建的 action 函数</span></span><br><span class=\"line\">constants.js <span class=\"comment\"># 存放常量，即 switch 中的 case</span></span><br><span class=\"line\">index.js <span class=\"comment\"># 存放 store 对象</span></span><br><span class=\"line\">reducer.js <span class=\"comment\"># 存放数据以及 reducer 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>actionCreator.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">CHANGE_AGE</span>, <span class=\"variable constant_\">CHANGE_NAME</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./constants&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">changeName</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">CHANGE_NAME</span>,</span><br><span class=\"line\">    <span class=\"attr\">username</span>: username</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">changeAge</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">CHANGE_AGE</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>constants.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">CHANGE_NAME</span> = <span class=\"string\">&#x27;CHANGE_NAME&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">CHANGE_AGE</span> = <span class=\"string\">&#x27;CHANGE_AGE&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reducer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>reducer.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">CHANGE_AGE</span>, <span class=\"variable constant_\">CHANGE_NAME</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./constants&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">CHANGE_NAME</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">username</span>: action.<span class=\"property\">username</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">CHANGE_AGE</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">age</span>: action.<span class=\"property\">age</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-三大原则\"><a href=\"#Redux-三大原则\" class=\"headerlink\" title=\"Redux 三大原则\"></a>Redux 三大原则</h4><p>单一数据源</p>\n<ul>\n<li>整个应用程序的 state 被存储在一颗 object tree 中，并且 这个 object tree 只存储在一个 store 中</li>\n<li>Redux 并没有强制让我们不能创建多个 Store，但是那样做并不利于数据的维护</li>\n<li>单一的数据源可以让整个应用程序的 state 变得方便维护、追踪、修改</li>\n</ul>\n<p>State 是只读的</p>\n<ul>\n<li>唯一修改 state 的方法一定是触发 action，不要试图在其他地方通过任何的方式修改 state</li>\n<li>这样就确保了 View 或网络请求都不能直接修改 state，他们只能通过 action 来描述自己想要如何修改 state</li>\n<li>这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心 race condition（竞态）的问题</li>\n</ul>\n<p>使用纯函数来执行修改</p>\n<ul>\n<li>通过 reducer 将 旧 state 和 actions 联系在一起，并且返回一个新的 state</li>\n<li>随着应用程序的复杂度增加，我们可以将 reducer 拆分成多个小的 reducer 分别操作不同的 state tree 的一部分</li>\n<li>但是所有的 reducer 都应该是纯函数，不能产生任何的副作用</li>\n</ul>\n<h3 id=\"在-React-中使用-Redux\"><a href=\"#在-React-中使用-Redux\" class=\"headerlink\" title=\"在 React 中使用 Redux\"></a>在 React 中使用 Redux</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/system&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, desCount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/system/actionCreators&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: store.<span class=\"title function_\">getState</span>().<span class=\"property\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: store.<span class=\"title function_\">getState</span>().<span class=\"property\">count</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> store.dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> store.dispatch(desCount(1))&#125;&gt;Des<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h4><p>在 react 中使用封装后的 redux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-redux</span><br></pre></td></tr></table></figure>\n\n<p>在根组件中使用 Provider 给后续组件设置 store</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createRoot&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在需要使用 store 组件中使用 connect 进行使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeUsername &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/actionCreator&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeUsername</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">changeUsername</span>(<span class=\"string\">&#x27;lisi&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.changeUsername()&#125;&gt;Change Username<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤不需要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: state?.<span class=\"property\">username</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: state?.<span class=\"property\">age</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">changeUsername</span>(username))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// connect 函数执行后返回一个高阶组件函数</span></span><br><span class=\"line\"><span class=\"comment\">// connect 接收两个函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当使用异步请求时，需要对 dispatch 传递一个函数作为分发的对象，此时需要对 redux 进行增强，安装 redux-thunk 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux-thunk</span><br></pre></td></tr></table></figure>\n\n<p>在 actionCreator.js 文件中编写函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">addUser</span>(<span class=\"params\">userList</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">ADD_USERS</span>,</span><br><span class=\"line\">    <span class=\"attr\">users</span>: userList</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义异步请求函数，将该函数进行返回</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_fetch</span>(<span class=\"params\">dispatch, getState</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;http://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;<span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> userList = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addUser</span>(userList))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _fetch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中只需要调用该函数即可</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/actionCreator&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">fetchData</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; users &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            users?.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.id&#125; - &#123;user.userId&#125; - &#123;user.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            ))</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤不需要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: state?.<span class=\"property\">users</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// connect 函数执行后返回一个高阶组件函数</span></span><br><span class=\"line\"><span class=\"comment\">// connect 接收两个函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<p>redux dev tools 开启</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-拆分\"><a href=\"#Redux-拆分\" class=\"headerlink\" title=\"Redux 拆分\"></a>Redux 拆分</h4><p>通过创建独立的文件夹区分不同的 redux，在 index.js 中合并不同的  reducer </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose, combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> homeReducer <span class=\"keyword\">from</span> <span class=\"string\">&quot;../home/reducer&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> profileReducer <span class=\"keyword\">from</span> <span class=\"string\">&quot;../profile/reducer&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"title function_\">combineReducers</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">home</span>: homeReducer,</span><br><span class=\"line\">  <span class=\"attr\">profile</span>: profileReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>combineReducers 函数的实现类似于下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span> (<span class=\"params\">state = &#123;&#125;, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始时，传入 reducer 的参数为：state: undefined action: &#123;type: &#x27;@@INIT&#x27;&#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">home</span>: <span class=\"title function_\">homeReducer</span>(state.<span class=\"property\">home</span>, action),</span><br><span class=\"line\">    <span class=\"attr\">profile</span>: <span class=\"title function_\">profileReducer</span>(state.<span class=\"property\">profile</span>, action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-插件\"><a href=\"#Redux-插件\" class=\"headerlink\" title=\"Redux 插件\"></a>Redux 插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录日志，通过对 dispatch 进行拦截</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">store</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = store.<span class=\"property\">dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">recordLog</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before action execute&#x27;</span>, action)</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store.<span class=\"property\">dispatch</span> = recordLog</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">log</span>(store)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-Toolkit\"><a href=\"#Redux-Toolkit\" class=\"headerlink\" title=\"Redux Toolkit\"></a>Redux Toolkit</h4><p>redux toolkit 是官方推荐编写 redux 逻辑的方法，该工具能解决使用 redux 编写时逻辑过于繁琐，代码量过多且不利于管理等问题</p>\n<p>redux toolkit 的核心 API 主要包含如下：</p>\n<ul>\n<li>configureStore：包装 createStore 以提供简化的配置选项和良好的默认值，它可以自动组合你的 slice reducer，添加你提供的任何 redux 中间件，redux-thunk 默认包含，并启用 redux devtool extension</li>\n<li>createSlice：接受 reducer 函数的对象，切片名称和初始状态值，并自动生成切片 reducer，并带有相应的 actions</li>\n<li>createAsyncThunk：接受一个动作类型字符串和一个返回 Promise 的函数，并生成一个 pending&#x2F;fulfilled&#x2F;rejected 基于该 Promise分派动作类型的 thunk</li>\n</ul>\n<p>安装 redux-toolkit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>\n\n<p>创建 store&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> profileReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./features/profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">profile</span>: profileReducer</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的 reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> profileSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;profile&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// action: &#123;type: &#x27;profile/changeUsername&#x27;, payload: &#x27;lisi&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action)</span><br><span class=\"line\">      state.<span class=\"property\">username</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">changeAge</span>(<span class=\"params\">state, aciton</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, aciton)</span><br><span class=\"line\">      state.<span class=\"property\">age</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; changeUsername, changeAge &#125; = profileSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> profileSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeUsername, changeAge &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/features/profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username, age &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125; - &#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.props.changeUsername(&#x27;lisi&#x27;)&#125;&gt;Change Username<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: state.<span class=\"property\">profile</span>.<span class=\"property\">username</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: state.<span class=\"property\">profile</span>.<span class=\"property\">age</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">changeUsername</span>(username))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Profile</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 Redux Toolkit 中使用异步函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice, createAsyncThunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"title function_\">createAsyncThunk</span>(<span class=\"string\">&#x27;fetch/home&#x27;</span>, <span class=\"title function_\">async</span> (extractInfo, store) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;http://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;<span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过如下方式直接在这个里面添加数据</span></span><br><span class=\"line\">  store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addUser</span>(data))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> homeSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addUser</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">users</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 这种方式现已不支持</span></span><br><span class=\"line\">  <span class=\"comment\">// extraReducers: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.pending](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;ready to fetch data&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.fulfilled](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;have got data&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.rejected](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;get data error&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// 支持的写法</span></span><br><span class=\"line\">  <span class=\"attr\">extraReducers</span>: <span class=\"function\">(<span class=\"params\">builder</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    builder.<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">pending</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;ready to fetch data&#x27;</span>)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">fulfilled</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;have got data&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// state.users = action.payload</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">rejected</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;get data error&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; addUser &#125; = homeSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> homeSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/features/home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">fetchHomeData</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; users &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            ))</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">users</span>: state.<span class=\"property\">home</span>.<span class=\"property\">users</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"title function_\">fetchHomeData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>(&#123;<span class=\"attr\">path</span>: <span class=\"string\">&#x27;123&#x27;</span>&#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Home</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-Toolkit-的数据不可变性\"><a href=\"#Redux-Toolkit-的数据不可变性\" class=\"headerlink\" title=\"Redux Toolkit 的数据不可变性\"></a>Redux Toolkit 的数据不可变性</h4><p>Redux Toolkit 底层使用了 immerjs 的一个库来保证数据的不可变性</p>\n<p>为了节约内存，又出现了一个新的算法：Persistent Data Structure （持久化数据结构或一致性数据结构）</p>\n<ul>\n<li>用一种数据结构来保存数据</li>\n<li>当数据被修改时，会返回一个对象，但是新的对象会尽可能利用之前的数据结构而不会对内存造成浪费</li>\n</ul>\n<h4 id=\"connect-函数的实现\"><a href=\"#connect-函数的实现\" class=\"headerlink\" title=\"connect 函数的实现\"></a>connect 函数的实现</h4><p>connect 函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../store&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">StoreContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./StoreContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * realize a connect function</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; mapStateToProps </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; mapDispatchToProps </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> high component function</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connect</span>(<span class=\"params\">mapStateToProps, mapDispatchToProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">Component</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">NewComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">constructor</span>(<span class=\"params\">props, context</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"title function_\">mapStateToProps</span>(context.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"title function_\">mapStateToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">getState</span>()))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// state dispatch</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> states = <span class=\"title function_\">mapStateToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dispatchs = <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...this.props</span>&#125; &#123;<span class=\"attr\">...states</span>&#125; &#123;<span class=\"attr\">...dispatchs</span>&#125;/&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">NewComponent</span>.<span class=\"property\">contextType</span> = <span class=\"title class_\">StoreContext</span></span><br><span class=\"line\">    <span class=\"comment\">// return newComponent</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">NewComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>StoreContext</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">StoreContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">StoreContext</span></span><br></pre></td></tr></table></figure>\n\n<p>main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">StoreContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hoc/StoreContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;/* 必须要加上 Provider */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">StoreContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">StoreContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"React-中-state-管理\"><a href=\"#React-中-state-管理\" class=\"headerlink\" title=\"React 中 state 管理\"></a>React 中 state 管理</h4><p>react 中管理状态可以通过：1. 组件中自己的state、2. Context 数据的共享状态、3. Redux 管理应用状态</p>\n<ul>\n<li>UI 相关的组件内部可以维护的状态，在组件内部自己来维护</li>\n<li>大部分需要共享的状态，都交给 redux 来管理和维护</li>\n<li>从服务器请求的数据（包括请求的操作），交给 redux 来维护</li>\n</ul>\n<h3 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h3><p>安装相关依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-router-dom</span><br></pre></td></tr></table></figure>\n\n<p>react-router 会包含一些 react-native 的内容，web 开发并不需要</p>\n<p>react-router 最主要的时给我们提供一些组件：</p>\n<ul>\n<li>BrowserRouter 或 HashRouter<ul>\n<li>Router 中包含了对路径改变的监听，并且会将相应的路径传递给子组件</li>\n<li>BrowserRouter 使用 history 模式</li>\n<li>HashRouter 使用 hash 模式</li>\n</ul>\n</li>\n<li>Routes：包裹所有的 Route，在其中匹配一个路由<ul>\n<li>Router5.x 使用的是 Switch 组件</li>\n</ul>\n</li>\n<li>Route：Route 用于匹配的路径<ul>\n<li>path 属性：用于设置匹配到的路径</li>\n<li>element 属性：设置匹配到路径后，渲染的组件<ul>\n<li>Router5.x 使用的是 component 属性</li>\n</ul>\n</li>\n<li>exact：精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件<ul>\n<li>Router6.x 不再支持该属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Link 和 NavLink：<ul>\n<li>通常路径的跳转是使用 Link 组件，最终会被渲染成 a 元素</li>\n<li>NavLink 是 Link 基础之上增加了一些样式属性</li>\n<li>to 属性：Link 中最重要的属性，用于设置跳转到的路径</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Link-基本使用\"><a href=\"#Link-基本使用\" class=\"headerlink\" title=\"Link 基本使用\"></a>Link 基本使用</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NavLink-基本使用\"><a href=\"#NavLink-基本使用\" class=\"headerlink\" title=\"NavLink 基本使用\"></a>NavLink 基本使用</h4><ul>\n<li>style: 传入一个函数，函数接受一个对象，包含 isActive 属性</li>\n<li>className： 传入函数，函数接受一个对象，包括 isActive 属性</li>\n<li>默认的 activeClassName：<ul>\n<li>事实上再默认匹配成功时，NavLink 就会添加上一个动他的 active class，可以直接使用该 class</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* Link 当标签激活时不会添加 class */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* NavLink 再标签激活时会添加 active class */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 通过修改 className 改变激活时绑定的 class 属性 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;(&#123;isActive&#125;)</span> =&gt;</span> isActive ? &#x27;link-active&#x27; : &#x27;&#x27;&#125;&gt;Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* &#123;isActive: true, isPending: false, isTransitioning: false&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;(&#123;isActive&#125;)</span> =&gt;</span> (&#123;color: isActive ? &#x27;red&#x27; : &#x27;&#x27;&#125;)&#125;&gt;Profile<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Navigate-导航\"><a href=\"#Navigate-导航\" class=\"headerlink\" title=\"Navigate 导航\"></a>Navigate 导航</h4><p>Navigate 用于路由的重定向，当这个组件出现时，就会执行跳转到对应的 to 路径中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRecommand</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRanking</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRanking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRecommand</span>/&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRanking</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>Home.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Link</span>, <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span>&gt;</span>Recommand<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span>&gt;</span>Ranking<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 设置占位符，渲染到此处 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Outlet</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Home</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useNavigator\"><a href=\"#useNavigator\" class=\"headerlink\" title=\"useNavigator\"></a>useNavigator</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span>, useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRecommand</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRanking</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRanking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用必须再顶层使用，不能在函数中使用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> navigator = <span class=\"title function_\">useNavigate</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> navigator(&#x27;/home&#x27;)&#125;&gt;Home Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> navigator(&#x27;/profile&#x27;)&#125;&gt;Profile Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRecommand</span>/&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRanking</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>对 navigator 进行包装，使其可以在类组件中使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useLocation, useNavigate, useParams, useSearchParams &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">withRouter</span>(<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> navigator = <span class=\"title function_\">useNavigate</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 当通过动态路由传递参数时，使用 params 对象获取</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"title function_\">useParams</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 查询字符串的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = <span class=\"title function_\">useLocation</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [searchParams] = <span class=\"title function_\">useSearchParams</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = &#123;navigator, params, location, searchParams&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">router</span>=<span class=\"string\">&#123;router&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter</span><br></pre></td></tr></table></figure>\n\n<p>获取传递的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hoc/withRouter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params, location, searchParams &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">router</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(location, location.<span class=\"property\">search</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>), searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;age&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Profile: &#123;params.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">Profile</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"router-文件编写\"><a href=\"#router-文件编写\" class=\"headerlink\" title=\"router 文件编写\"></a>router 文件编写</h4><p>当使用配置去设置 router 时，需要使用 useRoutes hook，并且使用懒加载方式的组件需要被 Suspense 包裹</p>\n<p>main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span>, <span class=\"title class_\">Suspense</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">HashRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 当路由设置懒加载之后，必须使用 Suspense 包裹 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Suspense</span> <span class=\"attr\">fallback</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">h3</span>&gt;</span>Loading ...<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">HashRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>router.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import HomeRecommand from &#x27;../pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import HomeRanking from &#x27;../pages/HomeRanking&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置懒加载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomeRecommand</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">lazy</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeRecommand&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomeRanking</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">lazy</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeRanking&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home/recommand&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HomeRecommand</span> /&gt;</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home/ranking&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HomeRanking</span> /&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;profile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Profile</span> /&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NotFound</span> /&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> routes</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用（组件必须是函数组件）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NavLink</span>, useRoutes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hoc/withRouter&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; navigator &#125; = props.<span class=\"property\">router</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;useRoutes(routes)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">App</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第四站\"><a href=\"#第四站\" class=\"headerlink\" title=\"第四站\"></a>第四站</h2><h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>Hook 是 React 16.8 的新增的特性，它可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性（比如生命周期）</p>\n<p>class 组件和函数式组件的对比：</p>\n<ul>\n<li>class 组件可以定义自己的 state，用来保存组件自己内部的状态<ul>\n<li>函数式组件不可以，因为函数每次调用都会产生新的临时变量</li>\n</ul>\n</li>\n<li>class 组件有自己的声明周期，我们可以在对应的生命周期中完成自己的逻辑<ul>\n<li>比如在 componentDidMount 中发送网络请求，，并且该声明周期函数只会执行一次</li>\n<li>函数式组件在学习 hooks 之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求</li>\n</ul>\n</li>\n<li>class 组件可以在状态改变时只会重新执行 render 函数以及我们希望重新调用的生命周期函数 componentDidUpdate 等<ul>\n<li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以让他们只调用一次</li>\n</ul>\n</li>\n</ul>\n<p>class 组件存在的问题：</p>\n<ul>\n<li>我们在最初编写一个 class 组件时，往往逻辑比较简单，并不会非常复杂，但是随着业务的增多，我们的 class 组件会变得越来越复杂。比u componentDidMount 中可能会包含大量的逻辑代码，包括网络请求，一些事件的监听（还需要再 componentWillUnmount 中移除）。对于这样的 class 实际上非常难拆分，因为他们的逻辑往往混在一起，强行拆分反而会照成设计过度，增加代码的复杂度</li>\n<li>再前面为了一些状态的复用，我们需要使用告诫组件</li>\n<li>redux 中的 connect 或者 react-router 中的 withRouter，这些高阶组件的设计的目的就是为了状态的复用</li>\n<li>类似于 Provider、Consumer 来共享一些状态，但是多次使用 Consumer 时，我们的代码会存在多层嵌套，这些代码让我们不管时在编写和设计上来说，都变得非常困呐</li>\n</ul>\n<p>只能在函数最外层调用 Hook，不要再循环、条件判断或者钩子函数中调用</p>\n<p>只能在 React 的函数组件中调用 Hook，不要在其他 JavaScript 函数中调用</p>\n<h4 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h4><p>useState 可以传入一个函数，该函数的返回值作为 state</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Count: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count + 1)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count - 1)&#125;&gt;Min 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Counter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><p>Effect Hook 可以用来完成一些类似于 class 声明周期的功能</p>\n<p>网络秦桧去，手动更新 DOM，一些事件的监听，都是 React 更新 DOM 的一些副作用，对于完成这些功能的 Hook 被称之为 Effect Hook</p>\n<ul>\n<li>通过使用 useEffect，可以告诉 React 需要在渲染后执行某些操作</li>\n<li>useEffect 传入的回调将会在 React 执行完成更新 DOM 操作之后，被执行</li>\n<li>默认情况下，无论是第一次渲染之后，还是每次更新之后，都会执行这个回调函数</li>\n<li>useEffect 的回调函数中可以返回一个回调函数，这个回调函数将会在useEffect 下一次回调函数执行前执行</li>\n<li>一个函数组件中可以编写多个 useEffect ，这些回调函数将会依次执行</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChangeTitle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [counter, setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前传入的回调函数会在组件被渲染完成后执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 网络请求/DOM 操作/事件监听 可以在此时</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;modify counter&#x27;</span>, counter)</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = counter</span><br><span class=\"line\">  &#125;, [counter]) <span class=\"comment\">// 当 counter 发生变化时，才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个回调类似于 componentDidMount</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;event on&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个回调类似于 componentDidUnmount</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;cancel event&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []) <span class=\"comment\">// 当组件挂载时才会执行</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Count: &#123;counter&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;Change Counter<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChangeTitle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h4><p>当 Provider 提供的数据发生变化时，使用该数据对应的组件就会重新渲染</p>\n<p>创建上下文对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">UserContext</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ThemeContext</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用 Provider</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ThemeContext</span>, <span class=\"title class_\">UserContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">fontSize:</span> &#x27;<span class=\"attr\">20px</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;username:</span> &#x27;<span class=\"attr\">zhangsan</span>&#x27;, <span class=\"attr\">age:</span> <span class=\"attr\">19</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中使用 useContext</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ThemeContext</span>, <span class=\"title class_\">UserContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseContext</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">theme.color</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.fontSize</span>&#125;&#125;&gt;</span>UseContext<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseContext</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h4><p>useReducer 仅仅是 useState 的一种替代方案</p>\n<ul>\n<li>在某些场景下，如果 state 的处理逻辑比较复杂，我们可以通过 useReducer 来对其进行拆分</li>\n<li>或者这些修改的 state 需要依赖之前的 state 时，也可以使用</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increase&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrease&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;add_user&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">users</span>: action.<span class=\"property\">payload</span> &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseReduce</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>, <span class=\"attr\">users</span>: [], <span class=\"attr\">recommands</span>: []&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseReducer: &#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;increase&#x27;&#125;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;decrease&#x27;&#125;)&#125;&gt;-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        state.users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ))</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;add_user&#x27;, payload: [&#123;id: 1, username: &#x27;zhangsan&#x27;, age: 19&#125;]&#125;)&#125;&gt;Add User<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseReduce</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h4><p>useCallback 的实际目的是为了进行性能的优化</p>\n<ul>\n<li>useCallback 会返回一个函数的 memoized （记忆的值）</li>\n<li>在依赖不变的情况下，动词定义的时候，返回的值是相同的</li>\n<li>使用 useCallback 的目的是不希望子组件进行多次渲染，而不是为了缓存函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useCallback, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;increase&#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child component update&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Child Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseCallback</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在组件每次更新时，都会生成一个新的 increase 函数，将会触发 Child 组件更新</span></span><br><span class=\"line\">  <span class=\"comment\">// function increase() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCounter(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 useCallback 将会记忆之前的 回调 函数，当 count 发生变化时，才会使用新的回调</span></span><br><span class=\"line\">  <span class=\"comment\">// const increase = useCallback(function () &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCounter(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;, [count]) // 当不指定 依赖的对象时，会产生闭包陷阱，无论执行多少次 increase 函数，count 仍然为原来的值 0，界面不会发生更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 进一步进行优化，当修改 count 时，该函数将不更新</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count) <span class=\"comment\">// 使用 useRef 将会创建一个不变对象，该对象永远指向设置的值</span></span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useCallback</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCounter</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseCallback: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setMessage(Math.random())&#125;&gt;changeMessage - &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">increase</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseCallback</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h4><p>useMemo 和 useCallback 都是对传入的东西进行缓存（类似于单例），useMemo 执行的结果是传入回调的返回值，useCallback 执行的结果是传入的回调函数</p>\n<ul>\n<li>进行大量计算操作，需要让相关函数在每次渲染后都不重新执行</li>\n<li>对于子组件传递相同对象时，使用 useMemo 进行性能优化</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useMemo, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calTotal</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;execute cal total, only be executed once&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++ i) num = num + i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = props.<span class=\"property\">user</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child component update only once&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child - &#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseMemo</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> total = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 useMemo 缓存计算的结果，该回调只会被执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">calTotal</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count)</span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"comment\">// 通过 useMemo 模仿 useCallback</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时 user 的内存地址将不会发生改变，子组件将不会重新渲染</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> (&#123;<span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span>&#125;), [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseMemo: count: &#123;count&#125; - total: &#123;total&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">user</span>=<span class=\"string\">&#123;user&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseMemo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h4><p>useRef 返回一个 ref 对象，返回的 ref 对象在组件的整个声明周期保持不变</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useCallback, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 obj 也可以解决闭包陷阱</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseRef</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> elementRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getRef</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(elementRef.<span class=\"property\">current</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通过定义全局对象可以达到和 useRef 同样的效果</span></span><br><span class=\"line\">  <span class=\"comment\">// obj.count = count</span></span><br><span class=\"line\">  <span class=\"comment\">// const increase = useCallback(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   // setCount(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCount(obj.count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;, [])</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count)</span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;elementRef&#125;</span>&gt;</span>UseRef: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;getRef&#125;</span>&gt;</span>Get Ref<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseRef</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useImperativeHandler\"><a href=\"#useImperativeHandler\" class=\"headerlink\" title=\"useImperativeHandler\"></a>useImperativeHandler</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; forwardRef, memo, useImperativeHandle, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"title function_\">forwardRef</span>(<span class=\"function\">(<span class=\"params\">props, ref</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过 useImperativeHandler 可以限制父组件对子组件的控制权限</span></span><br><span class=\"line\">  ref = <span class=\"title function_\">useImperativeHandle</span>(ref, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">focus</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseImperativeHandle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">focus</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inputRef.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseImperativeHandle<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;focus&#125;</span>&gt;</span>Focus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseImperativeHandle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h4><ul>\n<li>useEffect 会在渲染的内容更新到 DOM 上后执行，不会阻塞 DOM 的更新</li>\n<li>useLayoutEffect 会在渲染的内容更新到 DOM 上之前执行，会阻塞 DOM 的更新</li>\n</ul>\n<p>官方更推荐使用 useEffect 而不是 useLayoutEffect</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useLayoutEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseLayoutEffect</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useLayoutEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;useLayoutEffect&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;useEffect&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>UseLayoutEffect<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseLayoutEffect</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useTransition\"><a href=\"#useTransition\" class=\"headerlink\" title=\"useTransition\"></a>useTransition</h4><p>返回一个状态值表示过度任务的等待状态，以及启动一个该过度任务的函数。它告诉 react 对于某部分任务的更新优先级较低，可以稍后进行更新</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState, useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemList= <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"string\">&#x27;index&#x27;</span> + index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = <span class=\"title function_\">useState</span>(itemList)</span><br><span class=\"line\">  <span class=\"comment\">// pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [pending, setTransition] = <span class=\"title function_\">useTransition</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">valueChangeHandle</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿</span></span><br><span class=\"line\">    <span class=\"comment\">// setItems(itemList.filter(item =&gt; item.includes(e.target.value)))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setItems</span>(itemList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">includes</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;valueChangeHandle&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; pending &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>is ready to loading<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          items.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h4><p>useDeferredValue 接受一个值，并返回该值的副本，该副本将推迟到更紧急的更新之后。他和 useTransition 类似</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useDeferredValue, useState, useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemList= <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"string\">&#x27;index&#x27;</span> + index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = <span class=\"title function_\">useState</span>(itemList)</span><br><span class=\"line\">  <span class=\"comment\">// 将返回 items 的副本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deferredItems = <span class=\"title function_\">useDeferredValue</span>(items)</span><br><span class=\"line\">  <span class=\"comment\">// pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [pending, setTransition] = <span class=\"title function_\">useTransition</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">valueChangeHandle</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿</span></span><br><span class=\"line\">    <span class=\"comment\">// setItems(itemList.filter(item =&gt; item.includes(e.target.value)))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setItems</span>(itemList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">includes</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;valueChangeHandle&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; pending &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>is ready to loading<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 此时的界面渲染将会被推迟</span></span><br><span class=\"line\"><span class=\"language-xml\">          deferredItems.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"自定义-Hook\"><a href=\"#自定义-Hook\" class=\"headerlink\" title=\"自定义 Hook\"></a>自定义 Hook</h3><h4 id=\"自定义生命周期-Hook\"><a href=\"#自定义生命周期-Hook\" class=\"headerlink\" title=\"自定义生命周期 Hook\"></a>自定义生命周期 Hook</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 输出顺序：</span></span><br><span class=\"line\"><span class=\"comment\"> child componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\"> father componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\"> child componetWillUnmount （点击 toggle 按钮后）</span></span><br><span class=\"line\"><span class=\"comment\"> child componentDidMount （再次点击 toggle 按钮后）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">lifeStyle</span> = (<span class=\"params\">cname</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cname, <span class=\"string\">&#x27;componentDidMount&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cname, <span class=\"string\">&#x27;componetWillUnmount&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">lifeStyle</span>(<span class=\"string\">&#x27;child&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CustomerLifeStyle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isShow, setIsShow] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"title function_\">lifeStyle</span>(<span class=\"string\">&#x27;father&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>LifeStyle<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setIsShow(!isShow)&#125;&gt;toggle destroy<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; isShow &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">Child</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CustomerLifeStyle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义监控滚动位置-Hook\"><a href=\"#自定义监控滚动位置-Hook\" class=\"headerlink\" title=\"自定义监控滚动位置 Hook\"></a>自定义监控滚动位置 Hook</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useScroll</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollX, setScrollX] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollY, setScrollY] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setScrollX</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">scrollX</span>)</span><br><span class=\"line\">      <span class=\"title function_\">setScrollY</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">scrollY</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [scrollX, scrollY]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CustomerScroll</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollX, scrollY] = <span class=\"title function_\">useScroll</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;height:</span> &#x27;<span class=\"attr\">50vh</span>&#x27;, <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">150vh</span>&#x27;&#125;&#125;&gt;</span>CustomerScroll - [&#123;scrollX&#125;] - [&#123;scrollY&#125;]<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CustomerScroll</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redux-中的-Hook\"><a href=\"#Redux-中的-Hook\" class=\"headerlink\" title=\"Redux 中的 Hook\"></a>Redux 中的 Hook</h3><p>useSelector 用于获取当前的 state</p>\n<p>useDispatch 用于分发事件</p>\n<p>定义 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> counterReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">counter</span>: counterReducer</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>定义 reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counterSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;counter&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addCount</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span> += action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">minCount</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span> -= action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; addCount, minCount &#125; = counterSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> counterSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect, useDispatch, useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, minCount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, addCounter, minCounter &#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 redux 钩子函数引入</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> addCounter(1)&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> minCounter(1)&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>New App<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(minCount(1))&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之前引入 redux 方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">count</span>: state.<span class=\"property\">counter</span>.<span class=\"property\">count</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">addCounter</span>: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addCount</span>(num)),</span><br><span class=\"line\">  <span class=\"attr\">minCounter</span>: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">minCount</span>(num))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">App</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当使用 useSelector 获取状态时，当改变状态时，所有使用到 useSelector 的组件都会重新渲染，使用 shallowEqual 进行浅层比较</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowEqual, useDispatch, useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, minCount, changeMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Home</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Home render&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 此时，父组件更改 state ，该组件将会被重新渲染</span></span><br><span class=\"line\">  <span class=\"comment\">// const &#123; message &#125; = useSelector((state) =&gt; state.counter)</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 shallowEqual 父组件更改的内容子组件没有使用，子组件将不会重新渲染</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">counter</span>.<span class=\"property\">message</span>, shallowEqual)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home: &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(changeMessage(&#x27;home&#x27;))&#125;&gt;Change Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 redux 钩子函数引入</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(minCount(1))&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h3><h4 id=\"useId\"><a href=\"#useId\" class=\"headerlink\" title=\"useId\"></a>useId</h4><p>useId 是一个用于生成横跨服务器端和客户端的稳定的唯一 ID 的同时避免 hydration 不匹配的 Hook</p>\n<ul>\n<li>useId 是用于 react 的同构应用开发的，前端的 SPA 页面并不需要使用</li>\n<li>useId 可以保证应用程序在客户端和服务端生成唯一的 ID，这样可以有效的避免通过一些手段生成的 id 不一致，造成 hydration mismatch</li>\n</ul>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>由于使用 create-react-app 命令创建项目时，所有关于 webpack 的配置都被隐藏可以通过如下方式进行项目的配置</p>\n<ol>\n<li>使用 eject 命令导出（不可逆）<code>npm run eject</code> </li>\n<li>使用 craco <code>npm install @craco/craco@alpha -D</code> （推荐）</li>\n</ol>\n<p>create-react-app config</p>\n<p>craco 进行对项目进行配置 <a href=\"https://craco.js.org/docs/configuration/devserver/\">详细配置信息</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27;@components&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/components&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27;@utils&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/utils&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">configure</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.scss&#x27;</span>, <span class=\"string\">&#x27;.less&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并需要在 package.json 文件中使用 craco 命令启动项目</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;craco start&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;crac0 build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;craco test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eject&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;react-scripts eject&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"React-学习\"><a href=\"#React-学习\" class=\"headerlink\" title=\"React 学习\"></a>React 学习</h1><h2 id=\"第一站\"><a href=\"#第一站\" class=\"headerlink\" title=\"第一站\"></a>第一站</h2><p>一个简单的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">crossorigin</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">crossorigin</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 添加对 jsx 语法的支持 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> app = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&#x27;Hello World&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      text = <span class=\"string\">&#x27;Hello React&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">render</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      app.<span class=\"title function_\">render</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeText&#125;</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      )</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">render</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用类的方式创建组件\"><a href=\"#使用类的方式创建组件\" class=\"headerlink\" title=\"使用类的方式创建组件\"></a>使用类的方式创建组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world!&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after component mount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after component update&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before component unmount&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123;count: count + 1&#125;)&#125;&gt;Add One<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类组件的声明周期\"><a href=\"#类组件的声明周期\" class=\"headerlink\" title=\"类组件的声明周期\"></a>类组件的声明周期</h4><ul>\n<li>construct：在组件被实例化的时候执行<ul>\n<li>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数</li>\n<li>通过给 this.state 赋值对象来初始化内部的 state</li>\n<li>为事件绑定实例（this）</li>\n</ul>\n</li>\n<li>render：组件实例化或更新界面中的变量都会被重新执行</li>\n<li>componentDidMount：组件被挂载后会执行<ul>\n<li>依赖于 DOM 的操作可以在这里进行</li>\n<li>在此处发送网络请求就是最好的地方</li>\n<li>可以在此处添加一些订阅（会在 componentWillUnmount 取消订阅）</li>\n</ul>\n</li>\n<li>componentDidUpdate：组件被更新后会执行（render 先于此函数执行）<ul>\n<li>当组件更新后，可以在此处对 DOM 进行操作</li>\n<li>如果对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）</li>\n</ul>\n</li>\n<li>componentWillUnmount：组件被销毁前执行<ul>\n<li>在此方法中执行必要的清理操作，例如：清除 timer，取消网络请求或清除在 componentDidMount 中创建的订阅等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h4><p>Father component</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; count &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Father<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">data</span>=<span class=\"string\">&#123;[</span>&#x27;<span class=\"attr\">father</span> <span class=\"attr\">transfer</span> <span class=\"attr\">data1</span>&#x27;, &#x27;<span class=\"attr\">father</span> <span class=\"attr\">transfer</span> <span class=\"attr\">data2</span>&#x27;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">               <span class=\"attr\">title</span>=<span class=\"string\">&#123;123&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">               <span class=\"attr\">changeNumber</span>=<span class=\"string\">&#123;(num)</span> =&gt;</span> this.setState(&#123;count: count + num&#125;)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Child component</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过这种方式设置默认值，此设置将会覆盖外部设置的所有默认值</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">innerDefaultValue</span>: <span class=\"string\">&#x27;inner default value&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addNumber</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">changeNumber</span>(num)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;data, title, defaultValue, innerDefaultValue&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;defaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;innerDefaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addNumber(1)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addNumber(-1)&#125;&gt;Dec 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            data?.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未传入属性进行限制</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">changeNumber</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值</span></span><br><span class=\"line\"><span class=\"comment\">// Child.defaultProps = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   defaultValue: &#x27;default&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用函数式定义组件\"><a href=\"#使用函数式定义组件\" class=\"headerlink\" title=\"使用函数式定义组件\"></a>使用函数式定义组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1. 函数组件没有声明周期</span></span><br><span class=\"line\"><span class=\"comment\">  2. this 关键字不能指向组件实例（因为没有组件实例）</span></span><br><span class=\"line\"><span class=\"comment\">  3. 没有内部状态</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">About</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对参数进行校验\"><a href=\"#对参数进行校验\" class=\"headerlink\" title=\"对参数进行校验\"></a>对参数进行校验</h3><p>对于传递给子组件的数据，有时候我们可能希望进行验证</p>\n<ul>\n<li>项目中默认继承了 Flow 或者 TypeScript，那么直接就可以进行类型验证</li>\n<li>但是，即使我们没有使用 Flow 或者 TypeScript，也可以通过 prop-types 库来进行参数验证</li>\n</ul>\n<p>安装 prop-types 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install prop-types -D</span><br></pre></td></tr></table></figure>\n\n<p>在组件传值进行类型限制</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;data, title, defaultValue&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;defaultValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            data?.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未传入属性进行限制</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">defaultProps</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaultValue</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>在插槽组件中拿到 this.props 的 children 属性，该属性包含了父组件在使用该组件传递的元素</p>\n<p>插槽组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收参数一</span></span><br><span class=\"line\">    <span class=\"comment\">// const &#123;children&#125; = this.props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return (</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;div className=&#x27;nav-bar&#x27;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;left&#x27;&gt;&#123;children[0]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;center&#x27;&gt;&#123;children[1]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;div className=&#x27;right&#x27;&gt;&#123;children[2]&#125;&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收参数二</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;leftSlot, centerSlot, rightSlot&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>&#123;leftSlot(&#x27;left&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>&#123;centerSlot&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>&#123;rightSlot&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NavBar</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../NavBar&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传递方式一</span></span><br><span class=\"line\">    <span class=\"comment\">// return (</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;h1&gt;Hello world&lt;/h1&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;NavBar&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &#123;/* 当只传递一个元素时，子元素接收到 children 不为数组，只为该元素 */&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;button&gt;left button&lt;/button&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;input type=&quot;text&quot; /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;i&gt;三&lt;/i&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &lt;/NavBar&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递方式二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 通过使用函数的方式达到作用域插槽的效果 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavBar</span> <span class=\"attr\">leftSlot</span>=<span class=\"string\">&#123;text</span> =&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                centerSlot=&#123;<span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                rightSlot=&#123;<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"跨组件通信\"><a href=\"#跨组件通信\" class=\"headerlink\" title=\"跨组件通信\"></a>跨组件通信</h3><ol>\n<li><p>定义上下文对象</p>\n<p>主题上下文对象</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认值，当需要使用该上下文的组件并没有被 Provider 包裹时，将会显示该值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title function_\">createContext</span>(&#123;<span class=\"attr\">color</span>: <span class=\"string\">&#x27;#999&#x27;</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#eee&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ThemeContext</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t用户上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserContext</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在需要传递数据的组件中使用该上下文并传递数据</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/UserContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Father&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 将需要使用到该上下文的元素使用 Provider 包裹，并传入 value */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;username:</span> &#x27;<span class=\"attr\">zhangsan</span>&#x27;, <span class=\"attr\">age:</span> <span class=\"attr\">18</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">9900aa</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Father</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要引用该值的组件中导入该上下文对象，并设置该子组件的 contextTypes 属性为该上下文对象</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../context/UserContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取该上下文对象的所有值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;color, backgroundColor&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">color</span>, <span class=\"attr\">backgroundColor:</span> <span class=\"attr\">backgroundColor</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UserContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            user =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>username: &#123;user.username&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>age: &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置该组件的 contextType 为上下文对象</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\">contextType</span> = <span class=\"title class_\">ThemeContext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n<p>在函数式组件中使用该上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../context/ThemeContext&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ChildMain</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">value.color</span>, <span class=\"attr\">backgroundColor:</span> <span class=\"attr\">value.backgroundColor</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              child main</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildMain</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h3><p>事件总线类的定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventBus</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  eventList = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 触发事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">...any</span>&#125; args </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">emit</span>(<span class=\"params\">eventName, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;No such event emit&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> funs = <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> fun <span class=\"keyword\">of</span> funs) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fun</span>(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 监听事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; callback </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; that </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"params\">eventName, callback, that</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">get</span>(eventName).<span class=\"title function_\">add</span>(callback.<span class=\"title function_\">bind</span>(that))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">set</span>(eventName, <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([callback.<span class=\"title function_\">bind</span>(that)]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 销毁事件</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">off</span>(<span class=\"params\">eventName</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;No such event emit&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">eventList</span>.<span class=\"title function_\">delete</span>(eventName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">EventBus</span></span><br></pre></td></tr></table></figure>\n\n<p>定义一个事件总线类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">EventBus</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/eventBus&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventBus</span>()</span><br></pre></td></tr></table></figure>\n\n<p>发送事件组件使用 emit 发送事件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventBus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/events/EventBus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello Father&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Father component Mounted&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Father component Updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">changeTitle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    eventBus.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;UpdateTitle&#x27;</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span>&#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Hello Father Component&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; title &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Father Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.changeTitle()&#125;&gt;&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>监听事件组件使用 on 监听事件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Father</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@components/Father&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventBus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/events/EventBus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">appName</span>: <span class=\"string\">&#x27;App&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App component Mounted&#x27;</span>)</span><br><span class=\"line\">    eventBus.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;UpdateTitle&#x27;</span>, <span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">appName</span>: <span class=\"string\">&#x27;App Component&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; appName &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;appName&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Father</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Father</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Father component Mounted</span><br><span class=\"line\">App component Mounted</span><br><span class=\"line\">&#123;name: <span class=\"string\">&#x27;zhangsan&#x27;</span>, age: 19&#125;</span><br><span class=\"line\">Father component Updated</span><br><span class=\"line\">App component updated</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; TODO 由此可以推断出，挂载组件从内往外，更新组件从外往内</p>\n<h3 id=\"setState-函数\"><a href=\"#setState-函数\" class=\"headerlink\" title=\"setState 函数\"></a>setState 函数</h3><p>setState 为异步函数，设计为异步函数可以显著提升性能</p>\n<ul>\n<li>如果每次调用 setState 都进行一次更新，那么意味着 render 函数会被频繁调用，界面重新渲染这样效率很低</li>\n<li>最好的办法应该是获取到多个更新，之后进行批量更新</li>\n<li>如果同步更新了 state，但是还没有执行 render 函数，那么 state 和 props 不能保持同步<ul>\n<li>state 和 props 不能保持一致性，在开发过程中产生很多的问题</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过回调的方式处理更新的数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">state, props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可以编写一些对新的 state 的处理逻辑，</span></span><br><span class=\"line\">      <span class=\"comment\">// 可以获得之前的 state 和 props 对象</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, props)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setState 是一个异步函数，在这个地方将会打印修改之前的 state</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过传入回调函数，该回调函数将会在更新之后执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// componentDidUpdate 声明周期函数将会先于这个函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在 react 18 之前如下代码（setTimeout 或者 原生 dom 事件中 或者 promise 中）将会输出修改后的，也即 setState 变成同步函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 在 react 18 及之后，如下代码仍然是异步，输出也是修改前的 count</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout function&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onclick event&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将 setState 变为同步可以通过 flushSync 函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; flushSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"title function_\">flushSync</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这里将会拿到更新之后的结果</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCU（should-component-update）\"><a href=\"#SCU（should-component-update）\" class=\"headerlink\" title=\"SCU（should component update）\"></a>SCU（should component update）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; flushSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Component updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此种方式成为 SCU should component update</span></span><br><span class=\"line\">  <span class=\"comment\">// 当此函数返回 false 时不会重新渲染，当返回 true 时会重新渲染</span></span><br><span class=\"line\">  <span class=\"title function_\">shouldComponentUpdate</span>(<span class=\"params\">nextProps, nextState</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextProps, nextState, nextProps == <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, nextState.<span class=\"property\">count</span> == <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps == <span class=\"variable language_\">this</span>.<span class=\"property\">props</span> &amp;&amp; nextState.<span class=\"property\">count</span> == <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不进行重新渲染</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"title function_\">flushSync</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这里将会拿到更新之后的结果</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PureComponent-和-memo\"><a href=\"#PureComponent-和-memo\" class=\"headerlink\" title=\"PureComponent 和 memo\"></a>PureComponent 和 memo</h3><blockquote>\n<p>PureComponent 相当于使用 shouldComponentUpdate，其在该函数中进行比较 state 和 props.</p>\n<p>其比较的为浅层的，当比较的是引用类型的数据时，其内部属性发生改变，将不会调用 render 函数</p>\n<p>因此在对 state 中的属性进行修改时，应创建新对象</p>\n<p>memo 为 函数式组件的 PureComponent</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/Child&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/ChildFunction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;app updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Child</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;child message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child update&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child render&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ChildFunction</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChildFunction</span> = <span class=\"title function_\">memo</span>(<span class=\"keyword\">function</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child Function<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;props.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildFunction</span></span><br></pre></td></tr></table></figure>\n\n<p>修改对象触发 render 更新</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/Child&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@components/ChildFunction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">books</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book1&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">80</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book2&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">78</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book3&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">90</span>, <span class=\"attr\">count</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;app updated&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addBook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;book4&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">77</span>, <span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addBookCount</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books[index].<span class=\"property\">count</span> ++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count, books&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            books.map((book, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  &#123;book.name&#125;-&#123;book.price&#125;-&#123;book.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addBookCount(index)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.addBook()&#125;&gt;Add New Book<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取组件实例-ref\"><a href=\"#获取组件实例-ref\" class=\"headerlink\" title=\"获取组件实例 ref\"></a>获取组件实例 ref</h3><p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@components/Child&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildFunction</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/ChildFunction&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 推荐使用这种方式</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">node</span> = <span class=\"title function_\">createRef</span>(),</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">node2</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">functionChild</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node2</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>.<span class=\"title function_\">test</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">child</span>.<span class=\"property\">current</span>.<span class=\"property\">test</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">functionChild</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">btnClick</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.node&#125;</span>&gt;</span>Ref1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.node2 = e&#125;&gt;Ref2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.btnClick(e)&#125;&gt;button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.child&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ChildFunction</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.functionChild&#125;</span> <span class=\"attr\">message</span>=<span class=\"string\">&#x27;hello child function&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ChildFunction</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child test function execution!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Child</span></span><br></pre></td></tr></table></figure>\n\n<p>函数子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChildFunction</span> = <span class=\"title function_\">forwardRef</span>(<span class=\"keyword\">function</span> (<span class=\"params\">props, ref</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child function props&#x27;</span>, props)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child FUnction<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>child function ref<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChildFunction</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">inputChange</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 受控组件，当没有绑定 value 时为非受控组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;username&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第二站\"><a href=\"#第二站\" class=\"headerlink\" title=\"第二站\"></a>第二站</h2><h3 id=\"受控组件的表单填写\"><a href=\"#受控组件的表单填写\" class=\"headerlink\" title=\"受控组件的表单填写\"></a>受控组件的表单填写</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">hobbies</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;sing&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;sing&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;dance&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dance&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;rap&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;rap&#x27;</span>, <span class=\"attr\">isChecked</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">fruits</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">inputChange</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      [e.<span class=\"property\">target</span>.<span class=\"property\">name</span>]: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">submitForm</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">username</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">password</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">hobbies</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">hobby</span> =&gt;</span> hobby.<span class=\"property\">isChecked</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">hobby</span> =&gt;</span> hobby.<span class=\"property\">name</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">fruits</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">checkHobby</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hobbies = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">hobbies</span>]</span><br><span class=\"line\">    hobbies[index].<span class=\"property\">isChecked</span> = !hobbies[index].<span class=\"property\">isChecked</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">hobbies</span>: hobbies</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">selectFruit</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(e.<span class=\"property\">target</span>.<span class=\"property\">selectedOptions</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">fruit</span> =&gt;</span> fruit.<span class=\"property\">value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">fruits</span>: fruits</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username, password, hobbies, fruits &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.submitForm(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 受控组件，当没有绑定 value 时为非受控组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            username: </span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;username&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;username&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            password: </span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;password&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;password&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.inputChange(e)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              hobbies.map((hobby, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&#123;hobby.id&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;hobby.name&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#123;hobby.name&#125;: </span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#123;hobby.id&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;checkbox&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                          <span class=\"attr\">checked</span>=<span class=\"string\">&#123;hobby.isChecked&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> &#123;this.checkHobby(index)&#125;&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                )</span></span><br><span class=\"line\"><span class=\"language-xml\">              &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;fruits&#125;</span> <span class=\"attr\">multiple</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.selectFruit(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;apple&quot;</span>&gt;</span>Apple<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;orange&quot;</span>&gt;</span>Orange<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;banana&quot;</span>&gt;</span>Banana<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;submit&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件的表单\"><a href=\"#非受控组件的表单\" class=\"headerlink\" title=\"非受控组件的表单\"></a>非受控组件的表单</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">notControlled</span>: <span class=\"string\">&#x27;default value&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">notControlledComponent</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">submitForm</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>() <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">notControlledComponent</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; notControlled &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.submitForm(e)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&quot;not-controlled&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            not controlled component:</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;not-controlled&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.notControlledComponent&#125;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&#123;notControlled&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;submit&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h3><p>高阶组件的英文为 Higher-Order Components，简称为 HOC</p>\n<p>高阶组件的参数为组件，返回值为新组件的函数</p>\n<p>也即，高阶组件本身不是一个组件而是一个函数，这个函数的参是一个组件，返回值也是一个组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HOC</span>(<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">NewComponent</span>\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>高阶组件函数通过上下文为使用该高阶组件的组件传递上下文</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context/ThemeContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return (</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...value</span>&#125; &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          )</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父组件通过上下文对象传值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ThemeContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context/ThemeContext&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">eee</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件中的使用上下文传来的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">WithContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hoc/WithContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About: &#123;this.props.color&#125;-&#123;this.props.backgroundColor&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">WithContext</span>(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高阶函数的意义\"><a href=\"#高阶函数的意义\" class=\"headerlink\" title=\"高阶函数的意义\"></a>高阶函数的意义</h4><p>早期 React 提供组件之间一种复用方式时 mixin，目前已经不再使用</p>\n<ul>\n<li>Mixin 可能会相互依赖，相互耦合，不利于代码维护</li>\n<li>不同的 Mixin 中的方法可能会互相冲突<ul>\n<li>MIxin 非常多时，组件处理起来会比较麻烦，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性</li>\n</ul>\n</li>\n</ul>\n<p>HOC 的缺陷：</p>\n<ul>\n<li>HOC 需要在原组件上进行包裹或者嵌套，如果大量使用 HOC，将会产生非常多的嵌套，这让调试变得非常困难</li>\n<li>HOC 可以劫持 props，在不遵守约定的请胯下也可能造成冲突</li>\n</ul>\n<p>Hooks 的出现，是开创性的，它解决了很多的 React 之前存在的问题：</p>\n<ul>\n<li>this 指向问题</li>\n<li>hoc 嵌套复杂度问题</li>\n</ul>\n<h3 id=\"Poral\"><a href=\"#Poral\" class=\"headerlink\" title=\"Poral\"></a>Poral</h3><p>通过使用 createPortal 函数可以设置元素绑定到别的 dom 上</p>\n<p>自定义 modal 通过 portal 渲染到别的 dom 元素上</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPortal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Modal</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          createPortal(this.props.children, document.querySelector(&#x27;#app&#x27;))</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Modal</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPortal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Modal</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Modal&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 绑定到 app dom 上</span></span><br><span class=\"line\"><span class=\"language-xml\">          createPortal(<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>App Portal<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>, document.querySelector(&#x27;#app&#x27;))</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Modal Portal Children 1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Modal Portal Children 2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h3><p>由于 react 最外层必须为一个标签，导致页面渲染之后多使用一个div，可以通过 Fragment 组件，此时界面将不会多渲染一个标签</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">list</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;list&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// &lt;Fragment&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h1&gt;App&lt;/h1&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h2&gt;App 2&lt;/h2&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;/Fragment&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 语法糖写法</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h1&gt;App&lt;/h1&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//   &lt;h2&gt;App 2&lt;/h2&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">// &lt;/&gt;</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 此时必须要写 Fragment，不能使用语法糖的格式</span></span><br><span class=\"line\"><span class=\"language-xml\">          list.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Fragment</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            )</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"StrictMode\"><a href=\"#StrictMode\" class=\"headerlink\" title=\"StrictMode\"></a>StrictMode</h3><p>StrictMode 是一个用来突出显示应用程序中潜在问题的工具</p>\n<ul>\n<li>与 Fragment 一样，StrictMode 不会渲染任何可见的 UI</li>\n<li>它为后代元素触发额外的检查和警告，严格模式下将会识别过时的方法和类并抛出警告信息<ul>\n<li>识别不安全的声明周期</li>\n<li>使用过时的 ref API</li>\n<li>检测意外的副作用<ul>\n<li>这个组件的 constructor 会被调用两次</li>\n<li>这是严格模式下故意进行的操作，让你来检查看在这里写的一些逻辑代码被调用多次时，是否会产生一些副作用</li>\n<li>在生产环境中，是不会调用两次的</li>\n</ul>\n</li>\n<li>使用废弃的 findDOMNode 方法<ul>\n<li>在之前的 React API 中，可以通过 findDOMNode 来获取 DOM，不过已经不推荐使用了</li>\n</ul>\n</li>\n<li>检测过时的 context API<ul>\n<li>早期的 Context 是通过 static 属性声明 Context 对象属性，通过 getChildContext 返回 Context 对象等方式来使用 Context 的，目前这种方式已经不推荐使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>严格模式检查仅在开发模式下运行；它们不会影响生产构建</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><p>React 通过使用动画插件 react-transition-group 实现组件的入场和离场动画，使用时需要额外的安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-transition-group --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSSTransition\"><a href=\"#CSSTransition\" class=\"headerlink\" title=\"CSSTransition\"></a>CSSTransition</h4><p>CSSTransition 是基于 Transition 组件构建的</p>\n<p>CSSTransition 执行过程中，有三个状态：appear、enter、exit</p>\n<p>他们有三种状态，需要定义对应的 CSS 样式</p>\n<ol>\n<li>第一类，开始状态：对应的类是 -appear、-enter、exit</li>\n<li>第二类：执行动画：对应的类是 -appear-active、-enter-active、-exit-active</li>\n<li>第三类：执行结束：对应的类是 -appear-done、-enter-done、-exit-done</li>\n</ol>\n<p>CSSTransition 常见对应属性</p>\n<ul>\n<li>in：触发进入或者推出状态<ul>\n<li>如果添加了 <code>unmountOnExit=&#123;true&#125;</code> ，那么该组件会在执行退出动画时移除掉</li>\n<li>当 in 为 trye 是，触发进入状态，会添加 -enter、-enter-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class、并且添加 -enter-done 的 class</li>\n<li>当 in 为 false 时，触发退出状态，会添加 -exit、-exit-active 的 class 开始执行动画，当动画执行结束后，会移除两个 class，并且添加 -enter-done 的 class</li>\n</ul>\n</li>\n<li>classNames：动画 class 的名称<ul>\n<li>决定了在编写 css 时，对应的 class 名称：比如 example-enter、example-enter-active、example-enter-done</li>\n</ul>\n</li>\n<li>timeout：类添加或移除的时间<ul>\n<li>当该值与样式中设置动画过度时间冲突时，动画执行时间为样式中所设定的，类绑定与消除为该 timeout 属性的值</li>\n</ul>\n</li>\n<li>appear：是否在初次进入添加动画（需要和 in 同时为 true）</li>\n<li>unmountOnExit：退出后卸载组件</li>\n</ul>\n<p>CSSTransition 对应的钩子函数：主要为了检测动画执行过程</p>\n<ul>\n<li>onEnter：在进入动画之前被触发</li>\n<li>onEntering：在应用进入动画时被触发</li>\n<li>onEntered：在应用进入动画结束后被触发</li>\n</ul>\n<p><em>使用 CSSTransition 在 React 中将会报错：Transition.js:292  Uncaught TypeError: l.findDOMNode is not a function， 因此需要指定该组件的 nodeRef 属性为动画元素的根节点</em> </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CSSTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActivate</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActivate &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.setState(&#123;isActivate: !isActivate&#125;)&#125;&gt;Toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">in</span>=<span class=\"string\">&#123;isActivate&#125;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;2000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;dh&#x27;</span> <span class=\"attr\">unmountOnExit</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       // <span class=\"attr\">当不添加</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">时将会报错</span>，<span class=\"attr\">因为该组件使用了</span> <span class=\"attr\">findDOMNode</span> <span class=\"attr\">方法</span>，<span class=\"attr\">该方法已经不支持</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       // <span class=\"attr\">通过设置</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">该组件将会使用</span> <span class=\"attr\">nodeRef</span> <span class=\"attr\">的值作为动画的根节点</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                       <span class=\"attr\">onEnter</span>=<span class=\"string\">&#123;e</span> =&gt;</span> console.log(&#x27;开始进入动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onEntering=&#123;e =&gt; console.log(&#x27;执行进入动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onEntered=&#123;e =&gt; console.log(&#x27;执行进入动画结束&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExit=&#123;e =&gt; console.log(&#x27;开始离开动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExiting=&#123;e =&gt; console.log(&#x27;执行离开动画&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                       onExited=&#123;e =&gt; console.log(&#x27;执行离开动画结束&#x27;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 必须存在一个根元素 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hidden element<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hidden paragraph<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>对应的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SwitchTransition\"><a href=\"#SwitchTransition\" class=\"headerlink\" title=\"SwitchTransition\"></a>SwitchTransition</h4><p>SwitchTransition 可以完成两个组件之间切换的炫酷动画</p>\n<ul>\n<li>比如我们有一个按钮需要在 on 和 off 之间切换，我们希望看到 on 先从左侧退出，off 再从右侧进入</li>\n<li>这个动画在 vue 中被称之为 vue transition modes</li>\n<li>react-transition-group 中使用 SwitchTransition 来实现该动画</li>\n</ul>\n<p>SwitchTransition 中主要有一个属性：mode，有两个值</p>\n<ul>\n<li>in-out：表示新组件先进入，旧组件再移除</li>\n<li>out-in：表示旧组件先移除，新组件再进入</li>\n</ul>\n<p>SwitchTransition 组件里面要有 CSSTransition 或者 Transition 组件，其 CSSTransition&#x2F;Transition 需要设置 key 属性，表示切换不同的状态，该属性值主要设置不一样就代表进行切换</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CSSTransition</span>, <span class=\"title class_\">SwitchTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/App-Transition&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isLogin</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isLogin &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchTransition</span> <span class=\"attr\">mode</span>=<span class=\"string\">&#x27;out-in&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                         <span class=\"attr\">key</span>=<span class=\"string\">&#123;isLogin</span> ? &#x27;<span class=\"attr\">login</span>&#x27; <span class=\"attr\">:</span> &#x27;<span class=\"attr\">logout</span>&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                         <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;1000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;dh&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.setState(&#123;isLogin: !isLogin&#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    ref=&#123;this.nodeRef&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                      &#123; isLogin ? &#x27;Login&#x27; : &#x27;Logout&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">SwitchTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>样式设置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dh-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dh-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TransitionGroup\"><a href=\"#TransitionGroup\" class=\"headerlink\" title=\"TransitionGroup\"></a>TransitionGroup</h4><p>给一组元素设置动画</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef, <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TransitionGroup</span>, <span class=\"title class_\">CSSTransition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-transition-group&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style/APP-TransitionGroup&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">books</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;bbb&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">81</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ccc&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">82</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ddd&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">83</span>&#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span> = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>.<span class=\"property\">length</span>; ++ i) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">push</span>(<span class=\"title function_\">createRef</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addNewBook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;eee&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">180</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      books</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">push</span>(<span class=\"title function_\">createRef</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">deleteBook</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> books = [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">books</span>]</span><br><span class=\"line\">    books.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; books &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeRef</span>.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; books &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TransitionGroup</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            books.map((book, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">              return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">CSSTransition</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;book.id&#125;</span> <span class=\"attr\">nodeRef</span>=<span class=\"string\">&#123;this.nodeRef[index]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                               <span class=\"attr\">timeout</span>=<span class=\"string\">&#123;1000&#125;</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&#x27;example&#x27;</span> <span class=\"attr\">unmountOnExit</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.nodeRef[index]&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;book.name&#125;-&#123;book.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.deleteBook(index)&#125;&gt;delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">CSSTransition</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              )</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">TransitionGroup</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.addNewBook()&#125;&gt;Add new book<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS 文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">100px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-exit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.example-exit-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">100px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><h4 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h4><p>style 接受一个采用小驼峰命名属性的 JavaScript 对象，并且可以引用 state 中的状态来设置相关的样式</p>\n<p>内联样式的优点：</p>\n<ol>\n<li>内联样式，样式之间不会有冲突</li>\n<li>可以动态获取当前 state 中的状态</li>\n</ol>\n<p>内联样式的缺点：</p>\n<ol>\n<li>写法上都需要使用驼峰表示</li>\n<li>某些样式没有提示</li>\n<li>大量的样式，代码混乱</li>\n<li>某些样式无法编写（比如伪类，伪元素）</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> style = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;20px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">border</span>: <span class=\"string\">&#x27;1px solid #eee&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;style&#125;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用外部-CSS-文件\"><a href=\"#引用外部-CSS-文件\" class=\"headerlink\" title=\"引用外部 CSS 文件\"></a>引用外部 CSS 文件</h4><p>该方式将会对所有文件生效，即使是子组件中引用的样式文件也将对所有文件生效</p>\n<p>父组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Home</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Home</span></span><br></pre></td></tr></table></figure>\n\n<p>样式文件（此样式将对所有文件生效）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-Modules\"><a href=\"#CSS-Modules\" class=\"headerlink\" title=\"CSS Modules\"></a>CSS Modules</h4><p>css modules 并不是 React 特有的解决方案，而是所有使用了类似于 webpack 配置的环境下都可以使用的</p>\n<ul>\n<li>如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置 webpack.config.js 中的 modules: true 等</li>\n</ul>\n<p>React 的脚手架已经内置了 css modules 的配置</p>\n<ul>\n<li>.css&#x2F;.less&#x2F;.scss 等样式文件都需要修改成 .module.css&#x2F;.module.less&#x2F;.module.scss 等</li>\n</ul>\n<p>css modules 确实解决了局部作用域的问题，但是这种方案仍存在如下的缺陷：</p>\n<ol>\n<li>引用的类名，不能使用连接符（.home-title）其中 - 在 JavaScript 不被识别</li>\n<li>所有的 className 都必须使用 {style.className} 的形式来编写</li>\n<li>不方便动态修改某些样式，仍然需要使用内联样式的方式</li>\n</ol>\n<p>配置 webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">ProvidePlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 使用 named 进行导出（即 export 方式），通过使用 import &#123;类名&#125; 导入</span></span><br><span class=\"line\">              <span class=\"attr\">namedExport</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"comment\">// 设置类的名字格式</span></span><br><span class=\"line\">              <span class=\"attr\">localIdentName</span>: <span class=\"string\">&#x27;[local]_[contenthash:6]&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该样式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;title&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(title)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;title&#125;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h4><p>CSS-in-JS 是指一种模式，其中 CSS 由 JavaScript 生成，而不是在外部中定义</p>\n<p>这个功能并不是 React 的一部分，而是由第三方库提供</p>\n<ul>\n<li>CSS-in-JS 通过 JavaScript 来为 CSS 赋予一些能力，包括 类似于 CSS 预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改状态等</li>\n<li>虽然 CSS 预处理器也具备某些能力，但是获取动态状态依然是一个不好处理的点</li>\n</ul>\n<p>目前比较理性的 CSS-in-JS 的库：</p>\n<ol>\n<li>styled-components（常用）</li>\n<li>emotion</li>\n<li>glamorous</li>\n</ol>\n<p>使用 styled-components</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install styled-components -D</span><br></pre></td></tr></table></figure>\n\n<p>定义 CSS js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以通过 attrs 函数设置样式属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AppStyleWrapper</span> = styled.<span class=\"property\">div</span>.<span class=\"title function_\">attrs</span>(<span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: props.<span class=\"property\">color</span> || <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#ff8800&#x27;</span></span><br><span class=\"line\">&#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .title &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;props =&gt; props.fontSize&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid #aaa;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &amp;:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">      background-color: <span class=\"subst\">$&#123;props =&gt; props.backgroundColor&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">      color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">AppStyleWrapper</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该样式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AppStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">AppStyleWrapper</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 传递参数，该组件将参数接收到 props 中</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AppStyleWrapper</span> <span class=\"attr\">color</span>=<span class=\"string\">&#x27;yellow&#x27;</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">&#x27;50px&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">AppStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主题和继承\"><a href=\"#主题和继承\" class=\"headerlink\" title=\"主题和继承\"></a>主题和继承</h4><p>About 组件样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AboutFatherStyleWrapper</span> = styled.<span class=\"property\">div</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .content &#123;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid #aaa;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承 AboutFatherStyleWrapper 样式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AboutStyleWrapper</span> = <span class=\"title function_\">styled</span>(<span class=\"title class_\">AboutFatherStyleWrapper</span>)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .about-title &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.theme.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: 18px;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  .content &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: <span class=\"subst\">$&#123;props =&gt; props.theme.color&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">    background-color: <span class=\"subst\">$&#123;props =&gt; props.theme.backgroundColor&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">AboutStyleWrapper</span></span><br></pre></td></tr></table></figure>\n\n<p>About 组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AboutStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AboutStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;about-title&#x27;</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;content&#x27;</span>&gt;</span>About content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">AboutStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">About</span></span><br></pre></td></tr></table></figure>\n\n<p>App 组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ThemeProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;styled-components&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AppStyleWrapper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./styles/App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">AppStyleWrapper</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 通过 ThemeProvider 向所有子组件提供主题样式</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeProvider</span> <span class=\"attr\">theme</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;#<span class=\"attr\">909090</span>&#x27;, <span class=\"attr\">backgroundColor:</span> &#x27;#<span class=\"attr\">09aaf3</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 传递参数，该组件将参数接收到 props 中 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">AppStyleWrapper</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">&#x27;50px&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">AppStyleWrapper</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ThemeProvider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"classnames-库\"><a href=\"#classnames-库\" class=\"headerlink\" title=\"classnames 库\"></a>classnames 库</h3><p>在需要动态添加样式时，使用 react 会比较繁琐</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">isDelete</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActive, isDelete &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span>`$&#123;<span class=\"attr\">isActive</span>? &#x27;<span class=\"attr\">active</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125; $&#123;<span class=\"attr\">isDelete</span> ? &#x27;<span class=\"attr\">delete</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125;`&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用 classnames 库来简化动态类的添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install classnames</span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Fragment</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> classnames <span class=\"keyword\">from</span> <span class=\"string\">&#x27;classnames&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">isDelete</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isActive, isDelete &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classnames(</span>&#x27;<span class=\"attr\">title</span>&#x27;, &#123;&#x27;<span class=\"attr\">active</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isActive</span>, &#x27;<span class=\"attr\">delete</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isDelete</span>&#125;)&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classnames([</span>&#x27;<span class=\"attr\">title</span>&#x27;, &#123;&#x27;<span class=\"attr\">active</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isActive</span>, &#x27;<span class=\"attr\">delete</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">isDelete</span>&#125;])&#125;&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第三站\"><a href=\"#第三站\" class=\"headerlink\" title=\"第三站\"></a>第三站</h2><h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>在程序设计中，若一个函数符合以下条件，那么这个函数就是纯函数</p>\n<ol>\n<li>此函数在相同的输入值时，需要产生相同的输出</li>\n<li>函数的输出和输入值以外的其他隐藏信息或状态无关</li>\n<li>该函数不能由语义上可观察的函数副作用，诸如 触发事件，使用输入输出设备，或更改输出值以外的内容等<ol>\n<li>副作用表示在执行一个函数时，除了返回数值以外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储</li>\n</ol>\n</li>\n</ol>\n<p>纯函数的优点：</p>\n<ol>\n<li>在编写纯函数的时候，只需要单纯实现自己的业务逻辑即可不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改</li>\n<li>在使用的时候，只需要确保输入的内容不会被任意篡改，并且确定的输入一定会有确定的输出</li>\n</ol>\n<h3 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h3><p>随着需要管理的状态越来越多，越来越复杂，以及要管理的状态（包括服务器返回的数据，缓存数据、用户操作产生的数据、UI的状态），需要对状态进行监管。</p>\n<p>React 是在视图层帮助我们解决了 DOM 的渲染过程，但是 State 任然留给我们自己管理</p>\n<ul>\n<li>无论是组件定义自己的 state，还是组件之间的通信通过 props 进行传递；也包括 context 进行数据之间的共享</li>\n<li>React 主要负责帮助我们管理视图，state 如何维护最终还是我们自己来决定</li>\n</ul>\n<p>Redux 就是一个帮助我们管理 state 的容器；Redux 是 JavaScript 的状态容器，提供了可预测的状态管理</p>\n<p>Redux 除了可以和 React 一起使用之外，它也可以和其他界面库一起来用（Vue）并且他很小（包括依赖在内，只有 2kb）</p>\n<ul>\n<li>Redux要求我们通过 action 来更新数据<ul>\n<li>所有数据的变化，必须通过派发（dispath）action 来更新</li>\n<li>action 是一个普通的 JavaScript 对象，用来描述这次更新 type 和 content</li>\n<li>强制使用 action 的好处是可以清晰知道数据到底发生了什么样的变化，所有数据都是可追踪、可预测的</li>\n</ul>\n</li>\n<li>state 和 action 通过 reducer 进行联系<ul>\n<li>reducer 是一个纯函数</li>\n<li>reducer 做的事情就是将传入的 state 和 action 结合起来生成一个新的 state</li>\n</ul>\n</li>\n</ul>\n<p>引入 redux 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux --save</span><br></pre></td></tr></table></figure>\n\n<p>redux 基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;createStore&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redux&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该函数将会被执行两次，第一次是刚开始创建的时候</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; state 未被修改的 state 的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; action 使用 store.dispatch 传入的 action</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回值将作为 store 之后存储的 state</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一次打印：reducer:  &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125; &#123; type: &#x27;@@redux/INIT7.d.i.y.a.5&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二次打印：reducer:  &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125; &#123; type: &#x27;update_username&#x27;, username: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;reducer: &#x27;</span>, state, action)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> == <span class=\"string\">&#x27;update_username&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">username</span>: action.<span class=\"property\">username</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>()) <span class=\"comment\">// &#123; username: &#x27;zhangsan&#x27;, age: 16 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这样修改将导致界面不会发生动态更新</span></span><br><span class=\"line\"><span class=\"comment\">// store.getState().username = &#x27;lisi&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(store.getState())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;update_username&#x27;</span>, <span class=\"attr\">username</span>: <span class=\"string\">&#x27;wangwu&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// &#123; type: &#x27;update_username&#x27;, username: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>()) <span class=\"comment\">// &#123; username: &#x27;wangwu&#x27;, age: 16 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过订阅模式进行事件监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createStore &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redux&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;article1&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;article2&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;lisi&#x27;</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;public article&#x27;</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> [...state, action.<span class=\"property\">article</span>]</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;delete article&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = [...state]</span><br><span class=\"line\">      res.<span class=\"title function_\">splice</span>(action.<span class=\"property\">start</span>, action.<span class=\"property\">count</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"><span class=\"keyword\">const</span> unsubscribe = store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;store subscribe: &#x27;</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">publicAction</span> = (<span class=\"params\">article</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;public article&#x27;</span>,</span><br><span class=\"line\">  article</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deleteAction</span> = (<span class=\"params\">start, count</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;delete article&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">start</span>: start,</span><br><span class=\"line\">  <span class=\"attr\">count</span>: count</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">store subscribe:  [</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article1&#x27;, author: &#x27;zhangsan&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article2&#x27;, author: &#x27;lisi&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;a1&#x27;, author: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">publicAction</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;wangwu&#x27;</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">store subscribe:  [</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;article1&#x27;, author: &#x27;zhangsan&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;a1&#x27;, author: &#x27;wangwu&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">deleteAction</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\"><span class=\"comment\">// 下面将不会触发订阅事件</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">publicAction</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a3&#x27;</span>, <span class=\"attr\">author</span>: <span class=\"string\">&#x27;laowang&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>对使用过程进行优化，通常将文件分为如下四个部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionCreator.js <span class=\"comment\"># 存放创建的 action 函数</span></span><br><span class=\"line\">constants.js <span class=\"comment\"># 存放常量，即 switch 中的 case</span></span><br><span class=\"line\">index.js <span class=\"comment\"># 存放 store 对象</span></span><br><span class=\"line\">reducer.js <span class=\"comment\"># 存放数据以及 reducer 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>actionCreator.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">CHANGE_AGE</span>, <span class=\"variable constant_\">CHANGE_NAME</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./constants&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">changeName</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">CHANGE_NAME</span>,</span><br><span class=\"line\">    <span class=\"attr\">username</span>: username</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">changeAge</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">CHANGE_AGE</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>constants.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">CHANGE_NAME</span> = <span class=\"string\">&#x27;CHANGE_NAME&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">CHANGE_AGE</span> = <span class=\"string\">&#x27;CHANGE_AGE&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reducer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>reducer.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">CHANGE_AGE</span>, <span class=\"variable constant_\">CHANGE_NAME</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./constants&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = data, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">CHANGE_NAME</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">username</span>: action.<span class=\"property\">username</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">CHANGE_AGE</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">age</span>: action.<span class=\"property\">age</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-三大原则\"><a href=\"#Redux-三大原则\" class=\"headerlink\" title=\"Redux 三大原则\"></a>Redux 三大原则</h4><p>单一数据源</p>\n<ul>\n<li>整个应用程序的 state 被存储在一颗 object tree 中，并且 这个 object tree 只存储在一个 store 中</li>\n<li>Redux 并没有强制让我们不能创建多个 Store，但是那样做并不利于数据的维护</li>\n<li>单一的数据源可以让整个应用程序的 state 变得方便维护、追踪、修改</li>\n</ul>\n<p>State 是只读的</p>\n<ul>\n<li>唯一修改 state 的方法一定是触发 action，不要试图在其他地方通过任何的方式修改 state</li>\n<li>这样就确保了 View 或网络请求都不能直接修改 state，他们只能通过 action 来描述自己想要如何修改 state</li>\n<li>这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心 race condition（竞态）的问题</li>\n</ul>\n<p>使用纯函数来执行修改</p>\n<ul>\n<li>通过 reducer 将 旧 state 和 actions 联系在一起，并且返回一个新的 state</li>\n<li>随着应用程序的复杂度增加，我们可以将 reducer 拆分成多个小的 reducer 分别操作不同的 state tree 的一部分</li>\n<li>但是所有的 reducer 都应该是纯函数，不能产生任何的副作用</li>\n</ul>\n<h3 id=\"在-React-中使用-Redux\"><a href=\"#在-React-中使用-Redux\" class=\"headerlink\" title=\"在 React 中使用 Redux\"></a>在 React 中使用 Redux</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/system&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, desCount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/system/actionCreators&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/About&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: store.<span class=\"title function_\">getState</span>().<span class=\"property\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: store.<span class=\"title function_\">getState</span>().<span class=\"property\">count</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;count&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> store.dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> store.dispatch(desCount(1))&#125;&gt;Des<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">About</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">About</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h4><p>在 react 中使用封装后的 redux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-redux</span><br></pre></td></tr></table></figure>\n\n<p>在根组件中使用 Provider 给后续组件设置 store</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createRoot&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在需要使用 store 组件中使用 connect 进行使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeUsername &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/actionCreator&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeUsername</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">changeUsername</span>(<span class=\"string\">&#x27;lisi&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.changeUsername()&#125;&gt;Change Username<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤不需要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: state?.<span class=\"property\">username</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: state?.<span class=\"property\">age</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">changeUsername</span>(username))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// connect 函数执行后返回一个高阶组件函数</span></span><br><span class=\"line\"><span class=\"comment\">// connect 接收两个函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当使用异步请求时，需要对 dispatch 传递一个函数作为分发的对象，此时需要对 redux 进行增强，安装 redux-thunk 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux-thunk</span><br></pre></td></tr></table></figure>\n\n<p>在 actionCreator.js 文件中编写函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">addUser</span>(<span class=\"params\">userList</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">ADD_USERS</span>,</span><br><span class=\"line\">    <span class=\"attr\">users</span>: userList</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义异步请求函数，将该函数进行返回</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">_fetch</span>(<span class=\"params\">dispatch, getState</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;http://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;<span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> userList = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addUser</span>(userList))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _fetch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中只需要调用该函数即可</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/actionCreator&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">About</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">fetchData</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; users &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            users?.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.id&#125; - &#123;user.userId&#125; - &#123;user.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            ))</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过滤不需要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: state?.<span class=\"property\">users</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// connect 函数执行后返回一个高阶组件函数</span></span><br><span class=\"line\"><span class=\"comment\">// connect 接收两个函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">About</span>)</span><br></pre></td></tr></table></figure>\n\n<p>redux dev tools 开启</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-拆分\"><a href=\"#Redux-拆分\" class=\"headerlink\" title=\"Redux 拆分\"></a>Redux 拆分</h4><p>通过创建独立的文件夹区分不同的 redux，在 index.js 中合并不同的  reducer </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose, combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> homeReducer <span class=\"keyword\">from</span> <span class=\"string\">&quot;../home/reducer&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> profileReducer <span class=\"keyword\">from</span> <span class=\"string\">&quot;../profile/reducer&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"title function_\">combineReducers</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">home</span>: homeReducer,</span><br><span class=\"line\">  <span class=\"attr\">profile</span>: profileReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>combineReducers 函数的实现类似于下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span> (<span class=\"params\">state = &#123;&#125;, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始时，传入 reducer 的参数为：state: undefined action: &#123;type: &#x27;@@INIT&#x27;&#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">home</span>: <span class=\"title function_\">homeReducer</span>(state.<span class=\"property\">home</span>, action),</span><br><span class=\"line\">    <span class=\"attr\">profile</span>: <span class=\"title function_\">profileReducer</span>(state.<span class=\"property\">profile</span>, action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-插件\"><a href=\"#Redux-插件\" class=\"headerlink\" title=\"Redux 插件\"></a>Redux 插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; legacy_createStore <span class=\"keyword\">as</span> createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; thunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 trace 设置开启调用栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"variable language_\">window</span>.<span class=\"title function_\">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class=\"attr\">trace</span>: <span class=\"literal\">true</span>&#125;) || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启对 redux 扩展的支持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, <span class=\"title function_\">composeEnhancers</span>(<span class=\"title function_\">applyMiddleware</span>(thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录日志，通过对 dispatch 进行拦截</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">store</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = store.<span class=\"property\">dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">recordLog</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before action execute&#x27;</span>, action)</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store.<span class=\"property\">dispatch</span> = recordLog</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">log</span>(store)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-Toolkit\"><a href=\"#Redux-Toolkit\" class=\"headerlink\" title=\"Redux Toolkit\"></a>Redux Toolkit</h4><p>redux toolkit 是官方推荐编写 redux 逻辑的方法，该工具能解决使用 redux 编写时逻辑过于繁琐，代码量过多且不利于管理等问题</p>\n<p>redux toolkit 的核心 API 主要包含如下：</p>\n<ul>\n<li>configureStore：包装 createStore 以提供简化的配置选项和良好的默认值，它可以自动组合你的 slice reducer，添加你提供的任何 redux 中间件，redux-thunk 默认包含，并启用 redux devtool extension</li>\n<li>createSlice：接受 reducer 函数的对象，切片名称和初始状态值，并自动生成切片 reducer，并带有相应的 actions</li>\n<li>createAsyncThunk：接受一个动作类型字符串和一个返回 Promise 的函数，并生成一个 pending&#x2F;fulfilled&#x2F;rejected 基于该 Promise分派动作类型的 thunk</li>\n</ul>\n<p>安装 redux-toolkit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>\n\n<p>创建 store&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> profileReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./features/profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">profile</span>: profileReducer</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的 reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> profileSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;profile&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// action: &#123;type: &#x27;profile/changeUsername&#x27;, payload: &#x27;lisi&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action)</span><br><span class=\"line\">      state.<span class=\"property\">username</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">changeAge</span>(<span class=\"params\">state, aciton</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, aciton)</span><br><span class=\"line\">      state.<span class=\"property\">age</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; changeUsername, changeAge &#125; = profileSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> profileSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeUsername, changeAge &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/features/profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username, age &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;username&#125; - &#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.props.changeUsername(&#x27;lisi&#x27;)&#125;&gt;Change Username<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: state.<span class=\"property\">profile</span>.<span class=\"property\">username</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: state.<span class=\"property\">profile</span>.<span class=\"property\">age</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">changeUsername</span>(<span class=\"params\">username</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">changeUsername</span>(username))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Profile</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 Redux Toolkit 中使用异步函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice, createAsyncThunk &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"title function_\">createAsyncThunk</span>(<span class=\"string\">&#x27;fetch/home&#x27;</span>, <span class=\"title function_\">async</span> (extractInfo, store) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;http://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;<span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过如下方式直接在这个里面添加数据</span></span><br><span class=\"line\">  store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addUser</span>(data))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> homeSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addUser</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">users</span> = action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 这种方式现已不支持</span></span><br><span class=\"line\">  <span class=\"comment\">// extraReducers: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.pending](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;ready to fetch data&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.fulfilled](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;have got data&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   [fetchData.rejected](state, action) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log(state, action, &#x27;get data error&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// 支持的写法</span></span><br><span class=\"line\">  <span class=\"attr\">extraReducers</span>: <span class=\"function\">(<span class=\"params\">builder</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    builder.<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">pending</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;ready to fetch data&#x27;</span>)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">fulfilled</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;have got data&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// state.users = action.payload</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">addCase</span>(fetchData.<span class=\"property\">rejected</span>, <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, action, <span class=\"string\">&#x27;get data error&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; addUser &#125; = homeSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> homeSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store/features/home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">fetchHomeData</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; users &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            ))</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">users</span>: state.<span class=\"property\">home</span>.<span class=\"property\">users</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"title function_\">fetchHomeData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>(&#123;<span class=\"attr\">path</span>: <span class=\"string\">&#x27;123&#x27;</span>&#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Home</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redux-Toolkit-的数据不可变性\"><a href=\"#Redux-Toolkit-的数据不可变性\" class=\"headerlink\" title=\"Redux Toolkit 的数据不可变性\"></a>Redux Toolkit 的数据不可变性</h4><p>Redux Toolkit 底层使用了 immerjs 的一个库来保证数据的不可变性</p>\n<p>为了节约内存，又出现了一个新的算法：Persistent Data Structure （持久化数据结构或一致性数据结构）</p>\n<ul>\n<li>用一种数据结构来保存数据</li>\n<li>当数据被修改时，会返回一个对象，但是新的对象会尽可能利用之前的数据结构而不会对内存造成浪费</li>\n</ul>\n<h4 id=\"connect-函数的实现\"><a href=\"#connect-函数的实现\" class=\"headerlink\" title=\"connect 函数的实现\"></a>connect 函数的实现</h4><p>connect 函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../store&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">StoreContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./StoreContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * realize a connect function</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; mapStateToProps </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; mapDispatchToProps </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> high component function</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connect</span>(<span class=\"params\">mapStateToProps, mapDispatchToProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">Component</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">NewComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">constructor</span>(<span class=\"params\">props, context</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"title function_\">mapStateToProps</span>(context.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"title function_\">mapStateToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">getState</span>()))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// state dispatch</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> states = <span class=\"title function_\">mapStateToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dispatchs = <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...this.props</span>&#125; &#123;<span class=\"attr\">...states</span>&#125; &#123;<span class=\"attr\">...dispatchs</span>&#125;/&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">NewComponent</span>.<span class=\"property\">contextType</span> = <span class=\"title class_\">StoreContext</span></span><br><span class=\"line\">    <span class=\"comment\">// return newComponent</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">NewComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>StoreContext</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">StoreContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">StoreContext</span></span><br></pre></td></tr></table></figure>\n\n<p>main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">StoreContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hoc/StoreContext&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;/* 必须要加上 Provider */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">StoreContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">StoreContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"React-中-state-管理\"><a href=\"#React-中-state-管理\" class=\"headerlink\" title=\"React 中 state 管理\"></a>React 中 state 管理</h4><p>react 中管理状态可以通过：1. 组件中自己的state、2. Context 数据的共享状态、3. Redux 管理应用状态</p>\n<ul>\n<li>UI 相关的组件内部可以维护的状态，在组件内部自己来维护</li>\n<li>大部分需要共享的状态，都交给 redux 来管理和维护</li>\n<li>从服务器请求的数据（包括请求的操作），交给 redux 来维护</li>\n</ul>\n<h3 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h3><p>安装相关依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-router-dom</span><br></pre></td></tr></table></figure>\n\n<p>react-router 会包含一些 react-native 的内容，web 开发并不需要</p>\n<p>react-router 最主要的时给我们提供一些组件：</p>\n<ul>\n<li>BrowserRouter 或 HashRouter<ul>\n<li>Router 中包含了对路径改变的监听，并且会将相应的路径传递给子组件</li>\n<li>BrowserRouter 使用 history 模式</li>\n<li>HashRouter 使用 hash 模式</li>\n</ul>\n</li>\n<li>Routes：包裹所有的 Route，在其中匹配一个路由<ul>\n<li>Router5.x 使用的是 Switch 组件</li>\n</ul>\n</li>\n<li>Route：Route 用于匹配的路径<ul>\n<li>path 属性：用于设置匹配到的路径</li>\n<li>element 属性：设置匹配到路径后，渲染的组件<ul>\n<li>Router5.x 使用的是 component 属性</li>\n</ul>\n</li>\n<li>exact：精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件<ul>\n<li>Router6.x 不再支持该属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Link 和 NavLink：<ul>\n<li>通常路径的跳转是使用 Link 组件，最终会被渲染成 a 元素</li>\n<li>NavLink 是 Link 基础之上增加了一些样式属性</li>\n<li>to 属性：Link 中最重要的属性，用于设置跳转到的路径</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Link-基本使用\"><a href=\"#Link-基本使用\" class=\"headerlink\" title=\"Link 基本使用\"></a>Link 基本使用</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NavLink-基本使用\"><a href=\"#NavLink-基本使用\" class=\"headerlink\" title=\"NavLink 基本使用\"></a>NavLink 基本使用</h4><ul>\n<li>style: 传入一个函数，函数接受一个对象，包含 isActive 属性</li>\n<li>className： 传入函数，函数接受一个对象，包括 isActive 属性</li>\n<li>默认的 activeClassName：<ul>\n<li>事实上再默认匹配成功时，NavLink 就会添加上一个动他的 active class，可以直接使用该 class</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* Link 当标签激活时不会添加 class */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* NavLink 再标签激活时会添加 active class */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 通过修改 className 改变激活时绑定的 class 属性 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;(&#123;isActive&#125;)</span> =&gt;</span> isActive ? &#x27;link-active&#x27; : &#x27;&#x27;&#125;&gt;Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span> */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* &#123;isActive: true, isPending: false, isTransitioning: false&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;(&#123;isActive&#125;)</span> =&gt;</span> (&#123;color: isActive ? &#x27;red&#x27; : &#x27;&#x27;&#125;)&#125;&gt;Profile<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Navigate-导航\"><a href=\"#Navigate-导航\" class=\"headerlink\" title=\"Navigate 导航\"></a>Navigate 导航</h4><p>Navigate 用于路由的重定向，当这个组件出现时，就会执行跳转到对应的 to 路径中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRecommand</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRanking</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRanking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/profile&#x27;</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRecommand</span>/&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRanking</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>Home.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Link</span>, <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span>&gt;</span>Recommand<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span>&gt;</span>Ranking<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 设置占位符，渲染到此处 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Outlet</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Home</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useNavigator\"><a href=\"#useNavigator\" class=\"headerlink\" title=\"useNavigator\"></a>useNavigator</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">Route</span>, <span class=\"title class_\">Link</span>, <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Navigate</span>, useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRecommand</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HomeRanking</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./pages/HomeRanking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用必须再顶层使用，不能在函数中使用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> navigator = <span class=\"title function_\">useNavigate</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> navigator(&#x27;/home&#x27;)&#125;&gt;Home Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> navigator(&#x27;/profile&#x27;)&#125;&gt;Profile Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;/* 设置路由自动跳转 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/recommand&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRecommand</span>/&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/home/ranking&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">HomeRanking</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/profile&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;*&#x27;</span> <span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">NotFound</span> /&gt;</span>&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p>对 navigator 进行包装，使其可以在类组件中使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useLocation, useNavigate, useParams, useSearchParams &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">withRouter</span>(<span class=\"params\">Component</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> navigator = <span class=\"title function_\">useNavigate</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 当通过动态路由传递参数时，使用 params 对象获取</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"title function_\">useParams</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 查询字符串的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = <span class=\"title function_\">useLocation</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [searchParams] = <span class=\"title function_\">useSearchParams</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = &#123;navigator, params, location, searchParams&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">router</span>=<span class=\"string\">&#123;router&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter</span><br></pre></td></tr></table></figure>\n\n<p>获取传递的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hoc/withRouter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params, location, searchParams &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">router</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(location, location.<span class=\"property\">search</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>), searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;age&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Profile: &#123;params.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">Profile</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"router-文件编写\"><a href=\"#router-文件编写\" class=\"headerlink\" title=\"router 文件编写\"></a>router 文件编写</h4><p>当使用配置去设置 router 时，需要使用 useRoutes hook，并且使用懒加载方式的组件需要被 Suspense 包裹</p>\n<p>main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StrictMode</span>, <span class=\"title class_\">Suspense</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">HashRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 当路由设置懒加载之后，必须使用 Suspense 包裹 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Suspense</span> <span class=\"attr\">fallback</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">h3</span>&gt;</span>Loading ...<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">HashRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>router.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Profile</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/Profile&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NotFound</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/NotFound&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import HomeRecommand from &#x27;../pages/HomeRecommand&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import HomeRanking from &#x27;../pages/HomeRanking&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置懒加载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomeRecommand</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">lazy</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeRecommand&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomeRanking</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">lazy</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeRanking&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>/&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home/recommand&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HomeRecommand</span> /&gt;</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home/ranking&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HomeRanking</span> /&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;profile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Profile</span> /&gt;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NotFound</span> /&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> routes</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用（组件必须是函数组件）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NavLink</span>, useRoutes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">BaseStyle</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./style/base&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hoc/withRouter&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; navigator &#125; = props.<span class=\"property\">router</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;useRoutes(routes)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Footer</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BaseStyle</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">App</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第四站\"><a href=\"#第四站\" class=\"headerlink\" title=\"第四站\"></a>第四站</h2><h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>Hook 是 React 16.8 的新增的特性，它可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性（比如生命周期）</p>\n<p>class 组件和函数式组件的对比：</p>\n<ul>\n<li>class 组件可以定义自己的 state，用来保存组件自己内部的状态<ul>\n<li>函数式组件不可以，因为函数每次调用都会产生新的临时变量</li>\n</ul>\n</li>\n<li>class 组件有自己的声明周期，我们可以在对应的生命周期中完成自己的逻辑<ul>\n<li>比如在 componentDidMount 中发送网络请求，，并且该声明周期函数只会执行一次</li>\n<li>函数式组件在学习 hooks 之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求</li>\n</ul>\n</li>\n<li>class 组件可以在状态改变时只会重新执行 render 函数以及我们希望重新调用的生命周期函数 componentDidUpdate 等<ul>\n<li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以让他们只调用一次</li>\n</ul>\n</li>\n</ul>\n<p>class 组件存在的问题：</p>\n<ul>\n<li>我们在最初编写一个 class 组件时，往往逻辑比较简单，并不会非常复杂，但是随着业务的增多，我们的 class 组件会变得越来越复杂。比u componentDidMount 中可能会包含大量的逻辑代码，包括网络请求，一些事件的监听（还需要再 componentWillUnmount 中移除）。对于这样的 class 实际上非常难拆分，因为他们的逻辑往往混在一起，强行拆分反而会照成设计过度，增加代码的复杂度</li>\n<li>再前面为了一些状态的复用，我们需要使用告诫组件</li>\n<li>redux 中的 connect 或者 react-router 中的 withRouter，这些高阶组件的设计的目的就是为了状态的复用</li>\n<li>类似于 Provider、Consumer 来共享一些状态，但是多次使用 Consumer 时，我们的代码会存在多层嵌套，这些代码让我们不管时在编写和设计上来说，都变得非常困呐</li>\n</ul>\n<p>只能在函数最外层调用 Hook，不要再循环、条件判断或者钩子函数中调用</p>\n<p>只能在 React 的函数组件中调用 Hook，不要在其他 JavaScript 函数中调用</p>\n<h4 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h4><p>useState 可以传入一个函数，该函数的返回值作为 state</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Count: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count + 1)&#125;&gt;Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count - 1)&#125;&gt;Min 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Counter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><p>Effect Hook 可以用来完成一些类似于 class 声明周期的功能</p>\n<p>网络秦桧去，手动更新 DOM，一些事件的监听，都是 React 更新 DOM 的一些副作用，对于完成这些功能的 Hook 被称之为 Effect Hook</p>\n<ul>\n<li>通过使用 useEffect，可以告诉 React 需要在渲染后执行某些操作</li>\n<li>useEffect 传入的回调将会在 React 执行完成更新 DOM 操作之后，被执行</li>\n<li>默认情况下，无论是第一次渲染之后，还是每次更新之后，都会执行这个回调函数</li>\n<li>useEffect 的回调函数中可以返回一个回调函数，这个回调函数将会在useEffect 下一次回调函数执行前执行</li>\n<li>一个函数组件中可以编写多个 useEffect ，这些回调函数将会依次执行</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChangeTitle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [counter, setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前传入的回调函数会在组件被渲染完成后执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 网络请求/DOM 操作/事件监听 可以在此时</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;modify counter&#x27;</span>, counter)</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = counter</span><br><span class=\"line\">  &#125;, [counter]) <span class=\"comment\">// 当 counter 发生变化时，才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个回调类似于 componentDidMount</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;event on&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个回调类似于 componentDidUnmount</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;cancel event&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []) <span class=\"comment\">// 当组件挂载时才会执行</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Count: &#123;counter&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;Change Counter<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ChangeTitle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h4><p>当 Provider 提供的数据发生变化时，使用该数据对应的组件就会重新渲染</p>\n<p>创建上下文对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">UserContext</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ThemeContext</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用 Provider</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ThemeContext</span>, <span class=\"title class_\">UserContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./context&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">fontSize:</span> &#x27;<span class=\"attr\">20px</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;username:</span> &#x27;<span class=\"attr\">zhangsan</span>&#x27;, <span class=\"attr\">age:</span> <span class=\"attr\">19</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中使用 useContext</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ThemeContext</span>, <span class=\"title class_\">UserContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseContext</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">theme.color</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.fontSize</span>&#125;&#125;&gt;</span>UseContext<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseContext</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h4><p>useReducer 仅仅是 useState 的一种替代方案</p>\n<ul>\n<li>在某些场景下，如果 state 的处理逻辑比较复杂，我们可以通过 useReducer 来对其进行拆分</li>\n<li>或者这些修改的 state 需要依赖之前的 state 时，也可以使用</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increase&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrease&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;add_user&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">users</span>: action.<span class=\"property\">payload</span> &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseReduce</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>, <span class=\"attr\">users</span>: [], <span class=\"attr\">recommands</span>: []&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseReducer: &#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;increase&#x27;&#125;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;decrease&#x27;&#125;)&#125;&gt;-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        state.users.map(user =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ))</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(&#123;type: &#x27;add_user&#x27;, payload: [&#123;id: 1, username: &#x27;zhangsan&#x27;, age: 19&#125;]&#125;)&#125;&gt;Add User<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseReduce</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h4><p>useCallback 的实际目的是为了进行性能的优化</p>\n<ul>\n<li>useCallback 会返回一个函数的 memoized （记忆的值）</li>\n<li>在依赖不变的情况下，动词定义的时候，返回的值是相同的</li>\n<li>使用 useCallback 的目的是不希望子组件进行多次渲染，而不是为了缓存函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useCallback, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;increase&#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child component update&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Child Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseCallback</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在组件每次更新时，都会生成一个新的 increase 函数，将会触发 Child 组件更新</span></span><br><span class=\"line\">  <span class=\"comment\">// function increase() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCounter(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 useCallback 将会记忆之前的 回调 函数，当 count 发生变化时，才会使用新的回调</span></span><br><span class=\"line\">  <span class=\"comment\">// const increase = useCallback(function () &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCounter(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;, [count]) // 当不指定 依赖的对象时，会产生闭包陷阱，无论执行多少次 increase 函数，count 仍然为原来的值 0，界面不会发生更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 进一步进行优化，当修改 count 时，该函数将不更新</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count) <span class=\"comment\">// 使用 useRef 将会创建一个不变对象，该对象永远指向设置的值</span></span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useCallback</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCounter</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseCallback: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setMessage(Math.random())&#125;&gt;changeMessage - &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">increase</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseCallback</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h4><p>useMemo 和 useCallback 都是对传入的东西进行缓存（类似于单例），useMemo 执行的结果是传入回调的返回值，useCallback 执行的结果是传入的回调函数</p>\n<ul>\n<li>进行大量计算操作，需要让相关函数在每次渲染后都不重新执行</li>\n<li>对于子组件传递相同对象时，使用 useMemo 进行性能优化</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useMemo, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calTotal</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;execute cal total, only be executed once&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++ i) num = num + i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = props.<span class=\"property\">user</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child component update only once&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child - &#123;user.username&#125; - &#123;user.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseMemo</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> total = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 useMemo 缓存计算的结果，该回调只会被执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">calTotal</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count)</span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"comment\">// 通过 useMemo 模仿 useCallback</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时 user 的内存地址将不会发生改变，子组件将不会重新渲染</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> (&#123;<span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span>&#125;), [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseMemo: count: &#123;count&#125; - total: &#123;total&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">user</span>=<span class=\"string\">&#123;user&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseMemo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h4><p>useRef 返回一个 ref 对象，返回的 ref 对象在组件的整个声明周期保持不变</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useCallback, useRef, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 obj 也可以解决闭包陷阱</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseRef</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> elementRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getRef</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(elementRef.<span class=\"property\">current</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通过定义全局对象可以达到和 useRef 同样的效果</span></span><br><span class=\"line\">  <span class=\"comment\">// obj.count = count</span></span><br><span class=\"line\">  <span class=\"comment\">// const increase = useCallback(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   // setCount(count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">//   setCount(obj.count + 1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;, [])</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> countRef = <span class=\"title function_\">useRef</span>(count)</span><br><span class=\"line\">  countRef.<span class=\"property\">current</span> = count</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increase = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(countRef.<span class=\"property\">current</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;elementRef&#125;</span>&gt;</span>UseRef: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;getRef&#125;</span>&gt;</span>Get Ref<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increase&#125;</span>&gt;</span>Increase<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseRef</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useImperativeHandler\"><a href=\"#useImperativeHandler\" class=\"headerlink\" title=\"useImperativeHandler\"></a>useImperativeHandler</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; forwardRef, memo, useImperativeHandle, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"title function_\">forwardRef</span>(<span class=\"function\">(<span class=\"params\">props, ref</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过 useImperativeHandler 可以限制父组件对子组件的控制权限</span></span><br><span class=\"line\">  ref = <span class=\"title function_\">useImperativeHandle</span>(ref, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">focus</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseImperativeHandle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>()</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">focus</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    inputRef.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inputRef.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>UseImperativeHandle<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;focus&#125;</span>&gt;</span>Focus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseImperativeHandle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h4><ul>\n<li>useEffect 会在渲染的内容更新到 DOM 上后执行，不会阻塞 DOM 的更新</li>\n<li>useLayoutEffect 会在渲染的内容更新到 DOM 上之前执行，会阻塞 DOM 的更新</li>\n</ul>\n<p>官方更推荐使用 useEffect 而不是 useLayoutEffect</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useLayoutEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UseLayoutEffect</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useLayoutEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;useLayoutEffect&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;useEffect&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>UseLayoutEffect<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseLayoutEffect</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useTransition\"><a href=\"#useTransition\" class=\"headerlink\" title=\"useTransition\"></a>useTransition</h4><p>返回一个状态值表示过度任务的等待状态，以及启动一个该过度任务的函数。它告诉 react 对于某部分任务的更新优先级较低，可以稍后进行更新</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState, useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemList= <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"string\">&#x27;index&#x27;</span> + index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = <span class=\"title function_\">useState</span>(itemList)</span><br><span class=\"line\">  <span class=\"comment\">// pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [pending, setTransition] = <span class=\"title function_\">useTransition</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">valueChangeHandle</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿</span></span><br><span class=\"line\">    <span class=\"comment\">// setItems(itemList.filter(item =&gt; item.includes(e.target.value)))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setItems</span>(itemList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">includes</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;valueChangeHandle&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; pending &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>is ready to loading<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          items.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h4><p>useDeferredValue 接受一个值，并返回该值的副本，该副本将推迟到更紧急的更新之后。他和 useTransition 类似</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useDeferredValue, useState, useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> itemList= <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"string\">&#x27;index&#x27;</span> + index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = <span class=\"title function_\">useState</span>(itemList)</span><br><span class=\"line\">  <span class=\"comment\">// 将返回 items 的副本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deferredItems = <span class=\"title function_\">useDeferredValue</span>(items)</span><br><span class=\"line\">  <span class=\"comment\">// pending 代表当前状态，如果是在执行 setTransition 将会是 true，否则 false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [pending, setTransition] = <span class=\"title function_\">useTransition</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">valueChangeHandle</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时由于界面发生较大改动，会导致渲染过程很慢，页面会卡顿</span></span><br><span class=\"line\">    <span class=\"comment\">// setItems(itemList.filter(item =&gt; item.includes(e.target.value)))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setItems</span>(itemList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">includes</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;valueChangeHandle&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; pending &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>is ready to loading<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          // 此时的界面渲染将会被推迟</span></span><br><span class=\"line\"><span class=\"language-xml\">          deferredItems.map(item =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"自定义-Hook\"><a href=\"#自定义-Hook\" class=\"headerlink\" title=\"自定义 Hook\"></a>自定义 Hook</h3><h4 id=\"自定义生命周期-Hook\"><a href=\"#自定义生命周期-Hook\" class=\"headerlink\" title=\"自定义生命周期 Hook\"></a>自定义生命周期 Hook</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 输出顺序：</span></span><br><span class=\"line\"><span class=\"comment\"> child componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\"> father componentDidMount</span></span><br><span class=\"line\"><span class=\"comment\"> child componetWillUnmount （点击 toggle 按钮后）</span></span><br><span class=\"line\"><span class=\"comment\"> child componentDidMount （再次点击 toggle 按钮后）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">lifeStyle</span> = (<span class=\"params\">cname</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cname, <span class=\"string\">&#x27;componentDidMount&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cname, <span class=\"string\">&#x27;componetWillUnmount&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">lifeStyle</span>(<span class=\"string\">&#x27;child&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Child<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CustomerLifeStyle</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isShow, setIsShow] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"title function_\">lifeStyle</span>(<span class=\"string\">&#x27;father&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>LifeStyle<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setIsShow(!isShow)&#125;&gt;toggle destroy<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123; isShow &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">Child</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CustomerLifeStyle</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义监控滚动位置-Hook\"><a href=\"#自定义监控滚动位置-Hook\" class=\"headerlink\" title=\"自定义监控滚动位置 Hook\"></a>自定义监控滚动位置 Hook</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useScroll</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollX, setScrollX] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollY, setScrollY] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setScrollX</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">scrollX</span>)</span><br><span class=\"line\">      <span class=\"title function_\">setScrollY</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">scrollY</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [scrollX, scrollY]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CustomerScroll</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scrollX, scrollY] = <span class=\"title function_\">useScroll</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;height:</span> &#x27;<span class=\"attr\">50vh</span>&#x27;, <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">150vh</span>&#x27;&#125;&#125;&gt;</span>CustomerScroll - [&#123;scrollX&#125;] - [&#123;scrollY&#125;]<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CustomerScroll</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redux-中的-Hook\"><a href=\"#Redux-中的-Hook\" class=\"headerlink\" title=\"Redux 中的 Hook\"></a>Redux 中的 Hook</h3><p>useSelector 用于获取当前的 state</p>\n<p>useDispatch 用于分发事件</p>\n<p>定义 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> counterReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">counter</span>: counterReducer</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<p>定义 reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@reduxjs/toolkit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counterSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;counter&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addCount</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span> += action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">minCount</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span> -= action.<span class=\"property\">payload</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; addCount, minCount &#125; = counterSlice.<span class=\"property\">actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> counterSlice.<span class=\"property\">reducer</span></span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect, useDispatch, useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, minCount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, addCounter, minCounter &#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 redux 钩子函数引入</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> addCounter(1)&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> minCounter(1)&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>New App<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(minCount(1))&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之前引入 redux 方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">count</span>: state.<span class=\"property\">counter</span>.<span class=\"property\">count</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch</span>) =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">addCounter</span>: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addCount</span>(num)),</span><br><span class=\"line\">  <span class=\"attr\">minCounter</span>: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">minCount</span>(num))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">App</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当使用 useSelector 获取状态时，当改变状态时，所有使用到 useSelector 的组件都会重新渲染，使用 shallowEqual 进行浅层比较</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowEqual, useDispatch, useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addCount, minCount, changeMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/features/count&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Home</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Home render&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 此时，父组件更改 state ，该组件将会被重新渲染</span></span><br><span class=\"line\">  <span class=\"comment\">// const &#123; message &#125; = useSelector((state) =&gt; state.counter)</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 shallowEqual 父组件更改的内容子组件没有使用，子组件将不会重新渲染</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">counter</span>.<span class=\"property\">message</span>, shallowEqual)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home: &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(changeMessage(&#x27;home&#x27;))&#125;&gt;Change Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = <span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 redux 钩子函数引入</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App render&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(addCount(1))&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> dispatch(minCount(1))&#125;&gt;Min<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Home</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h3><h4 id=\"useId\"><a href=\"#useId\" class=\"headerlink\" title=\"useId\"></a>useId</h4><p>useId 是一个用于生成横跨服务器端和客户端的稳定的唯一 ID 的同时避免 hydration 不匹配的 Hook</p>\n<ul>\n<li>useId 是用于 react 的同构应用开发的，前端的 SPA 页面并不需要使用</li>\n<li>useId 可以保证应用程序在客户端和服务端生成唯一的 ID，这样可以有效的避免通过一些手段生成的 id 不一致，造成 hydration mismatch</li>\n</ul>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>由于使用 create-react-app 命令创建项目时，所有关于 webpack 的配置都被隐藏可以通过如下方式进行项目的配置</p>\n<ol>\n<li>使用 eject 命令导出（不可逆）<code>npm run eject</code> </li>\n<li>使用 craco <code>npm install @craco/craco@alpha -D</code> （推荐）</li>\n</ol>\n<p>create-react-app config</p>\n<p>craco 进行对项目进行配置 <a href=\"https://craco.js.org/docs/configuration/devserver/\">详细配置信息</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27;@components&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/components&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27;@utils&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/utils&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">configure</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.scss&#x27;</span>, <span class=\"string\">&#x27;.less&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并需要在 package.json 文件中使用 craco 命令启动项目</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;craco start&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;crac0 build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;craco test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eject&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;react-scripts eject&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"搜索引擎优化","date":"2025-04-25T15:31:42.000Z","_content":"\n## SPA（single page application）\n\n- 单页面程序优点：\n  - 只需要加载一次\n    - SPA 应用程序只需要在第一次请求时加载页面，页面切换不需要重新加载，而传统的 Web 应用程序请求时都需要重新加载页面。因此 SPA 页面加载速度要比传统 Web 应用程序块\n  - 更好的用户体验\n    - SPA 提供类似于桌面或移动应用程序的体验，用户切换页面不必重新加载新页面\n    - 切换页面只是内容发生改变，页面并没有重新加载，从而体验变得更流畅\n  - 可轻松的构建功能丰富的 Web 应用程序\n- 缺点\n  - SPA 应用默认返回一个空的 HTML 页面，不利于 SEO（search engine optimization）\n  - 首屏加载资源过大时，一样会影响首屏的渲染\n  - 不利于构建复杂的项目，复杂应用程序的大文件可能变得难以维护\n\n\n\n## 搜索引擎优化\n\n1. 语义性 HTML 标签\n   - 标题采用 `<h1>` ，一个页面只有一个；副标题采用 `<h2>` 到 `<h6>` \n   - 不要过度使用 h 标签，多次使用不会增加 SEO\n   - 段落使用 `<p>` ，列表使用 `<ul>` ，并且 li 只放在 ul 中\n2. 每个页面需要包含：标题 + 内部链接\n   - 每个页面对应的 title，同一个网站所有页面都有内链接可以指向首页\n3. 确保链接可以抓取\n4. meta 标签优化：设置 description keywords 关键字\n5. 文本标签和 img\n   - 比如 `<b>` 和 `<strong>` 加粗文本的标签，爬虫也会关注到这个内容\n   - img 标签设置 alt 属性，图片加载失败，爬虫会取 alt 内容\n6. robots.txt 文件：规定爬虫可以爬取哪些网址\n7. sitemap.xml 站点地图：在站点地图中列出所有网页，确保爬虫不会漏掉某些网页\n\n\n\n## 静态站点生成 (SSG, Static site generate)\n\n- SSG 特点\n  - SSG 应用一般在构建阶段就确定了网站的内容\n  - 如果网站的内容更新了，那么必须重新再次构建和部署\n  - 构建 SSG 应用常见的库和框架有：Vue Nuxt、React Next.js 等\n- SSG 优点：\n  - 访问速度快，因为每个页面都是在构建阶段就已经提前生成好了\n  - 直接给浏览器返回静态的 HTML，也有利于 SEO\n  - SSG 应用仍然保留了 SPA 应用的特性，比如：前端路由、响应式数据、虚拟 DOM 等\n- SSG 的缺点：\n  - 页面都是静态，不利于展示实时性的内容，实时性的更适合 SSR\n  - 如果站点内容更新了，那么必须重新再次构建和部署\n\n\n\n## 服务端渲染（SSR，Server Side Render）\n\n- SSR 流程\n\n  TODO\n\n- SSR 在服务端渲染页面，并将渲染好的 HTML 返回给浏览器呈现\n\n  - SSR 应用的页面是在服务端渲染的，用户每请求一个 SSR 页面都会现在服务端进行渲染，然后将渲染好的界面，返回给浏览器呈现\n  - 构建 SSR 应用常见的库和框架有：Vue Nuxt、React Next.js 等\n\n- 服务端渲染原理：\n\n  ![](ssr.png)\n\n\n\n- 优点：\n  - 更快的首屏渲染速度\n    - 浏览器显示静态页面的内容要比 JavaScript 动态生成的内容快得多\n    - 当用户访问首页时，可立即返回静态页面内容，而不需要等待浏览器先加载完整个应用程序\n  - 更好的 SEO\n    - 爬虫最擅长爬取静态的 HTML 页面，服务器端直接返回一个静态的 HTML 给浏览器\n    - 这样有利于爬虫快速抓取网页内容，并编入索引，有利于SEO\n  - SSR 应用程序在 Hydration 之后依然可以保留 Web 应用程序的交互性，比如：前端路由，响应式数据，虚拟 DOM 等\n- 缺点\n  - SSR 通常需要对服务器进行更多 API 调用，以及**在服务器渲染需要消耗更多的服务器资源**，成本高\n  - **增加了开发的成本**，用户需要关心哪些代码是运行在服务器端，哪些代码是运行在浏览器端\n  - SSR 配置站点的缓存通常比 SPA 要复杂一些\n\n\n\n## 跨请求状态污染\n\n在 SPA 中，整个声明周期中只有一个 App 对象实例 或 一个 Router 对象实例 或 一个 Store 对象实例都是可以的，因为每个用户在使用浏览器访问 SPA 应用时，应用模块都会重新初始化，这也是一种单例模式\n\n然后，在 SSR 环境下，App 应用模块通常只在服务器启动时初始化一次，同一个模块会在多个服务器请求之间被复用，而我们的单例状态对象也一样， 会在多个请求之间被服用：\n\n- 当某个用户对共享的单例状态进行修改，那么这个状态可能意外地泄露给另一个在请求的用户\n- 这种情况为：**跨请求状态污染** \n\n为了避免这种跨请去状态污染，SSR 的解决方案是：\n\n- 可以在每个请求中 **为整个应用创建一个全新的实例** ，包括后面的 router 和 store 等实例\n- 所以在创建 App 或 路由 或 Store 对象是都是使用一个函数来创建，保证每个请求都会创建一个全新的实例\n- 缺点：**需要消耗更多的服务器资源** \n\n\n\n[TODO](https://www.alipan.com/drive/file/all/backup/66f25e78cfc9688d5138492888a6d38a917da9ae) :  \n\n全部文件›备份文件›资源文件›18-后端渲染-SSR-Vue-React›day135_邂逅SSR-从零搭建SSR应用\n\n827--day135\\_邂逅SSR-从零搭建SSR应用-Nuxt初体验\\_12-(掌握)-Vue3 SSR集成路由.mp4 ","source":"_posts/seo.md","raw":"---\ntitle: 搜索引擎优化\ndate: 2025-04-25 23:31:42\ntags: [SEO]\ncategories: [SEO]\n---\n\n## SPA（single page application）\n\n- 单页面程序优点：\n  - 只需要加载一次\n    - SPA 应用程序只需要在第一次请求时加载页面，页面切换不需要重新加载，而传统的 Web 应用程序请求时都需要重新加载页面。因此 SPA 页面加载速度要比传统 Web 应用程序块\n  - 更好的用户体验\n    - SPA 提供类似于桌面或移动应用程序的体验，用户切换页面不必重新加载新页面\n    - 切换页面只是内容发生改变，页面并没有重新加载，从而体验变得更流畅\n  - 可轻松的构建功能丰富的 Web 应用程序\n- 缺点\n  - SPA 应用默认返回一个空的 HTML 页面，不利于 SEO（search engine optimization）\n  - 首屏加载资源过大时，一样会影响首屏的渲染\n  - 不利于构建复杂的项目，复杂应用程序的大文件可能变得难以维护\n\n\n\n## 搜索引擎优化\n\n1. 语义性 HTML 标签\n   - 标题采用 `<h1>` ，一个页面只有一个；副标题采用 `<h2>` 到 `<h6>` \n   - 不要过度使用 h 标签，多次使用不会增加 SEO\n   - 段落使用 `<p>` ，列表使用 `<ul>` ，并且 li 只放在 ul 中\n2. 每个页面需要包含：标题 + 内部链接\n   - 每个页面对应的 title，同一个网站所有页面都有内链接可以指向首页\n3. 确保链接可以抓取\n4. meta 标签优化：设置 description keywords 关键字\n5. 文本标签和 img\n   - 比如 `<b>` 和 `<strong>` 加粗文本的标签，爬虫也会关注到这个内容\n   - img 标签设置 alt 属性，图片加载失败，爬虫会取 alt 内容\n6. robots.txt 文件：规定爬虫可以爬取哪些网址\n7. sitemap.xml 站点地图：在站点地图中列出所有网页，确保爬虫不会漏掉某些网页\n\n\n\n## 静态站点生成 (SSG, Static site generate)\n\n- SSG 特点\n  - SSG 应用一般在构建阶段就确定了网站的内容\n  - 如果网站的内容更新了，那么必须重新再次构建和部署\n  - 构建 SSG 应用常见的库和框架有：Vue Nuxt、React Next.js 等\n- SSG 优点：\n  - 访问速度快，因为每个页面都是在构建阶段就已经提前生成好了\n  - 直接给浏览器返回静态的 HTML，也有利于 SEO\n  - SSG 应用仍然保留了 SPA 应用的特性，比如：前端路由、响应式数据、虚拟 DOM 等\n- SSG 的缺点：\n  - 页面都是静态，不利于展示实时性的内容，实时性的更适合 SSR\n  - 如果站点内容更新了，那么必须重新再次构建和部署\n\n\n\n## 服务端渲染（SSR，Server Side Render）\n\n- SSR 流程\n\n  TODO\n\n- SSR 在服务端渲染页面，并将渲染好的 HTML 返回给浏览器呈现\n\n  - SSR 应用的页面是在服务端渲染的，用户每请求一个 SSR 页面都会现在服务端进行渲染，然后将渲染好的界面，返回给浏览器呈现\n  - 构建 SSR 应用常见的库和框架有：Vue Nuxt、React Next.js 等\n\n- 服务端渲染原理：\n\n  ![](ssr.png)\n\n\n\n- 优点：\n  - 更快的首屏渲染速度\n    - 浏览器显示静态页面的内容要比 JavaScript 动态生成的内容快得多\n    - 当用户访问首页时，可立即返回静态页面内容，而不需要等待浏览器先加载完整个应用程序\n  - 更好的 SEO\n    - 爬虫最擅长爬取静态的 HTML 页面，服务器端直接返回一个静态的 HTML 给浏览器\n    - 这样有利于爬虫快速抓取网页内容，并编入索引，有利于SEO\n  - SSR 应用程序在 Hydration 之后依然可以保留 Web 应用程序的交互性，比如：前端路由，响应式数据，虚拟 DOM 等\n- 缺点\n  - SSR 通常需要对服务器进行更多 API 调用，以及**在服务器渲染需要消耗更多的服务器资源**，成本高\n  - **增加了开发的成本**，用户需要关心哪些代码是运行在服务器端，哪些代码是运行在浏览器端\n  - SSR 配置站点的缓存通常比 SPA 要复杂一些\n\n\n\n## 跨请求状态污染\n\n在 SPA 中，整个声明周期中只有一个 App 对象实例 或 一个 Router 对象实例 或 一个 Store 对象实例都是可以的，因为每个用户在使用浏览器访问 SPA 应用时，应用模块都会重新初始化，这也是一种单例模式\n\n然后，在 SSR 环境下，App 应用模块通常只在服务器启动时初始化一次，同一个模块会在多个服务器请求之间被复用，而我们的单例状态对象也一样， 会在多个请求之间被服用：\n\n- 当某个用户对共享的单例状态进行修改，那么这个状态可能意外地泄露给另一个在请求的用户\n- 这种情况为：**跨请求状态污染** \n\n为了避免这种跨请去状态污染，SSR 的解决方案是：\n\n- 可以在每个请求中 **为整个应用创建一个全新的实例** ，包括后面的 router 和 store 等实例\n- 所以在创建 App 或 路由 或 Store 对象是都是使用一个函数来创建，保证每个请求都会创建一个全新的实例\n- 缺点：**需要消耗更多的服务器资源** \n\n\n\n[TODO](https://www.alipan.com/drive/file/all/backup/66f25e78cfc9688d5138492888a6d38a917da9ae) :  \n\n全部文件›备份文件›资源文件›18-后端渲染-SSR-Vue-React›day135_邂逅SSR-从零搭建SSR应用\n\n827--day135\\_邂逅SSR-从零搭建SSR应用-Nuxt初体验\\_12-(掌握)-Vue3 SSR集成路由.mp4 ","slug":"seo","published":1,"updated":"2025-09-03T16:19:47.348Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkfff000br44y6njm4hny","content":"<h2 id=\"SPA（single-page-application）\"><a href=\"#SPA（single-page-application）\" class=\"headerlink\" title=\"SPA（single page application）\"></a>SPA（single page application）</h2><ul>\n<li>单页面程序优点：<ul>\n<li>只需要加载一次<ul>\n<li>SPA 应用程序只需要在第一次请求时加载页面，页面切换不需要重新加载，而传统的 Web 应用程序请求时都需要重新加载页面。因此 SPA 页面加载速度要比传统 Web 应用程序块</li>\n</ul>\n</li>\n<li>更好的用户体验<ul>\n<li>SPA 提供类似于桌面或移动应用程序的体验，用户切换页面不必重新加载新页面</li>\n<li>切换页面只是内容发生改变，页面并没有重新加载，从而体验变得更流畅</li>\n</ul>\n</li>\n<li>可轻松的构建功能丰富的 Web 应用程序</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>SPA 应用默认返回一个空的 HTML 页面，不利于 SEO（search engine optimization）</li>\n<li>首屏加载资源过大时，一样会影响首屏的渲染</li>\n<li>不利于构建复杂的项目，复杂应用程序的大文件可能变得难以维护</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"搜索引擎优化\"><a href=\"#搜索引擎优化\" class=\"headerlink\" title=\"搜索引擎优化\"></a>搜索引擎优化</h2><ol>\n<li>语义性 HTML 标签<ul>\n<li>标题采用 <code>&lt;h1&gt;</code> ，一个页面只有一个；副标题采用 <code>&lt;h2&gt;</code> 到 <code>&lt;h6&gt;</code> </li>\n<li>不要过度使用 h 标签，多次使用不会增加 SEO</li>\n<li>段落使用 <code>&lt;p&gt;</code> ，列表使用 <code>&lt;ul&gt;</code> ，并且 li 只放在 ul 中</li>\n</ul>\n</li>\n<li>每个页面需要包含：标题 + 内部链接<ul>\n<li>每个页面对应的 title，同一个网站所有页面都有内链接可以指向首页</li>\n</ul>\n</li>\n<li>确保链接可以抓取</li>\n<li>meta 标签优化：设置 description keywords 关键字</li>\n<li>文本标签和 img<ul>\n<li>比如 <code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 加粗文本的标签，爬虫也会关注到这个内容</li>\n<li>img 标签设置 alt 属性，图片加载失败，爬虫会取 alt 内容</li>\n</ul>\n</li>\n<li>robots.txt 文件：规定爬虫可以爬取哪些网址</li>\n<li>sitemap.xml 站点地图：在站点地图中列出所有网页，确保爬虫不会漏掉某些网页</li>\n</ol>\n<h2 id=\"静态站点生成-SSG-Static-site-generate\"><a href=\"#静态站点生成-SSG-Static-site-generate\" class=\"headerlink\" title=\"静态站点生成 (SSG, Static site generate)\"></a>静态站点生成 (SSG, Static site generate)</h2><ul>\n<li>SSG 特点<ul>\n<li>SSG 应用一般在构建阶段就确定了网站的内容</li>\n<li>如果网站的内容更新了，那么必须重新再次构建和部署</li>\n<li>构建 SSG 应用常见的库和框架有：Vue Nuxt、React Next.js 等</li>\n</ul>\n</li>\n<li>SSG 优点：<ul>\n<li>访问速度快，因为每个页面都是在构建阶段就已经提前生成好了</li>\n<li>直接给浏览器返回静态的 HTML，也有利于 SEO</li>\n<li>SSG 应用仍然保留了 SPA 应用的特性，比如：前端路由、响应式数据、虚拟 DOM 等</li>\n</ul>\n</li>\n<li>SSG 的缺点：<ul>\n<li>页面都是静态，不利于展示实时性的内容，实时性的更适合 SSR</li>\n<li>如果站点内容更新了，那么必须重新再次构建和部署</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端渲染（SSR，Server-Side-Render）\"><a href=\"#服务端渲染（SSR，Server-Side-Render）\" class=\"headerlink\" title=\"服务端渲染（SSR，Server Side Render）\"></a>服务端渲染（SSR，Server Side Render）</h2><ul>\n<li><p>SSR 流程</p>\n<p>TODO</p>\n</li>\n<li><p>SSR 在服务端渲染页面，并将渲染好的 HTML 返回给浏览器呈现</p>\n<ul>\n<li>SSR 应用的页面是在服务端渲染的，用户每请求一个 SSR 页面都会现在服务端进行渲染，然后将渲染好的界面，返回给浏览器呈现</li>\n<li>构建 SSR 应用常见的库和框架有：Vue Nuxt、React Next.js 等</li>\n</ul>\n</li>\n<li><p>服务端渲染原理：</p>\n<p><img src=\"/paw/ssr.png\"></p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li>更快的首屏渲染速度<ul>\n<li>浏览器显示静态页面的内容要比 JavaScript 动态生成的内容快得多</li>\n<li>当用户访问首页时，可立即返回静态页面内容，而不需要等待浏览器先加载完整个应用程序</li>\n</ul>\n</li>\n<li>更好的 SEO<ul>\n<li>爬虫最擅长爬取静态的 HTML 页面，服务器端直接返回一个静态的 HTML 给浏览器</li>\n<li>这样有利于爬虫快速抓取网页内容，并编入索引，有利于SEO</li>\n</ul>\n</li>\n<li>SSR 应用程序在 Hydration 之后依然可以保留 Web 应用程序的交互性，比如：前端路由，响应式数据，虚拟 DOM 等</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>SSR 通常需要对服务器进行更多 API 调用，以及<strong>在服务器渲染需要消耗更多的服务器资源</strong>，成本高</li>\n<li><strong>增加了开发的成本</strong>，用户需要关心哪些代码是运行在服务器端，哪些代码是运行在浏览器端</li>\n<li>SSR 配置站点的缓存通常比 SPA 要复杂一些</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"跨请求状态污染\"><a href=\"#跨请求状态污染\" class=\"headerlink\" title=\"跨请求状态污染\"></a>跨请求状态污染</h2><p>在 SPA 中，整个声明周期中只有一个 App 对象实例 或 一个 Router 对象实例 或 一个 Store 对象实例都是可以的，因为每个用户在使用浏览器访问 SPA 应用时，应用模块都会重新初始化，这也是一种单例模式</p>\n<p>然后，在 SSR 环境下，App 应用模块通常只在服务器启动时初始化一次，同一个模块会在多个服务器请求之间被复用，而我们的单例状态对象也一样， 会在多个请求之间被服用：</p>\n<ul>\n<li>当某个用户对共享的单例状态进行修改，那么这个状态可能意外地泄露给另一个在请求的用户</li>\n<li>这种情况为：<strong>跨请求状态污染</strong></li>\n</ul>\n<p>为了避免这种跨请去状态污染，SSR 的解决方案是：</p>\n<ul>\n<li>可以在每个请求中 <strong>为整个应用创建一个全新的实例</strong> ，包括后面的 router 和 store 等实例</li>\n<li>所以在创建 App 或 路由 或 Store 对象是都是使用一个函数来创建，保证每个请求都会创建一个全新的实例</li>\n<li>缺点：<strong>需要消耗更多的服务器资源</strong></li>\n</ul>\n<p><a href=\"https://www.alipan.com/drive/file/all/backup/66f25e78cfc9688d5138492888a6d38a917da9ae\">TODO</a> :  </p>\n<p>全部文件›备份文件›资源文件›18-后端渲染-SSR-Vue-React›day135_邂逅SSR-从零搭建SSR应用</p>\n<p>827–day135_邂逅SSR-从零搭建SSR应用-Nuxt初体验_12-(掌握)-Vue3 SSR集成路由.mp4 </p>\n","excerpt":"","more":"<h2 id=\"SPA（single-page-application）\"><a href=\"#SPA（single-page-application）\" class=\"headerlink\" title=\"SPA（single page application）\"></a>SPA（single page application）</h2><ul>\n<li>单页面程序优点：<ul>\n<li>只需要加载一次<ul>\n<li>SPA 应用程序只需要在第一次请求时加载页面，页面切换不需要重新加载，而传统的 Web 应用程序请求时都需要重新加载页面。因此 SPA 页面加载速度要比传统 Web 应用程序块</li>\n</ul>\n</li>\n<li>更好的用户体验<ul>\n<li>SPA 提供类似于桌面或移动应用程序的体验，用户切换页面不必重新加载新页面</li>\n<li>切换页面只是内容发生改变，页面并没有重新加载，从而体验变得更流畅</li>\n</ul>\n</li>\n<li>可轻松的构建功能丰富的 Web 应用程序</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>SPA 应用默认返回一个空的 HTML 页面，不利于 SEO（search engine optimization）</li>\n<li>首屏加载资源过大时，一样会影响首屏的渲染</li>\n<li>不利于构建复杂的项目，复杂应用程序的大文件可能变得难以维护</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"搜索引擎优化\"><a href=\"#搜索引擎优化\" class=\"headerlink\" title=\"搜索引擎优化\"></a>搜索引擎优化</h2><ol>\n<li>语义性 HTML 标签<ul>\n<li>标题采用 <code>&lt;h1&gt;</code> ，一个页面只有一个；副标题采用 <code>&lt;h2&gt;</code> 到 <code>&lt;h6&gt;</code> </li>\n<li>不要过度使用 h 标签，多次使用不会增加 SEO</li>\n<li>段落使用 <code>&lt;p&gt;</code> ，列表使用 <code>&lt;ul&gt;</code> ，并且 li 只放在 ul 中</li>\n</ul>\n</li>\n<li>每个页面需要包含：标题 + 内部链接<ul>\n<li>每个页面对应的 title，同一个网站所有页面都有内链接可以指向首页</li>\n</ul>\n</li>\n<li>确保链接可以抓取</li>\n<li>meta 标签优化：设置 description keywords 关键字</li>\n<li>文本标签和 img<ul>\n<li>比如 <code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 加粗文本的标签，爬虫也会关注到这个内容</li>\n<li>img 标签设置 alt 属性，图片加载失败，爬虫会取 alt 内容</li>\n</ul>\n</li>\n<li>robots.txt 文件：规定爬虫可以爬取哪些网址</li>\n<li>sitemap.xml 站点地图：在站点地图中列出所有网页，确保爬虫不会漏掉某些网页</li>\n</ol>\n<h2 id=\"静态站点生成-SSG-Static-site-generate\"><a href=\"#静态站点生成-SSG-Static-site-generate\" class=\"headerlink\" title=\"静态站点生成 (SSG, Static site generate)\"></a>静态站点生成 (SSG, Static site generate)</h2><ul>\n<li>SSG 特点<ul>\n<li>SSG 应用一般在构建阶段就确定了网站的内容</li>\n<li>如果网站的内容更新了，那么必须重新再次构建和部署</li>\n<li>构建 SSG 应用常见的库和框架有：Vue Nuxt、React Next.js 等</li>\n</ul>\n</li>\n<li>SSG 优点：<ul>\n<li>访问速度快，因为每个页面都是在构建阶段就已经提前生成好了</li>\n<li>直接给浏览器返回静态的 HTML，也有利于 SEO</li>\n<li>SSG 应用仍然保留了 SPA 应用的特性，比如：前端路由、响应式数据、虚拟 DOM 等</li>\n</ul>\n</li>\n<li>SSG 的缺点：<ul>\n<li>页面都是静态，不利于展示实时性的内容，实时性的更适合 SSR</li>\n<li>如果站点内容更新了，那么必须重新再次构建和部署</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端渲染（SSR，Server-Side-Render）\"><a href=\"#服务端渲染（SSR，Server-Side-Render）\" class=\"headerlink\" title=\"服务端渲染（SSR，Server Side Render）\"></a>服务端渲染（SSR，Server Side Render）</h2><ul>\n<li><p>SSR 流程</p>\n<p>TODO</p>\n</li>\n<li><p>SSR 在服务端渲染页面，并将渲染好的 HTML 返回给浏览器呈现</p>\n<ul>\n<li>SSR 应用的页面是在服务端渲染的，用户每请求一个 SSR 页面都会现在服务端进行渲染，然后将渲染好的界面，返回给浏览器呈现</li>\n<li>构建 SSR 应用常见的库和框架有：Vue Nuxt、React Next.js 等</li>\n</ul>\n</li>\n<li><p>服务端渲染原理：</p>\n<p><img src=\"/paw/ssr.png\"></p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li>更快的首屏渲染速度<ul>\n<li>浏览器显示静态页面的内容要比 JavaScript 动态生成的内容快得多</li>\n<li>当用户访问首页时，可立即返回静态页面内容，而不需要等待浏览器先加载完整个应用程序</li>\n</ul>\n</li>\n<li>更好的 SEO<ul>\n<li>爬虫最擅长爬取静态的 HTML 页面，服务器端直接返回一个静态的 HTML 给浏览器</li>\n<li>这样有利于爬虫快速抓取网页内容，并编入索引，有利于SEO</li>\n</ul>\n</li>\n<li>SSR 应用程序在 Hydration 之后依然可以保留 Web 应用程序的交互性，比如：前端路由，响应式数据，虚拟 DOM 等</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>SSR 通常需要对服务器进行更多 API 调用，以及<strong>在服务器渲染需要消耗更多的服务器资源</strong>，成本高</li>\n<li><strong>增加了开发的成本</strong>，用户需要关心哪些代码是运行在服务器端，哪些代码是运行在浏览器端</li>\n<li>SSR 配置站点的缓存通常比 SPA 要复杂一些</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"跨请求状态污染\"><a href=\"#跨请求状态污染\" class=\"headerlink\" title=\"跨请求状态污染\"></a>跨请求状态污染</h2><p>在 SPA 中，整个声明周期中只有一个 App 对象实例 或 一个 Router 对象实例 或 一个 Store 对象实例都是可以的，因为每个用户在使用浏览器访问 SPA 应用时，应用模块都会重新初始化，这也是一种单例模式</p>\n<p>然后，在 SSR 环境下，App 应用模块通常只在服务器启动时初始化一次，同一个模块会在多个服务器请求之间被复用，而我们的单例状态对象也一样， 会在多个请求之间被服用：</p>\n<ul>\n<li>当某个用户对共享的单例状态进行修改，那么这个状态可能意外地泄露给另一个在请求的用户</li>\n<li>这种情况为：<strong>跨请求状态污染</strong></li>\n</ul>\n<p>为了避免这种跨请去状态污染，SSR 的解决方案是：</p>\n<ul>\n<li>可以在每个请求中 <strong>为整个应用创建一个全新的实例</strong> ，包括后面的 router 和 store 等实例</li>\n<li>所以在创建 App 或 路由 或 Store 对象是都是使用一个函数来创建，保证每个请求都会创建一个全新的实例</li>\n<li>缺点：<strong>需要消耗更多的服务器资源</strong></li>\n</ul>\n<p><a href=\"https://www.alipan.com/drive/file/all/backup/66f25e78cfc9688d5138492888a6d38a917da9ae\">TODO</a> :  </p>\n<p>全部文件›备份文件›资源文件›18-后端渲染-SSR-Vue-React›day135_邂逅SSR-从零搭建SSR应用</p>\n<p>827–day135_邂逅SSR-从零搭建SSR应用-Nuxt初体验_12-(掌握)-Vue3 SSR集成路由.mp4 </p>\n"},{"title":"Node 学习笔记","date":"2025-04-08T15:31:42.000Z","_content":"\n\n\n## Node.js \n\n使用 npm 安装第三方工具时。当父文件夹存在 node_modules 文件夹时，并执行下载命令时（在子文件夹下），将会自动下载第三方工具到父文件夹下的 node_modules 文件夹中。\n\n### path 模块\n\nresolve 将会从后往前解析路径，当遇到绝对路径将会停止\n\n```js\nconst path = require('path')\n\nconsole.log(path.join('./a.txt', './b')) // a.txt\\b\n\nconsole.log(path.resolve('/a.txt', './b', '/c.txt')) // D:\\c.txt\n\nconsole.log(path.resolve('/a.txt', '/b.txt', './c.txt')) // D:\\b.txt\\c.txt\n\nconsole.log(path.resolve('/a.txt', './b.txt', './c.txt')) // D:\\a.txt\\b.txt\\c.txt\n\nconsole.log(path.resolve('./a.txt', './b.txt', './c.txt')) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt\n\nconsole.log(path.resolve('./a.txt', './b.txt', '', './c.txt/')) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt\n\nconsole.log(__dirname, __filename) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\index.js\n```\n\n\n\n## CommonJS\n\n### ``exports`` 与 ``module.exports`` \n\n``exports`` 和 ``module.exports`` 等价\n\n```js\n// b.js\nconsole.log(module.exports === exports)\n```\n\n执行：\n\n```bash\n$ node b.js\ntrue\n```\n\n### 路径查找问题\n\n在使用 ``require('路径')`` 时，当路径前缀不包含 ``/``、``./``、``../`` 等相对或绝对路径时\n\n- 将会首先在 node.js 的环境中查找该模块，例如：``require('path')`` \n- 当 node.js 环境不存在该模块时，将会在该目录的 node_modules 文件夹中查找，该目录中不存在 node_modules 文件夹则会一直向上寻找该文件夹，不存在则抛出异常\n\n当路径前缀包含 ``/``、``./``、``../`` 等相对或绝对路径时，首先会查找其路径对应的文件，当不存在该文件时：\n\n- 当不包含文件后缀名 (``.js``、``.json``、``.node``) 时，将会自动添加后缀，进行查找\n- 当添加后缀名后查找仍不存在，则会查找该路径命名的文件夹，当不存在该文件夹时抛出异常\n- 当文件夹存在时，则会在文件夹中查找 ``index.js`` 文件\n\n### 导出引用\n\n在使用 ``require`` 和 ``module.exports`` 时，``module.exports`` 所导出的为对象的引用，在导入文件中修改导入的变量时，原变量也会发生改变\n\n```js\n// a.js\nlet a = {\n  name: 'aaa'\n}\n\nmodule.exports = {\n  a\n}\n\nsetTimeout(() => {\n  console.log('in aaa file: ', a.name)\n}, 1000)\n\n// b.js\nconst ma = require('./aaa')\n\nconsole.log('in bbb file: ', ma)\n\nma.a.name = 'bbb'\n```\n\n当执行后：\n\n```bash\n$ node b.js\nin bbb file:  { a: { name: 'aaa' } }\nin aaa file:  bbb\n```\n\n### module 对象\n\n当模块使用 require 引入时，该模块中的代码将会被自动执行一次。当多次引入也会只执行一次。\n\nnode.js 源码中存在一个变量 ``module.loaded`` ，初始时为 false，当进行引入时该变量将会变为 true\n\n```js\nModule {\n  id: '.',\n  path: '~',\n  exports: {},\n  filename: '~/aaa.js',\n  loaded: false, // 代表是否已经加载该模块\n  children: [],\n  paths: [ // 当前目录及父目录下的 node_modules 文件夹，用于查找第三方工具包\n    'D:\\\\Dahui\\\\Project\\\\Algorithm-Exercise\\\\node_modules',\n    'D:\\\\Dahui\\\\Project\\\\node_modules',\n    'D:\\\\Dahui\\\\node_modules',\n    'D:\\\\node_modules'\n  ]\n}\n```\n\n### 加载过程\n\n其加载过程为同步过程，当一个模块加载完成之后，才会加载另一个，此方法经常在服务端使用（由于本地加载较为迅速）。此种方式在客户端加载时会导致卡顿或阻塞。由此引申出 AMD（Asynchronous Module Definition） 和 CMD （Common Module Definition），这两种方式都采用异步加载\n\n```js\n// a.js\nconsole.log('in aaa file')\n\n// b.js\nconsole.log('in bbb file')\nconst ma = require('./a')\nconsole.log('in bbb file')\n```\n\n执行结果：\n\n```bash\n$ node b.js\nin bbb file\nin aaa file\nin bbb file\n```\n\n当存在循环引入时，其执行顺序（node.js 为深度优先搜索）\n\n- a -> b -> c\n- a -> d -> c\n\n则执行顺序为：a -> b -> c -> d\n\n\n\n## ES-Module\n\n在 ES6（ES2015） 时推出\n\n### 导入导出方式\n\n```js\n// a.js\nlet a = \"aaa\"\n// 定义时直接导出，该方式不能使用 as 关键字改别名\nexport let aa = \"aaaaaa\"\n\nexport {\n\ta\n}\n\n// b.js\n// 在浏览器中导入时，必须夹后缀（.js），导入声明只能在文件顶层使用\nimport {a} from 'a.js'\n// import * as a from 'a.js'\n\nconsole.log(a)\n\n// a.html\n<script src='b.js' type=\"module\"></script>\n```\n\n执行结果\n\n```bash\naaa\n```\n\n当导入时的变量与该文件中的变量产生冲突时，通过 as 关键字可以在导出文件中替换名字\n\n```js\n// a.js\nlet a = \"aaa\"\n\nexport {\n\ta as a_a\n}\n\n// b.js\nimport {a_a} from 'a.js'\n\nconst a = \"bbb\"\nconsole.log(a, a_a)\n```\n\n或者在导入时起别名\n\n```js\n// a.js\nlet a = \"aaa\"\n\nexport {\n\ta\n}\n\n// b.js\nimport {a as a_a} from 'a.js'\n\nconst a = \"bbb\"\nconsole.log(a, a_a)\n```\n\n执行结果\n\n```bash\nbbb, aaa\n```\n\n### 导入导出优化\n\n当管理多个导入导出文件时，可采用如下优化方式（main.js 中需要引入 utils 文件夹下的所有工具类）。创建index.js 文件导入所有工具方法，并导出，此时 main.js 中只需要引入 index.js 文件中的方法即可\n\n```bash\n-- utils\n\t-- parse.js\n\t-- time.js\n\t-- index.js\n-- main.js\n```\n\n代码如下：\n\n```js\n// index.js\n// 导出所有\nexport * from 'parse.js'\n// 如下更清晰\nexpor { timeUtils } from 'time.js'\n\n// main.js\nimport { parseInt, timeUtils } from 'utils/index.js'\n```\n\n### 默认导出\n\n```js\n// a.js\n// 一个模块中只能存在一个默认导出\nexport default function() {\n    console.log('default export')\n}\n\n// b.js\nimport aaa from 'a.js'\n```\n\n### 导入函数\n\n默认导入只能在文件顶层，浏览器在加载 ``js`` 文件时，会直接在文件顶层扫描 import 并下载\n\n```js\n// a.js\nexport let a = \"aaa\"\n\n// b.js\nlet flag = true\nif (flag) {\n    const importPromise = import('./a.js')\n    importPromise.then((res) => {\n        console.log(res.a) // aaa\n    })\n    \n    // import('./a.js').then((res) => {\n    //     console.log(res.a) // aaa\n    // })\n}\n```\n\n如下导入方式将会报错，因为在执行之后才能知道具体要导入的文件\n\n```js\nimport {a} from 'a' + '.js'\nimport {a} from ('a' + '.js')\n```\n\n在 ES11（ES2020） import 中添加了如下的属性：\n\n```json\n{\n    url: 'http://127.0.0.1:5500/a.js', // 加载该 js 文件所使用的 url\n    resolve: ƒ\n}\n```\n\n### 解析流程 TODO\n\n\n\n\n\n\n\n## npm\n\n当所加载的第三方工具包的入口文件不为 index.js 文件时，无法通过 ``require('第三方工具包')`` 进行导入，可在第三方工具包中创建 ``package.json`` 文件\n\n```json\n// 例如第三方工具包的入口文件为 main.js\n{\n    name: \"第三方工具包\",\n    version: \"1.0.0\",\n    main: \"main.js\"\n    // ...\n}\n```\n\n### scripts 脚本\n\n针对于特定名称的脚本可以省略 run 参数，例如：``npm start`` ，可以省略 run 的命令如下：start、test、stop、restart\n\n```json\n{\n    // ...\n    scripts: {\n        start: \"node main.js\",\n        build: \"webpack ...\"\n    }\n    // ...\n}\n```\n\n### 开发依赖、生产依赖\n\n开发依赖：只在开发过程中会使用到，例如：webpack。执行命令：``npm install/i xxx --save-dev/-D`` \n\n生产依赖：在开发过程以及生产过程都会被使用到，例如：vue。执行命令：``npm install/i xxx --save/-S`` \n\npeer 依赖：在依赖本库时需要先安装该依赖的库\n\n*全局安装命令： ``npm install xxx -g``* \n\n```json\n{\n    // ...\n    dependencies: {\n        \"vue\": \"3.0\"\n        // ...\n    },\n    devDependencies: {\n        \"webpack\": \"5.0\"\n        // ...\n    },\n    peerDependencies: {\n        // ...\n    }\n    // ...\n}\n```\n\n### 版本管理\n\nsemver 版本规范 ``X.Y.Z`` \n\n- X 主版本号（major）：当做了不兼容的 API 修改时（可能不兼容之前的版本）\n- Y 次版本号（minor）：当做了向下兼容的功能性新增（新功能增加，但兼容以前的版本）\n- Z 修订号（patch）：当做了向下兼容的问题修正（没有新功能，修复了之前版本的 BUG）\n\n``^`` 和 ``~`` 前缀\n\n- ``x.y.z`` 代表特定的版本\n- ``^x.y.z`` 代表 x 是保持不变的，y 和 z 永远安装最新的版本\n- ``~x.y.z`` 表示 x 和 y 是保持不变的，z永远安装最新的版本\n\n\n\n### 命令\n\n```bash\n# 获取缓存目录\n$ npm config get cache\n\n# 获取配置信息\n$ npm config list\n# ; \"user\" config from ~\\.npmrc\n#\n# cache = \"~/node-v18.14.0-win-x64/node_cache\"\n# prefix = \"~/node-v18.14.0-win-x64/node_global\"\n# registry = \"http://registry.npm.taobao.org/\"\n#\n# ; node bin location = ~/node-v18.14.0-win-x64/node.exe\n# ; node version = v18.14.0\n# ; npm local prefix = ~/project\n# ; npm version = 9.3.1\n# ; cwd = ~/project\n# ; HOME = ~\n# ; Run `npm config ls -l` to show all defaults.\n\n\n# 卸载某个第三方库\n$ npm uninstall xxx\n\n# 重新构建项目依赖\n$ npm rebuild\n\n# 清除缓存\n$ npm cache clean\n\n# 获取本地使用的镜像源\n$ npm config get registry\n\n# 更新镜像源\n$ npm config set registry \"镜像源地址\"\n\n# 登录到 npm registry\n$ npm login\n\n# 发布当前包到 npm registry\n$ npm publish\n\n# 删除发布的包\n$ npm unpublish\n\n# 让发布的包过期\n$ npm deprecate\n```\n\n\n\n## npx\n\n当使用 npx 命令执行别的第三方包命令时，将会首先在该目录下的 node_modules 文件夹下的 .bin 文件夹中查找该命令是否存在，存在则会优先执行该命令\n\n\n\n## pnpm\n\n每创建一个项目都需要下载对应的第三方工具包，为了解决包占用较大的问题，pnpm采用软链接、硬链接\n\n- 扁平化：当一个工具包依赖另一个工具包时，将会直接下载到 node_modules 文件夹下，导致在``package.json`` 中没有写入依赖项就可以导入。当卸载该工具包时，其依赖包也可能被删除，由此引发导入错误\n- 非扁平化：当一个工具包依赖另一个工具包时，依赖项将会下载到在该工具包中\n\n``pnpm`` 通过设置软连接的方式将一个工具包依赖的另一个工具包保存到该工具包目录中，安装的该工具包依赖的工具包将会以硬链接的方式存储到 ``.pnpm`` 目录下\n\n\n\n## Webpack 模块化打包工具\n\n> Webpack 是一个静态的模块化打包工具。打包后成为最终的静态资源，用于部署到服务器中\n>\n> Webpack 支持 ES Module、CommonJS、AMD 等规范\n\n\n\n对项目进行打包：\n\n```bash\n# 执行当前项目依赖的 webpack 进行打包\n$ npx webpack\n```\n\n当将该命令集成到 ``package.json`` 文件中，则可以省略 ``npx`` ，``package.json`` 中的命令将会自动在该项目依赖中进行查找\n\n```json\n{\n    // ...\n    scripts: {\n        \"build\": \"webpack\"\n    }\n    // ...\n}\n```\n\n\n\nwebpack 默认会找到 ``src/index.js`` 文件进行打包\n\n- 可以通过参数指定要打包的文件：``npx webpack --entry ./src/main.js`` 进行修改\n- 通过添加如下参数：``npx webpack --output-filename bundle.js`` 修改输出的文件名\n- 通过添加如下参数：``npx webpack --output-dir build`` 修改输出的文件夹名称\n\n### 配置文件\n\n通过添加 webpack.config.js 文件修改 webpack 的配置信息。该文件采用 CommonJS 语法规范\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n当该配置文件名字不为 webpack.config.js 时可使用 `npx webpack --config newname.config.js` 来指定\n\n为了简化命令可以使用 `package.json` 的 scripts ：\n\n```json\n{\n\t//...\n    scripts: {\n        \"build\": \"webpack --config newname.config.js\"\n    }\n    //...\n}\n```\n\n### 配置后缀名\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  },\n  resolve: {\n    extensions: ['.js', '.jsx', '.json'] // 配置可省略的后缀名\n  },\n}\n```\n\n\n\n### 打包模式\n\n可选择的打包方式为：none | development | production（默认）\n\n| 选项        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| development | 会将 DefinePlugin 中的 process.env.NODE_ENV 的值设置为 development，为模块和 chunk 启用有效的名 |\n| production  | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production，为模块和 chunk 启用确定新的混淆名称，FlagDependencyUsagePlugin、FlagIncludeChunksPlugin、ModuleConcatenationPlugin、NoEmitOnErrorsPlugin 和 TerserPligin |\n| none        | 不适用任何默认优化选项                                       |\n\n\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'development', // none | development | production (default)\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n\n\n### HTML webpack plugin\n\n将 html 文件打包生成到指定的文件夹中\n\n安装指定插件\n\n```bash\nnpm install html-webpack-plugin -D\n```\n\n使用指定插件\n\n```js\n// webpack.config.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n\nmodule.exports = {\n  // ...\n  module: {\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    })\n  ]\n}\n```\n\n\n\n### 对 React 代码进行打包\n\n安装 react 依赖\n\n```bash\nnpm install react react-dom\n```\n\n安装对应编译 jsx 代码的插件\n\n```bash\nnpm install @babel/plugin-systax-jsx -D\nnpm install @babel/plugin-transform-react-jsx -D\nnpm install @babel/plugin-transform-react-display-name -D\n\n// 或者直接安装预设\n\nnpm install @babel/preset-react -D\n```\n\nApp 组件中的 jsx 代码\n\n```jsx\nimport React, { memo, useState } from \"react\";\n\nconst Component = memo(function () {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Add</button>\n    </div>\n  )\n})\n\nexport default Component\n```\n\nmain 入口文件\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom/client'\nimport App from './App.jsx'\n\nconst root = ReactDom.createRoot(document.querySelector('#app'))\nroot.render(<App />)\n```\n\nbabel.config.js\n\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      corejs: 3,\n      useBuiltIns: 'entry' // 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】\n    }],\n    ['@babel/preset-react'], // 解析 react 代码\n  ]\n}\n```\n\n\n\n### 对 TS 文件进行打包\n\n1. 可以使用 typescript compiler 进行打包，通过 tsc file.ts 进行手动打包\n\n2. 通过使用 ts-loader 进行整合 webpack 进行打包\n\n   需要对应的 tsconfig.json 文件（可以通过 npx tsc -init 生成）\n\n   会对 类型检查错误的代码进行报错\n\n   打包的内容并不包括 polyfill 部分\n\n   ```js\n   // webpack.config.js\n   const path = require('path')\n   const HtmlWebpackPlugin = require('html-webpack-plugin')\n   \n   module.exports = {\n     // ...\n     resolve: {\n       extensions: ['.js', '.jsx', '.json', '.ts']\n     },\n     module: {\n       rules: [\n         {\n           test: /\\.ts$/,\n           use: ['ts-loader']\n         }\n       ]\n     },\n     plugins: [\n       new HtmlWebpackPlugin({\n         template: './index.html'\n       })\n     ]\n   }\n   ```\n\n   \n\n3. 通过 ts 预设进行打包：@babel/preset-typescript（推荐）\n\n   但是 使用 babel-loader 将不会对 ts 代码类型检查错误进行报错\n\n   此时会使用 polyfill 进行填充\n\n   ```js\n   // webpack.config.js\n   const path = require('path')\n   const HtmlWebpackPlugin = require('html-webpack-plugin')\n   \n   module.exports = {\n     // ...\n     module: {\n       rules: [\n         {\n           test: /\\.ts$/,\n           use: {\n             loader: 'babel-loader', // 不会对类型检查错误进行报错\n             options: {\n               presets: ['@babel/preset-typescript']\n             },\n             // loader: 'ts-loader' // 会对类型检查错误进行报错\n           }\n         }\n       ]\n     },\n     plugins: [\n       new HtmlWebpackPlugin({\n         template: './index.html'\n       })\n     ]\n   }\n   ```\n\n   在使用过程中既要类型检查抛出异常又要使用 polyfill 进行代码的填充，可以通过配置 package.json 脚本\n\n   ```json\n   {\n     // ...\n     \"scripts\": {\n       \"build\": \"tsc --noEmit && webpack\",\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     },\n     // ...\n   }\n   ```\n\n   noEmit 表示不输出任何东西，也即不进行转换\n\n\n\n### Source Map\n\nwebapck 配置文件\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'production', // none | development | production (default)\n  devtool: 'source-map', // reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n编写的主文件\n\n```js\n// main.js\n\nlet name = 'abc'\nconsole.log(name)\n\nname = 123\nconsole.log(name)\n```\n\n最后一行的注释指明了该打包后的文件的 source map 文件\n\n浏览器会根据我们的注释，查找相应的 source-map，并且根据  source-map 还原我们的代码，方便进行调试\n\n```js\n(()=>{let o=\"abc\";console.log(o),o=123,console.log(o)})();\n//# sourceMappingURL=bundle.js.map\n```\n\n生成的 source-map 文件\n\n```json\n{\n  \"version\": 3, // 当前使用的版本，也就是最新的第三版\n  \"file\": \"bundle.js\", // 打包后的文件（浏览器加载的文件）\n  \"mappings\": \"MAAA,IAAIA,EAAO,MAEXC,QAAQC,IAAIF,GAEZA,EAAO,IAEPC,QAAQC,IAAIF,E\", // source-map 用来和源文件映射的信息（比如位置信息等），一串 base64 VLQ（variable length quantity，可变长度值）编码\n  \"sources\": [\n    \"webpack://webpack/./src/main.js\"\n  ], // 从哪些文件转换过来的 source-map 和打包的代码（最初始的文件）\n  \"sourcesContent\": [\n    \"let name = 'abc'\\r\\n\\r\\nconsole.log(name)\\r\\n\\r\\nname = 123\\r\\n\\r\\nconsole.log(name)\\r\\n\"\n  ], // 转换前的具体代码信息（和 sources 是对应的关系）\n  \"names\": [\n    \"name\",\n    \"console\",\n    \"log\"\n  ], // 转换前的变量和属性名称（因为我们目前使用的是 development 模式，所以不需要保留转换前的名称）\n  \"sourceRoot\": \"\" // 所有的 sources 相对的根目录\n}\n```\n\n### devtool 选项\n\n- false：不使用 source-map，也就是没有任何和 source-map 相关的内容\n\n- none：production 模式下的默认值（什么值都不写），不生成 source-map\n\n- eval：development 模式下的默认值，不生成  source-map\n\n  - 但是他会在 eval 执行的代码中，添加 // # sourceURL=;\n  - 它会被浏览器在执行时解析，并且在调试面板中生成对应的一些文件目录，方便我们调试（但是此时还原的代码并不一定准确到具体的行、列）速度快\n\n- source-map：会生成完整的 source-map 文件，一般设置在 production 模式下\n\n- eval-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 eval 函数的后面（将 source-map 文件内容**转化为 base64 放到 eval 函数的后面**）\n\n  ```js\n  eval(... //# sourceMappingURL=data;application/json;charset=utf-8;base64,)\n  ```\n\n  \n\n- inline-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 bundle 文件的后面（将 source-map 文件内容**转化为 base64 放到 bundle 文件的最后面**）\n\n  ```js\n  eval(... )\n  //# sourceMappingURL=data;application/json;charset=utf-8;base64,\n  ```\n\n  \n\n- cheap-source-map\n\n  - 会生成 sourcemap，但是会更加高效一些（cheap 低开销），因为 **他没有生成列映射** （Column Mapping）\n  - 因为再发开中，我们只需要行信息通常就可以定位到错误了\n  - 在 development 中才会生成相应的 .js.map 文件\n\n- cheap-module-source-map\n\n  - 会生成 sourcemap，类似于 cheap-source-map，但是对源自 loader 的 sourcemap 处理会更好\n  - 如果 loader 对我们的源代码进行了特俗的处理，比如 babel 可能会删掉空行\n\n- hidden-source-map\n\n  - 会生成 sourcemap，但是不会对 sourcemap 文件进行引用\n  - 相当于删除了打包文件中对 sourcemap 的引用注释。如果我们手动添加进行，那么 sourcemap 就会生效了\n\n- nosources-source-map\n\n  - 会生成 sourcemap，但是生成的 sourcemap 只有错误信息的提示，不会生成源代码文件\n\n### 配置插件\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'production', // none | development | production (default)\n  devtool: 'source-map', // reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build'),\n    clean: true, // when rebuild, the output dir will be cleaned\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [], // add plugins\n            presets: [\n              '@babel/preset-env'\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n### 自动化编译\n\n通过如下方式可以达到自动编译\n\n1. webpack watch mode\n2. webpack-dev-server （常用）\n   - webpack-dev-server 使用了 memfs 库，不会输出任何文件，生成的中间结果在内存中\n3. webpack-dev-middleware\n\n```bash\nnpm install webpack-dev-server -D\n```\n\n配置 DevServer\n\n如果配置了 devServer.static 那么该内容会覆盖默认值，也即如果这个地方没有写 public 那么 public 将不会被认为是静态资源目录\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  devServer: {\n    // if this is defined, then the public must be insert to this list\n    static: ['public', 'temp'],\n    host: '0.0.0.0',\n    open: true,\n    compress: true, // 进行压缩，会设置响应头中 content-encoding: gzip    \n  }\n}\n```\n\n\n\n### Webpack 性能优化\n\n- 对打包结果进行优化\n  - 分包处理，Vue/React 路由懒加载\n  - 代码进行压缩（丑化 const message => const m）\n  - 删除无用代码（tree shaking）\n  - CDN 服务器（对第三方库使用 CDN）\n- 对打包过程进行优化\n  - 加速打包的过程（exclude/cache-loader）\n\n#### 1. 分包处理\n\n- 他的主要目的是将 **代码分离到不同的 bundle 中**，之后我们可以 **按需加载**，或者并行加载这些文件\n- 默认情况下，所有的 JavaScript 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，会影响首页加载的速度\n- 代码可以分离出更小的 bundle，以及控制资源加载优先级，提供代码的性能。\n\nwebapck 中常用的代码分离方式：\n\n1. 入口起点：使用 entry 配置手动分离代码\n\n   ```js\n   module.exports = {\n     entry: {\n       index: './src/index.js',\n       main: './src/main.js'\n     },\n     output: {\n       // 使用占位符：name 为上面的 index 和 main\n       filename: '[name]-bundle.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n     },\n   }\n   ```\n\n   当多个入口文件对同一个库进行了依赖，可以设置起共享的库\n\n   ```js\n   module.exports = {\n     entry: {\n       index: {\n         import: './src/index.js',\n         dependOn: 'shared1'\n       },\n       main: {\n         import: './src/main.js',\n         dependOn: 'shared1'\n       },\n       // shared 可以配置多个，将会输出到 shared-xxx 文件中，其他依赖将会对该包进行引入 \n       shared1: ['react', 'react-dom']\n     },\n     output: {\n       // 使用占位符：name 为上面的 index 和 main\n       filename: '[name]-bundle.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n     },\n   }\n   ```\n\n   \n\n2. 防止重复：使用 Entry Dependencies 或 SplitChunksPlugin 去重和分离代码\n\n3. 动态导入：通过模块的内联函数调用来分离代码\n\n   通过使用 import 函数 `import('xxx.js').then(() => {{}})` \n\n   当使用 import 函数时，then 中可以直接拿到导入文件的 export 对象，获取导出 default 对象，可以通过 \n\n   ```js\n   import('xxx.js').then(res => {\n     // 获取默认导出对象\n     res.default()\n     // 获取导出对象\n     res.obj\n   })\n   ```\n\n通过魔法注释修改打包后的文件名：\n\n```js\n// a 代表打包后的文件名，此名称替换 name 字段\nimport(/* webpackChunkName: 'a' */'./ts/a').then(getResult => {\n  console.log(getResult('$123'))\n  console.log(getResult('234'))\n})\n```\n\nwebpack 配置\n\n```js\nmodule.exports = {\n  output: {\n    filename: '[name]-bundle.js',\n    chunkFilename: '[name]_chunk.js',\n    // chunkFilename: '[id]_[name]_chunk.js', // id 为文件路径，文件名使用 _ 分割的字符串\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build'),\n    clean: true, // when rebuild, the output dir will be cleaned\n  },\n}\n```\n\n通过配置 webpack 优化选项，设置分包方式\n\n```js\nmodule.exports = {\n  optimization: {\n    // natural: 按照数字的顺序使用 id\n    // named: development 下的默认值，文件路径使用 _ 分割\n    // deterministic: 确定的，在不同的编译中不变的短数字 id\n    chunkIds: 'deterministic',\n    splitChunks: {\n      chunks: 'all', // default：async\n      maxSize: 20000, // 20kb 拆分后的包最大大小，可能会大于最大值，由于一个函数或类可能很大\n      minSize: 10, // 拆分后的包最小大小\n      cacheGroups: { // 自定义拆包\n        vendors: {\n          // test: /node_modules/, // 匹配路径中包含该字符串的\n          test: /[\\\\/]node_modules[\\\\/]/, // 匹配路径中包含 /node_modules/ 或者 \\node_modules\\\n          filename: '[name]_vendors.js'\n        },\n        utils: { // 当编写的文件小于 minSize 时将不会被拆分\n          test: /utils/,\n          filename: '[name]_utils.js'\n        }\n      }\n    }\n  },\n}\n```\n\nchunIds 将会指定打包后文件的名字，当设置 natural 时，当导入文件发生变化时，不利于浏览器缓存，导致重新加载\n\n- 在开发中，推荐使用 named\n- 在打包过程中，推荐使用 deterministic\n\n\n\n### Prefetch 和 Preload\n\n在声明 import 时，使用内置指令，告知浏览器\n\n- prefetch（预获取）：将来某些导航下可能需要的资源\n- preload（预加载）：当前导航下可能需要的资源\n\n于 prefetch 指令相比，preload 指令由许多不同之处\n\n- preload chunk 会在父 chunk 加载时，以并行方式开始加载，prefetch 会在父 chunk 加载结束后开始加载\n- preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载\n- preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻\n\n```js\nimport(\n  /* webpackChunkName: 'a' */\n  /* webpackPreload: true */ // 设置预加载\n  './ts/a').then(getResult => {\n  console.log(getResult('$123'))\n  console.log(getResult('234'))\n})\n```\n\n\n\n### Shimming\n\nshimming 是一个概念，是某一类功能的统称：\n\n- shimming 翻译过来我们称之为 垫片，相当于给我们的代码填充一些垫片来处理一些问题\n- 比如我们现在以来一个第三方的库，这个第三方的库本身依赖 lodash，但是默认没有对 lodash 进行导入（认为全局存在 lodash），那么我们就可以通过 ProvidePlugin 来实现 shimming 的效果\n\nwebpack 并不推荐随意的使用 shimming\n\n- webpack 背后的整个理念是使前端开发更加模块化\n- 也就是说，需要编写具有封闭性的，不存在隐含依赖（比如全局变量）的彼此隔离的模块\n\n```js\nmodule.exports = {\n  plugins: [\n    new ProvidePlugin({\n      // 相当于对全局使用 import ReactDom from 'react-dom/client'\n      // ReactDom: 'react-dom/client',\n      // 相当于对全局使用 import { createRoot } from 'react-dom/client\n      createRoot: ['react-dom/client', 'createRoot']\n    })\n  ],\n}\n```\n\n\n\n### 对 CSS 文件进行单独提取\n\n提取 css 需要安装对应的依赖：`npm install mini-css-extract-plugin -D` \n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        \n        use: [\n          // 'style-loader', // style-loader 将会通过 js 在 html 插入 style 标签，并将相应的样式填入（开发阶段）\n          MiniCssExtractPlugin.loader, // 提取到单独的 css 文件中，通过 link 进行引入（生产阶段）\n          'css-loader'\n        ], // loader 将会从后往前进行加载\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    }),\n    new MiniCssExtractPlugin({\n      // 对打包后的文件名字，如下打包将会放入 css 文件夹中\n      filename: 'css/[name]-css.css',\n      chunkFilename: 'css/[name].css', // 分包后的包文件名\n    })\n  ],\n}\n```\n\n\n\n### Hash、ContentHash、ChunkHash\n\n在给打包的文件进行命名的时候，会使用 placeholder，placeholder 中有几个比较常用的属性\n\nhash 本身使通过 MD4 的散列函数处理后，生成一个 128 位的 hash 值（32 个十六进制）\n\n- fullhash：当某个文件发生改变时，所有文件的 hash 值都会重新生成，且一样\n  - hash 值的生成和整个项目有关系\n  - 当存在两个入口文件 index.js 和 main.js 时，他们分别会输出到不同的 bundle.js 文件中，并且在文件名称中我们有使用 hash\n  - 这个时候，如果修改了 index.js 文件中的内容，那么 hash 会发生变化，意味着两个文件的名称都会发生变化\n- chunkhash：当某个文件发生改变时，只有改变的文件 hash 值会重新生成\n  - 可以有效解决上面的问题，他会根据不同的入口进行解析来生成 hash 值\n  - 比如修改了 index.js，那么 main.js 的 chunkhash 是不会发生改变的\n  - chunkhash 根据不同的入口文件(entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。当某个文件内容发生变动时，再次执行打包，只有该文件以及依赖该文件的文件的打包结果 hash 值会发生改变\n- contenthash：表示生成的文件 hash 名称，只和内容有关（推荐）\n  - 比如我们的 index.js 引入了一个 style.css，style.css 有被抽取到一个独立的 css 文件\n  - 这个 css 文件在命名时，如果我们使用的是 chunkhash，那么当 index.js 文件的内容发生变化时，css 文件的命名也会发生变化\n  - 这个时候我们可以使用 contenthash \n\n### DLL 库\n\nDLL 全程是动态链接库（Dynamic Link Library）\n\n- 它指的是我们可以共享，并且不经常改变的代码，抽取称一个共享的库\n- 这个库在之后编译的过程中，会被引入到其他项目的代码中\n\n使用过程：\n\n1. 打包 DLL 库\n2. 项目中引入 DLL 库\n\n现在已经不再使用，移除原因：webpack 4 已经提供很好的性能，没有必要再花费时间去维护 DLL\n\n### Terser\n\n- Terser 是一个 JavaScript 的解析（Parser）、Mangler（绞肉机）、Compressor（压缩机） 的工具集\n\n- 早期我们会使用 uglify-js 来压缩、丑化我们的 JavaScript 代码，但是目前已经不再维护，并且不支持 ES6+ 的语法\n- Terser 是从 uglify-es fork 过来的，并且保留了他原来的大部分 API 以及适配 uglify-es 和 uglify-js@3 等\n\n#### 命令行使用方式\n\n```bash\nterser [filename] -o [outputfilename] -c [arguments] -m [arguments]\n```\n\n-c 表示压缩（compress）\n\n- arrows：class 或 object 中的函数，转换成箭头函数\n- arguments：将函数中使用的 arguments[index] 转成对应的形参名称\n- dead_code：移除不可达的代码（tree shaking）\n\n```bash\nnpx terser a.js -o a.min.js -c arrows=true,arguments=true,dead_code=true\n```\n\n优化前代码\n\n```js\nfunction test(name1, name2) {\n  console.log(name1, name2)\n  console.log(arguments[0], arguments[1])\n}\n\ntest('123', '234')\n\nconst obj = {\n  bar() {\n    return 'bar'\n  }\n}\n\nclass Person {\n  name = 'zhangsan'\n  getName() {\n    return 'lisi'\n  }\n}\n\nif (false) {\n  console.log('false')\n}\n```\n\n优化后代码\n\n```js\nfunction test(name1,name2){console.log(name1,name2),console.log(name1,name2)}test(\"123\",\"234\");const obj={bar:()=>\"bar\"};class Person{name=\"zhangsan\";getName(){return\"lisi\"}}\n```\n\n-m 选项\n\n- top_level：优化顶层所有变量名\n- keep_fnames：保持函数原名\n\n- keep_classnames：保持原类名\n\n```bash\nnpx terser .\\src\\main.js -o main.min.js -c arrows=true,arguments=true,dead_code=true -m toplevel=true,keep_fnames=true\n```\n\n优化后代码\n\n```js\nfunction test(n,s){console.log(n,s),console.log(n,s)}test(\"123\",\"234\");const n={bar:()=>\"bar\"};class s{name=\"zhangsan\";getName(){return\"lisi\"}}\n```\n\n#### 在 webpack 中配置 terser\n\n- 在 webpack 中有一个 minimizer 属性，在 production 模式下，默认就是使用 TerserPlugin 来处理我们的代码的\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    filename: 'js/[contenthash:10]-[name].js',\n    path: path.resolve(__dirname, './build'),\n    clean: true\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        // 屏蔽第三方库中的注释\n        extractComments: false,\n        // 使用多进程并发提高构建速度，默认值是 true\n        // 并发运行的默认数量是 os.cpu().length - 1\n        // 我们也可以设置自己的个数，使用默认即可\n        parallel: true,\n        terserOptions: {\n          compress: {\n            // 配置函数中使用 arguments 进行优化\n            arguments: true,\n            // 未被引用的代码将被删除\n            unused: true\n          },\n          // 配置 Mangler（绞肉机）\n          mangle: true,\n          // 对 mangle 传入的参数\n          keep_fnames: true\n        }\n      })\n    ]\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  }\n}\n```\n\n\n\n### CSS 压缩\n\n需要安装对应的插件\n\n```bash\nnpm install css-minimizer-webpack-plugin -D\n```\n\n- css 压缩通常是去除无用的空格等，它使用的是 cssnano 工具来进行优化、压缩 CSS 也可以单独使用\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst CSSMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    filename: 'js/[contenthash:10]-[name].js',\n    path: path.resolve(__dirname, './build'),\n    clean: true\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CSSMinimizerPlugin()\n    ]\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    }),\n    new MiniCssExtractPlugin({\n      filename: 'style/[name]-[contenthash:10].css'\n    })\n  ]\n}\n```\n\n### webpack 配置文件的拆分\n\n在编写 webpack 配置文件时，可以导出一个函数，并且可以通过 --env 给该函数传入相应的参数\n\n```js\n// common.config.js\nconst path = require('path')\n\nconst commonConfig = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: '[name]-[contenthash:10].js',\n    path: path.resolve(__dirname, '../build')\n  }\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n  } else {\n    console.log('development environment')\n  }\n  return commonConfig\n}\n// package.json\n{\n  \"name\": \"multiply_config\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config ./config/common.config.js --env development\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^5.97.1\",\n    \"webpack-cli\": \"^6.0.1\"\n  }\n}\n```\n\n使用 webpack-merge 插件进行拆分\n\n```js\n// common.config.js\nconst path = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst { merge } = require('webpack-merge')\n\nconst production = require('./production.config')\nconst development = require('./development.config')\n\nconst commonConfig = {\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: 'js/[name]-[contenthash:10].js',\n    path: path.resolve(__dirname, '../build')\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      template: './index.html'\n    })\n  ]\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n    return merge(commonConfig, production)\n  } else {\n    console.log('development environment')\n    return merge(commonConfig, development)\n  }\n}\n// development.config.js\nmodule.exports = {\n  mode: 'development',\n  devtool: 'source-map',\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  },\n}\n// production.config.js\nconst MiniCSSExtractPlugin = require('mini-css-extract-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\nconst CSSMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\n\nmodule.exports = {\n  mode: 'production',\n  devtool: false,\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            arrows: true,\n            arguments: true,\n          },\n          mangle: true,\n          toplevel: true,\n          keep_fnames: true,\n          keep_classnames: true\n        }\n      }),\n      new CSSMinimizerPlugin()\n    ]\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: [MiniCSSExtractPlugin.loader, 'css-loader']\n      }\n    ]\n  },\n  plugins: [\n    new MiniCSSExtractPlugin({\n      filename: 'css/[name]-[contenthash:10].css'\n    })\n  ]\n}\n\n```\n\n\n\n### TreeShaking\n\n通过使用 `optimization.userdExports: true` 联合 terser 进行删除不会使用的代码\n\nwebpack.config.js\n\n```js\nmodule.exports = {\n  mode: 'production',\n  devtool: false,\n  optimization: {\n    minimize: true,\n    // 使用该参数，将会在生成的代码中标注那些函数没被使用\n    // 通过 terser plugin 对标记的代码进行删除\n    // plugin 模式下会自动开启该功能\n    usedExports: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            arrows: true,\n            arguments: true,\n          },\n          mangle: true,\n          toplevel: true,\n          keep_fnames: true,\n          keep_classnames: true\n        }\n      })\n    ]\n  }\n}\n\n```\n\n通过 sideEffects 方式删除多余代码在 package.json 中\n\n```json\n{\n  \"name\": \"multiply_config\",\n  // 告诉 webpack 所有文件都没有副作用，可以删除\n  // \"sideEffects\": false,\n  // 通过数组的方式告诉 webpack 那些文件存在副作用\n  \"sideEffects\": [\n    \"./src/utils/sideEffect.js\",\n    \"*.css\" // 所有 css 将不会被优化删除\n  ],\n  \"main\": \"src/main.js\",\n}\n\n```\n\n在模块中使用类似 `window.a = '123'` 就时副作用代码\n\n#### CSS tree shaking\n\n安装对应依赖：\n\n```bash\nnpm install purgecss-webpack-plugin -D\n```\n\n\n\n### Scope Hosting\n\n由于打包之后的文件每个模块会存在一个单独的作用域，在一个模块中使用另一个模块中的函数等将会涉及跨作用域的问题，从而导致的性能低下。\n\n该配置在 production 模式下是默认开启的\n\n```js\nconst webpack = require('webpack')\n\nmodule.exports = {\n  plugins: [\n    new webpack.optimize.ModuleConcatenationPlugin()\n  ]\n}\n```\n\n\n\n### HTTP 压缩\n\nHTTP 压缩是一种内置在服务器和客户端之间的，以改进传输速度和带宽利用率的方式\n\n1. 第一步，http 数据在服务器发送前就已经被压缩了；（可以在 webpack 中完成）\n\n2. 第二步，兼容的浏览器在向服务器发送请求时，或告知服务器自己支持哪些压缩格式\n\n   ```http\n   GET /encrypted-area HTTP/1.1\n   Host: www.example.com\n   Accept-Encoding: gzip, deflate\n   ```\n\n3. 第三步，服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器\n\n   ```http\n   HTTP/1.1 200 OK\n   Content-Encoding: gzip\n   ```\n\n### Gzip 压缩\n\nwebpack 中相当于是实现了 HTTP 压缩的第一步操作，我们可以使用 CompressionPlugin\n\n- 安装 CompressionPlugin\n\n  ```bash\n  npm install compression-webpack-plugin -D\n  ```\n\n- 使用 CompressionPlugin\n\n  ```js\n  const CompressionPlugin = require('compression-webpack-plugin')\n  \n  module.exports = {\n    plugins: [\n      new CompressionPlugin({\n        test: /\\.(css|js)$/, // 匹配哪些文件将被压缩\n        // threshold: 500, // 设置文件从多大开始压缩\n        minRatio: 0.7, // 至少压缩的比例\n        algorithm: 'gzip' // 采用的压缩算法\n      })\n    ]\n  }\n  ```\n\n### HTML 压缩\n\n```js\nconst path = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst { merge } = require('webpack-merge')\n\nconst production = require('./production.config')\nconst development = require('./development.config')\n\nconst commonConfig = function(isProduction) {\n  return {\n    entry: './src/main.js',\n    output: {\n      clean: true,\n      filename: 'js/[name]-[contenthash:10].js',\n      path: path.resolve(__dirname, '../build')\n    },\n    resolve: {\n      extensions: ['.css', '.js']\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        // 当文件内容发生改变的时候才重新生成\n        cache: true,\n        minify: isProduction ? {\n          // 压缩时移除注释\n          removeComments: true,\n          // 删除空属性，例如 <div class=''></div> => <div></div>\n          removeEmptyAttributes: true,\n          // 移除多以的属性，例如：<input type='text'> => <input>\n          removeRedundantAttributes: true,\n          // 删除空行和空格\n          collapseWhitespace: true,\n          // 压缩内联 css\n          minifyCSS: true,\n          // 压缩内联 js\n          minifyJS: {\n            mangle: {\n              toplevel: true\n            }\n          },\n        } : false,\n        template: './index.html'\n      })\n    ]\n  }\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n    return merge(commonConfig(true), production)\n  } else {\n    console.log('development environment')\n    return merge(commonConfig(false), development)\n  }\n}\n```\n\n### 针对于打包过程进行分析\n\n需要安装 speed-measure-webpack-plugin\n\n```bash\nnpm install speed-measure-webpack-plugin -D\n```\n\n\n\n### 对打包后的文件进行分析\n\n方式一：添加 `--profile --json=stats.json` 将会生成 stats.json 文件，该文件可通过 webpack 的在线分析平台进行分析\n\n```json\n{\n  \"scripts\": {\n    \"build:dev\": \"webpack --config ./config/common.config.js --env development --profile --json=stats.json\",\n    \"build:pro\": \"webpack --config ./config/common.config.js --env production\"\n  },\n}\n```\n\n方式二：使用插件进行分析打包后的文件 `webpack-bundle-analyzer` \n\n```bash\nnpm install webpack-bundle-analyzer -D\n```\n\n在 webpack 中配置该插件\n\n```js\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\n\nmodule.exports = {\n  plugins: [\n    new BundleAnalyzerPlugin()\n  ]\n}\n```\n\n该方式会自动开启一个端口用于展示生成后的文件状态：localhost:8080 \n\n\n\n## Webpack 源码\n\n### createCompiler\n\nwebpack 首先会创建 compiler，然后注册插件\n\n```js\n/**\n * @param {WebpackOptions} rawOptions options object\n * @param {number} [compilerIndex] index of compiler\n * @returns {Compiler} a compiler\n */\nconst createCompiler = (rawOptions, compilerIndex) => {\n\tconst options = getNormalizedWebpackOptions(rawOptions);\n\tapplyWebpackOptionsBaseDefaults(options);\n\tconst compiler = new Compiler(\n\t\t/** @type {string} */ (options.context),\n\t\toptions\n\t);\n\tnew NodeEnvironmentPlugin({\n\t\tinfrastructureLogging: options.infrastructureLogging\n\t}).apply(compiler);\n\tif (Array.isArray(options.plugins)) {\n\t\tfor (const plugin of options.plugins) {\n\t\t\tif (typeof plugin === \"function\") {\n\t\t\t\t// 当插件是一个函数时将会执行这个函数，传入 compiler，并给该函数绑定 compiler\n\t\t\t\t/** @type {WebpackPluginFunction} */\n\t\t\t\t(plugin).call(compiler, compiler);\n\t\t\t} else if (plugin) {\n\t\t\t\t// 当插件时一个对象时，必须存在一个 apply 函数，compiler 将会传入这个函数\n\t\t\t\tplugin.apply(compiler);\n\t\t\t}\n\t\t}\n\t}\n\tconst resolvedDefaultOptions = applyWebpackOptionsDefaults(\n\t\toptions,\n\t\tcompilerIndex\n\t);\n\tif (resolvedDefaultOptions.platform) {\n\t\tcompiler.platform = resolvedDefaultOptions.platform;\n\t}\n\tcompiler.hooks.environment.call();\n\tcompiler.hooks.afterEnvironment.call();\n\tnew WebpackOptionsApply().process(options, compiler);\n\tcompiler.hooks.initialize.call();\n\treturn compiler;\n};\n```\n\n\n\n\n\n### webpack 解析过程\n\n\n\n### 自定义 Loader\n\nLoader 是用于对模块的源代码进行转换（处理），Loader 本质上是一个导出为函数的 Js 模块，Loader  runner 库会调用这个函数，然后将上一个 loader 产生的结果或者资源文件传入进去\n\nwebpack.config.js\n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: '[name]-[contenthash:6].js',\n    path: path.resolve(__dirname, './build')\n  },\n  resolve: {\n    extensions: ['.js']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: [\n          {\n            loader: './loaders/loader04.js',\n            options: {\n              name: 'zhangsan',\n              age: 18\n            }\n          }\n        ]\n      }\n      // {\n      //   test: /\\.js$/,\n      //   use: [\n      //     // 可以使用相对路径，loader 将会从后往前进行加载\n      //     './loaders/loader01.js',\n      //     './loaders/loader02.js',\n      //     './loaders/loader03.js',\n      //   ]\n      // },\n\n      // 如下代码也将会从后往前加载\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader01.js'\n      // },\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader02.js'\n      // },\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader03.js'\n      // }\n    ]\n  }\n}\n```\n\nloader01.js\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  console.log('====================')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### callback 函数\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  // 通过 callback 可以返回信息\n  const callback = this.callback\n  // 当 return 和 callabck 同时存在时，callback 返回的内容将会传递给下一个 loader\n  /**\n   * 参数一： 异常信息\n   * 参数二：返回给下一个 loader 的内容\n   */\n  // callback(null, content + '\\n//aaaaaaaaaaa')\n  setTimeout(() => {\n    // 当将 callback 放到异步函数里面，其返回值将不生效\n    // 其后面的 loader 将不会延迟执行\n    callback(null, content + '\\n//aaaaaaaaaaa')\n  }, 1000)\n\n  console.log('==========2=========')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### async 函数（异步函数）\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  const callabck = this.async()\n  // 通过 async 返回的函数作为异步函数，该 loader 将被视为一个异步 loader\n  setTimeout(() => {\n    // 下一个 loader 的 content 参数将会加上这个 loader 返回的结果，其优先级大于 return，return 返回的东西将不会生效\n    // 其后面的 loader 将会延后执行\n    callabck(null, content + '\\n//3333333')\n  }, 1000)\n  console.log('==========3=========')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### 给 loader 传递参数\n\n```js\nconst { getOptions } = require(\"loader-utils\")\n\nmodule.exports = function(content) {\n  // 方式一：通过 loader-utils （webpack 开发）的库来获取\n  console.log(getOptions(this)) // 现在执行将会报错 TypeError: getOptions is not a function\n  // 方式二：通过 this.getOptions() 函数来获取\n  console.log(this.getOptions()) // { name: 'zhangsan', age: 18 }\n  return content\n}\n```\n\n#### 对传入的参数进行校验\n\n需要使用第三方库的支持\n\n```bash\nnpm install schema-utils -D\n```\n\nloader.js\n\n```js\nconst { validate } = require('schema-utils')\n\nmodule.exports = function(content) {\n  const options = this.getOptions()\n\n  /**\n   * 参数一：校验的规则\n   * 参数二：需要校验的数据\n   */\n  validate({\n    type: \"object\",\n    properties: {\n      \"username\": {\n        type: 'string'\n      },\n      'age': {\n        type: 'number'\n      }\n    }\n  }, options)\n\n  return content\n}\n```\n\n#### markdown loader\n\n```js\nconst { marked } = require('marked')\nconst hljs = require('highlight.js')\n\n\nconst renderer = {\n  code(obj) {\n    /*\n    {\n      type: 'code',\n      raw: '```javascript\\n' +\n        \"const a = '213'\\n\" +\n        'let obj = {\\n' +\n        '  age: 18\\n' +\n        '}\\n' +\n        \"console.log('aaa')\\n\" +\n        '```',\n      lang: 'javascript',\n      text: \"const a = '213'\\nlet obj = {\\n  age: 18\\n}\\nconsole.log('aaa')\"\n    }\n    */\n    console.log(obj)\n    const language = hljs.getLanguage(obj.lang) ? obj.lang : 'plaintext';\n    try {\n      const highlightedCode = hljs.highlight(obj.text, { language }).value;\n      return `<pre><code class=\"hljs ${language}\">${highlightedCode}</code></pre>`;\n    } catch (__) {\n      return `<pre><code class=\"hljs ${language}\">${obj.text}</code></pre>`;\n    }\n  }\n};\n\nmodule.exports = function (content) {\n  marked.use({ renderer: renderer })\n  const htmlContent = marked(content)\n  const moduleContent = `var md = \\`${htmlContent}\\`; export default md`\n\n  return moduleContent\n}\n```\n\n\n\n### 自定义插件\n\nwebpack 中的compiler 和 compilation 通过注入插件的方式，来监听 webpack 的声明周期，其创建了 Tapable 库中的各种 Hook 的实例\n\n1. webpack 函数中的 createCompiler 方法中，注册了所有的插件\n2. 在注册插件时，会调用插件函数或者插件对象的 apply 方法\n3. 插件方法会接受 compiler 对象，我们可以通过 compiler 对象来注册 Hook 事件\n4. 某些插件也会传入一个 compilation 的对象，我们也可以监听 compilation 的 hook 事件\n\n#### Tapable\n\nTapable 是管理着需要的 Hook，这些 Hook 可以被应用到我们的插件中\n\n- bail：当有返回值时，就不会执行后续的事件触发了\n- loop：当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容时，就退出事件\n- waterfall：当返回值不为 undefined 时，会将这次放回的结果作为下次事件的第一个参数\n- parallel：并行，会同时执行事件处理回调结束，不会等到这个事件执行结束才执行下一次事件处理回调\n- series：串行，会等待上一次异步的 Hook\n\n官方提供的 Hook\n\n- 同步 Hook：SyncHook、SyncBailHook、SyncWatefallHook、SyncLoopHook\n- 异步 Hook，两个事件处理回调，不会等待上一次处理回调结果后再执行下一次回调\n  - Paralle（并行）：AsyncPralleHook、AsyncParalleBailHook\n  - Series（串行）：AsyncSeriesHook、AsyncSeriesBailHook、AsyncSeriesWaterfallHook\n\n安装 tapable 库\n\n```bash\nnpm install tapable -D\n```\n\n基本使用\n\n```js\nconst { SyncHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      syncHook: new SyncHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.syncHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n    })\n\n    this.hooks.syncHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.syncHook.call('zhangsan', 18)\n```\n\nbail\n\n```js\nconst { SyncBailHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      bailHook: new SyncBailHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.bailHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 当存在返回值时，后续的回调将不会执行\n      return 123\n    })\n\n    this.hooks.bailHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.bailHook.call('zhangsan', 18)\n```\n\nloop\n\n```js\nconst { SyncLoopHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      loopHook: new SyncLoopHook(['name', 'age'])\n    }\n\n    let count = 3\n\n    // 使用 hook 监听事件\n    this.hooks.loopHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 当不存在返回值或者返回值为 undefined 时将会中断循环\n      return count -- === 0 ? undefined : count\n    })\n\n    this.hooks.loopHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.loopHook.call('zhangsan', 18)\n```\n\nwaterfall\n\n```js\nconst { SyncWaterfallHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      waterfallHook: new SyncWaterfallHook(['name', 'age'])\n    }\n\n    let count = 3\n\n    // 使用 hook 监听事件\n    this.hooks.waterfallHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 返回值不为 undefined 时，将作为下一个回调函数第一个参数\n      return { gender: 'male' }\n    })\n\n    this.hooks.waterfallHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age) // hook1 execute 2 { gender: 'male' } 18\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.waterfallHook.call('zhangsan', 18)\n```\n\nparallel\n\n```js\nconst { AsyncParallelHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      parallelHook: new AsyncParallelHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.parallelHook.tapAsync('event1', (name, age) => {\n      setTimeout(() => {\n        console.log('hook1 execute', name, age)\n      }, 1000)\n    })\n\n    this.hooks.parallelHook.tapAsync('event2', (name, age) => {\n      setTimeout(() => {\n        console.log('hook1 execute 2', name, age)\n      }, 900)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.parallelHook.callAsync('zhangsan', 18)\n// 输出结果\n// hook1 execute 2 zhangsan 18\n// hook1 execute zhangsan 18\n```\n\nseries\n\n```js\nconst { AsyncSeriesHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      serieslHook: new AsyncSeriesHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.serieslHook.tapAsync('event1', (name, age, callback) => {\n      setTimeout(() => {\n        console.log('hook1 execute', name, age)\n        // 调用 callback 下面的任务才会执行\n        callback()\n      }, 1000)\n    })\n\n    this.hooks.serieslHook.tapAsync('event2', (name, age, callback) => {\n      setTimeout(() => {\n        console.log('hook1 execute 2', name, age)\n        callback()\n      }, 900)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.serieslHook.callAsync('zhangsan', 18, () => {\n  console.log('all tasks finished')\n})\n// 输出结果\n// hook1 execute zhangsan 18\n// hook1 execute 2 zhangsan 18\n// all tasks finished\n```\n\n\n\n## Babel\n\n> babel 是一个工具链，主要用于就浏览器或者环境中的 ECMAScript2015 + 代码转化为向后兼容版本的 JavaScript\n>\n> - 包括：语法转换、源代码转换、Polyfill 实现目标环境缺少的功能等\n> - 需下载 @babel/core @babel/cli\n\n在使用 babel 命令时可以设置 plugins 参数，将其转换为使用该插件后的代码：\n\n转化箭头函数为普通函数\n\n```bash\n# transform arrow function to function\nnpm install @babel/plugin-transform-arrow-functions -D\nnpx babel src --out-dir dist --plugin@babel/plugin-transform-arrow-functions\n```\n\n转化块级作用域\n\n```bash\n# transform block scoping\nnpm install @babel/plugin-transform-block-scoping -D\nnpm babel src --out-dir dist --plugin@babel/plugin-transform-block-scoping,@babel/plugin-transform-arrow-functions\n```\n\n### 解析原理\n\nhttps://github.com/jamiebuilds/the-super-tiny-compiler\n\n![1735832299456](.\\imgs\\babel)\n\n1. 解析阶段（Parsing）\n2. 转换阶段（Transformation）\n3. 生成阶段（Code Generation）\n\n\n\n### 预设\n\n安装 @babel/preset-env\n\n```bash\nnpm install @babel/preset-env -D\n\nnpx babel ./src --out-dir ./dist --presets=@babel/preset-env\n```\n\n### babel 配置文件\n\n可以将 babel 的配置信息编写到一个文件中\n\n- babel.config.json（或 .js, .cjs, .mjs）文件（推荐）\n  - 可以直接作用于 Monorepos 项目的子包，更加推荐\n- .babelrc.json （或 .babelrc, .js, .cjs, .mjs）文件\n  - 早期使用较多的配置方案，但是对于配置 Monorepos 项目是比较麻烦的\n\n```js\n// babel.config.js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      \n    }]\n  ]\n}\n```\n\n\n\n\n\n## Browserslist 插件\n\nBrowserslist 可以在不同的的前端工具之间，共享目标浏览器和 Node.js 版本的配置\n\n条件查询使用的是 caiuse-lite 的工具，这个工具的数据来自于 caniuse 的网站上\n\nbrowserslist 编写规则：\n\n- defaults：browserslist 的默认浏览器（>0.5%, last 2 versions, Firefox ESR, not dead）\n- 5%：通过全局使用情况统计信息选择的浏览器版本，>=, < 和 <=\n\ndead：24 个月内没有官方支持或更新的浏览器\n\nlast 2 versions：每个浏览器的最后两个版本\n\n### 使用方式\n\n1. 可以在 package.json 文件中编写\n\n```json\n\"browserlists\": [\n  \"last 2 versions\",\n  \"not dead\",\n  \"> 0.2%\"\n]\n```\n\n2. 在 .browserslistrc 文件中编写（最常使用）\n   1. 该配置将会在多个工具之间进行共享（postcss/babel）\n\n```markdown\n> 0.2%\nlast 2 versions\nnot dead\n```\n\n3. 可以在 webpack.config.js 文件中配置（不常用）\n\n```js\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              ['@babel/preset-env', {\n                targets: '>5%', // 将会覆盖 browserslist 文件中的内容\n              }]\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n\n\n## Polyfill\n\n将一些高版本 js 代码对应于低版本中不存在的 API（Promise，string.includes 等函数）采用补丁的方式进行替换\n\n安装对应依赖（开发和生产环境都需要依赖）\n\n```bash\nnpm install core-js regenerator-runtime\n```\n\nuseBuiltIns 属性的可选值：\n\n1. false：\n   - 打包后的文件不适用 polyfill 来进行适配\n   - 并且这个时候是不需要设置 corejs 属性的\n2. usage：\n   - 会根据源代码中出现的语言特性，自动检测所需要的 polyfill\n   - 这样可以确保最终包离的 polyfill 数量的最小化，打包的包相对较小\n   - 可以设置 corejs 属性来确定使用的 corejs 的版本\n3. entry\n   - 如果我们依赖的某一个库本身使用了 polyfill 的特性，但是因为我们使用的是 usage，所以之后用户浏览器可能会报错，如果担心这种情况，可以使用 entry\n   - 并且需要在入口文件中添加 `import 'core-js/stable'; import 'regenerator-runtime/runtime';` \n   - 这样做会根据 browserslist 目标导入所有的 polyfill，但是对应的包会很大\n\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      corejs: 3,\n      useBuiltIns: 'entry' // 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】\n    }]\n  ]\n}\n```\n\n入口文件 main.js\n\n```js\nimport 'core-js/stable'\nimport 'regenerator-runtime/runtime'\n\n// ...\n```\n\n\n\n## CDN 服务器\n\nCDN 称之为内容分发网络（Content Delivery Network 或 Content Distribution Network）\n\n- 它是指通过相互连接的网络系统，利用最靠近每个用户的服务器\n- 更快、更可靠的将音乐、图片、视频、应用程序以及其他文件发送给用户\n- 来提供高性能、可扩展性及低成本的网络内容传递给用户\n\n在开发中，我们使用 CDN 主要是两种方式\n\n1. 打包所有的静态资源，放到 CDN 服务器，用户所有资源都是通过 CDN 服务器加载的\n\n   ```js\n   module.exports = {\n     output: {\n       filename: '[name]-bundle.js',\n       chunkFilename: '[name]_chunk.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n       publicPath: 'https://xxxcdn.com', // 设置 CDN 服务器域名\n     },\n   }\n   ```\n\n   \n\n2. 一些第三方资源放到 CDN 服务器上\n\n   国内 CDN 平台 [BOOTCDN](https://www.bootcdn.cn/) \n\n   在 模板 index 中直接引入需要从 CDN 引用的第三方库\n\n   ```html\n     <script src=\"https://cdn.bootcdn.net/ajax/libs/react/18.3.1/umd/react.production.min.js\"></script>\n   ```\n\n   在 webpack 中配置相应从 CDN 引用的包\n\n   ```js\n   module.exports = {\n     externals: {\n       // key: 排除框架的名称，import xxx from 'key'\n       // value：从 CDN 请求下来的 js 中提供的对应名称\n       react: 'React',\n       // react_dom: 'ReactDom'\n     },\n   }\n   ```\n\n\n\n## Gulp\n\ngulp 的核心理念是 task runner\n\n- 可以定义自己的一系列任务，等待任务被执行\n- 基于文件 stream 的构建流\n- 我们可以使用 gulp 的插件体系来完成某些任务\n\nwebpack 的核心理念是 module bundler\n\n- webpack 是一个模块化的打包工具\n- 可以使用各种各样的 loader 来加载不同的模块\n- 可以使用各种各样的插件在 webpack 打包的生命周期完成其他任务\n\ngulp 相对于 webpack 的优缺点\n\n- gulp 相对于 webpack 思想更加的简单、医用，更适合编写一些自动化的任务\n- 但是目前对于大型项目（Vue、React、Angular）并不会使用 gulp 来构建，比如默认 gulp 是不支持模块化的\n\n### 基本使用\n\n安装对应依赖\n\n```bash\nnpm install gulp\n```\n\n编写 gulpfile 文件\n\n```js\nconst gulp = require('gulp')\n\n\n// 使用 npx gulp foo1 执行\nconst foo1 = (callback) => {\n  console.log('task 1 finished')\n  // 需要调用 callback 才能知道该任务已完成\n  callback()\n}\n\n// 执行方式二\ngulp.task('foo2', (callback) => {\n  console.log('task 2 finished')\n  callback()\n})\n\nmodule.exports = {\n  foo1\n}\n\n// 默认任务 通过 npx gulp\nmodule.exports.default = (callback) => {\n  console.log('default task finished')\n  callback()\n}\n```\n\n### 创建 gulp 任务\n\n每个 gulp 任务都是一个异步的 JavaScript 代码\n\n- 此函数可以接收一个 callback 作为参数，调用 callback 函数，那么该任务会结束\n- 或者是一个返回 stream、promise、event emitter、child process 或 observable 类型的函数\n\n任务可以是 public 或者 private 类型的\n\n- 公开任务（public tasks）从 gulpfile 中被导出（export），可以通过 gulp 命令直接调用\n- 私有任务（private tasks）被设计为在内部使用，通常作为 series() 或 parallel() 组合的组成部分\n\n*在 gulp 4 之前，注册任务时需要通过 gulp.task 的方式进行注册，也即上面的方式二*\n\n### 多任务\n\n```js\nconst { series, parallel } = require('gulp')\n\n\n// 使用 npx gulp foo1 执行\nconst foo1 = (callback) => {\n  setTimeout(() => {\n    console.log('foo1')\n    callback()\n  }, 3000)\n}\n\nconst foo2 = (callback) => {\n  setTimeout(() => {\n    console.log('foo2')\n    callback()\n  }, 2000)\n}\n\nconst foo3 = (callback) => {\n  setTimeout(() => {\n    console.log('foo3')\n    callback()\n  }, 1000)\n}\n// 任务会依次执行\nconst seriesTask = series(foo1, foo2, foo3)\n// 任务将并行执行\nconst parallelTask = parallel(foo1, foo2, foo3)\n\nmodule.exports = {\n  seriesTask,\n  parallelTask\n}\n```\n\n### 读写文件\n\ngulp 暴露了 src 和 dest 函数，用于处理计算机存放的文件\n\n- src 接收一个正则路径，并从文件系统中读取文件然后生成一个 Node 流（Stream），它将所有匹配的文件放入内存中并通过读取流（Stream进行处理）\n- 由 src 产生的流（Stream）应当从任务（task 函数）中返回并发出异步完成的信号\n- dest 接收一个输出目录作为参数，并且它还会产生一个 Node 流（Stream），通过该流将文件内容输出到文件中\n\npipe 方法接收一个转换流（Transform stream）或 可写流（Writable Stream）\n\n转换流或可写流，拿到数据之后可以对数据进行操作，再次传递给下一个转换流或可写流\n\n```js\nconst { src, dest } = require('gulp')\n\nconst copyFile = () => {\n  return src('./src/**').pipe(dest('./dist'))\n}\n\nmodule.exports = {\n  copyFile\n}\n```\n\n### 对 Js 文件进行转化和压缩\n\n```js\nconst { src, dest, watch } = require('gulp')\nconst babel = require('gulp-babel')\nconst terser = require('gulp-terser')\n\nconst zipFile = () => {\n  return src('./src/**')\n    .pipe(babel({ presets: ['@babel/preset-env']}))\n    // .pipe(terser({ mangle: { toplevel: true }}))\n    .pipe(terser({ toplevel: true }))\n    .pipe(dest('./dist'))\n}\n\n// 设置自动监听\nwatch('./src/**/*js', zipFile)\n\nmodule.exports = {\n  zipFile\n}\n```\n\n### 搭建项目\n\n安装依赖\n\n```bash\nnpm install gulp-babel gulp-terser gulp-htmlmin gulp-less gulp-inject -D\n```\n\nhtml 文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n  <!-- inject:css -->\n  <!-- endinject -->\n</head>\n<body>\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\ngulpfile.js\n\n```js\nconst { src, dest, series, parallel, watch } = require('gulp')\n\nconst babel = require('gulp-babel')\nconst terser = require('gulp-terser')\n\nconst less = require('gulp-less')\nconst inject = require('gulp-inject')\n\nconst htmlmin = require('gulp-htmlmin')\nconst browserSync = require('browser-sync')\n\nconst jsTask = () => {\n  return src('./src/**/*.js')\n    .pipe(babel({ presets: ['@babel/preset-env'] }))\n    .pipe(terser({ mangle: { toplevel: true }}))\n    .pipe(dest('./dist/js'))\n}\n\nconst cssTask = () => {\n  return src('./src/**/*.less')\n    .pipe(less())\n    .pipe(dest('./dist/css'))\n}\n\nconst htmlTask = () => {\n  return src('./src/**/*.html')\n    .pipe(htmlmin())\n    .pipe(dest('./dist'))\n}\n\n// 注入时使用相对路径设置 relative 为 true\nconst injectTask = () => {\n  return src('./dist/**/*.html')\n    .pipe(inject(src(['./dist/**/*.js', './dist/**/*.css']), { relative: true}))\n    .pipe(dest('./dist'))\n}\n\n// 开启本地服务\nconst bs = browserSync.create()\nconst serveTask = () => {\n  bs.init({\n    port: 8000,\n    open: true,\n    files: './dist/*',\n    server: {\n      baseDir: './dist'\n    }\n  })\n}\n\nconst parallelTask = parallel(jsTask, cssTask, htmlTask)\nconst buildTask = series(parallelTask, injectTask)\n\nwatch('./src/**/*', buildTask)\n\nconst serve = series(buildTask, serveTask)\n\nmodule.exports = {\n  serve,\n  buildTask\n}\nmodule.exports.default = buildTask\n```\n\n\n\n## Rollup\n\nRollup 是一个 JavaScript 的模块化打包工具，可以帮助我们编译小的代码到一个大的，复杂的代码中，比如一个库一个应用程序\n\n### rollup VS webpack\n\n- rollup 是一个模块化的打包工具，但是 rollup 主要是针对 ESModule 进行打包的\n- 另外 webpack 通常可以通过各种 loader 处理各样的文件，以及他们之间的依赖关系\n- rollup 更多时候是专注于处理 JavaScript 代码的（当然也可以是 css、font、vue 等文件）\n- 另外 rollup 的配置和理念相对于 webpack 来说，更加的简洁和容易理解\n- 在早期 webpack 不支持 tree shaking 时，rollup 具备更强的优势\n\n通常在实际项目开发过程中，我们都会使用 webpack（比如 react、angular 项目都是基于 webpack）\n\n在对库文件进行打包时，我们通常会使用 rollup （比如 vue、react、dayjs 源码本身都是基于 rollup的，vite 底层使用 rollup）\n\n### rollup 基本使用\n\n安装 rollup\n\n```bash\nnpm install rollup -D\n```\n\n使用命令进行打包\n\n```bash\n# 打包为 node 环境\nnpx rollup ./src/main.js -f cjs -o dist/bundle.cjs\n# 打包为浏览器环境\nnpx rollup ./src/main.js -f iife -o dist/bundle.cjs\n# 打包为 amd 环境\nnpx rollup ./src/main.js -f cjs -o dist/bundle.cjs\n# 打包为所有环境都支持，此时必须要指定名字\nnpx rollup ./src/main.js -f umd --name foo -o dist/bundle.cjs\n```\n\n原始代码内容\n\n```js\nconst foo = (name) => {\n  console.log('hello', name)\n}\n\nfoo('zhangsan')\n\nexport { foo }\n```\n\n\n\n打包后的代码结构\n\n```js\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = {}));\n})(this, (function (exports) { 'use strict';\n\n  const foo = (name) => {\n    console.log('hello', name);\n  };\n\n  foo('zhangsan');\n\n  exports.foo = foo;\n\n}));\n\n// 对上述代码的解析\n// 打包后的代码定义了一个函数，该函数接收两个参数 global 和 factory，factory 为函数\nconst foo = function (global, factory) {\n  // 判断是否存在 exports，并且 module 存在，则将 exports 传入\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  // 在浏览器中会存在 global 和 globalThis 变量指向 window，相当于传入 factory为 window.foo = {}\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = {}));\n}\n\n// 将 this 和 另外一个函数 传入该函数，执行该函数后，将会对全局对象绑定对应的属性\nfoo(this, (function (exports) { 'use strict';\n\n  const foo = (name) => {\n    console.log('hello', name);\n  };\n\n  foo('zhangsan');\n\n  // exports 将为对应环境中的 this（浏览器环境中 window，globalThis，this） 或 exports（node 环境中）\n  exports.foo = foo;\n\n}))\n```\n\n编写相应配置文件，通过 `npx rollup -c` 执行\n\n```js\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './dist/bundle.umd.js'\n  }\n}\n```\n\n对项目进行打包\n\n一般情况下不需要打包 node_modules 文件中的内容，用户可以通过依赖进行安装\n\n```js\n// 由于 loadsh 是通过 commonjs 导出的，默认情况下，rollup 不会对其进行打包\n// 需要安装 @rollup/plugin-commonjs 解决 使用 esmodule 方式导入 commonjs 包\n// 安装 @rollup/plugin-node-resolve 解决 打包 node_modules 文件中的内容\n\nimport _ from 'loadsh'\n\nconst foo = (name) => {\n  console.log(_.join([1, 2, 3]))\n  console.log('hello', name)\n}\n\nfoo('zhangsan')\n\nexport { foo }\n```\n\nrollup.config.js\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    nodeResolve()\n  ]\n}\n```\n\n对代码进行转化并压缩\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    // nodeResolve(),\n    babel({\n      presets: ['@babel/preset-env']\n    }),\n    terser()\n  ]\n}\n```\n\n### 处理 CSS 文件\n\n安装对应的插件\n\n```bash\nnpm install rollup-plugin-postcss postcss-preset-env -D\n```\n\n配置 rollup\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\nconst postcss = require('rollup-plugin-postcss')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    // nodeResolve(),\n    babel({\n      presets: ['@babel/preset-env']\n    }),\n    terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    })\n  ]\n}\n```\n\n### 对 vue 进行打包\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nconst postcss = require('rollup-plugin-postcss')\nconst vue = require('rollup-plugin-vue')\n// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development\n// 所以需要执行该变量 process.env.NODE_ENV\nconst replace = require('rollup-plugin-replace')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_',\n      vue: 'vue'\n    }\n  },\n  plugins: [\n    // commonjs(),\n    nodeResolve(),\n    babel({\n      babelHelpers: 'bundled',\n      exclude: /node_modules/,\n      presets: ['@babel/preset-env']\n    }),\n    // terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    }),\n    vue(),\n    replace({\n      'process.env.NODE_ENV': '\"development\"'\n    })\n  ]\n}\n```\n\n### 搭建本地开发服务\n\n安装对应依赖\n\n```bash\n# 安装 本地服务\nnpm install rollup-plugin-server -D\n# 监听文件发生变化重新打包\nnpm install rollup-plugin-livereload -D\n```\n\n配置环境\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nconst html = require('@rollup/plugin-html')\nconst postcss = require('rollup-plugin-postcss')\nconst vue = require('rollup-plugin-vue')\n// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development\n// 所以需要执行该变量 process.env.NODE_ENV\nconst replace = require('rollup-plugin-replace')\n\nconst server = require('rollup-plugin-server')\nconst livereload = require('rollup-plugin-livereload') \n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_',\n      vue: 'vue'\n    }\n  },\n  plugins: [\n    // commonjs(),\n    nodeResolve(),\n    babel({\n      babelHelpers: 'bundled',\n      exclude: /node_modules/,\n      presets: ['@babel/preset-env']\n    }),\n    // terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    }),\n    // html({\n    //   include: './index.html'\n    // }),\n    vue(),\n    replace({\n      'process.env.NODE_ENV': '\"development\"'\n    }),\n    server({\n      port: 8000,\n      contentDir: '.'\n    }),\n    livereload()\n  ]\n}\n```\n\n执行命令\n\n```bash\n# -w: watch\nnpx rollup -c -w\n```\n\n在执行 rollup 命令时，可以指定参数\n\n```bash\n# 通过设定 environment 设置环境变量，可以在 rollup.config.js 文件中 通过 process.env.NODE_ENV 拿到该变量\nnpx rollup --environment NODE_ENV:production\nnpx rollup --environment NODE_ENV:development\n```\n\n\n\n## Vite\n\n由于现在浏览器支持 esmodule 模块化的加载，在开发时，可以直接使用这个特性。但是仍存在如下的问题：\n\n- 在加载文件时，后缀名不能省略\n- 加载别的文件时，该文件的依赖也将会在浏览器中进行下载，导致浏览器下载了很多个文件，占用了很大的带宽\n- 不支持 ts、vue 等代码文件\n\nvite 对 css、ts 原生支持。对于 less 的使用，只需要安装 less 插件即可\n\n\n\n### 配置对 vue 的支持\n\n需要安装配置 vue 的插件 @vite/plugin-vue\n\n```bash\nnpm install @vite/plugin-vue\n```\n\n配置 vite\n\n```js\nconst { defineConfig } = require('vite')\nconst vue = require('@vitejs/plugin-vue')\n\nmodule.exports = defineConfig({\n  plugins: [\n    vue()\n  ]\n})\n```\n\n\n\n## 自定义 CLI\n\n在项目根目录下创建 bin 文件夹，文件夹里面存放 js 代码，在文件头部需要标明执行该文件的环境路径\n\n```js\n#!D:/Dahui/Environment/Node/node\n\nconsole.log('test')\n```\n\n创建 package.json 文件，并配置 bin ，其中 demo01 表示执行的命令\n\n```json\n{\n  \"name\": \"cli\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"demo01\": \"bin/test.js\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\"\n}\n```\n\n通过 npm link 命令创建一个连接，该命令将会将配置的 bin 生成一个 demo01（linux），demo01.cmd（cmd） 和 demo01.ps1（powershell） 文件，该文件被存放到 node_global 文件夹中，用于执行该命令\n\n```bash\nnpm link\n```\n\n通过使用 commander 工具来解析传入的参数\n\n```js\n#!D:/Dahui/Environment/Node/node\n\nconst { program } = require('commander')\n\n// console.log('test')\n\n/**\n * [\n *   'D:\\\\Dahui\\\\Environment\\\\Node\\\\node.exe', // node 路径\n *   'D:\\\\Dahui\\\\Environment\\\\Node\\\\node-v18.14.0-win-x64\\\\node_global\\\\node_modules\\\\cli\\\\bin\\\\test.js', // 脚本路径\n *   '--version' // 参数\n * ]\n */\n// console.log(process.argv)\n\nconst version = require('../package.json').version\n\nprogram.version(version, '-V, --version')\n// <valuename> 用于传值 valuename 用于表明传值到哪个属性中\nprogram.option('-d, --destination <destination>', 'where to put the result')\n\n// 监听 --help 参数，当输入该参数将会执行里面的回调函数\nprogram.on('--help', () => {\n  console.log('')\n  console.log('others')\n  console.log('  1111111')\n  console.log('  2222222')\n})\n\nprogram.parse(process.argv)\n\n// 获取对 destination 传入的值\nconsole.log(program.opts().destination)\n```\n\n### 封装自定义命令，并从远程仓库下载\n\n```js\n#!/usr/bin/env node\n\nconst { program } = require('commander')\nconst { useHelp } = require('./core/help')\n\nuseHelp()\n\nprogram.parse(process.argv)\n```\n\nhelp.js\n\n```js\nconst { program } = require('commander')\nconst { createFromTemplate, createComponent } = require('./action')\n\nfunction useHelp() {\n  program\n    .option('-d, --destination <destination>', 'the destination of direcotry')\n    .option('-r, --remove', 'remove the files')\n\n  program\n    .command('create <template> [args]')\n    .description('the template of project to create')\n    .action(createFromTemplate)\n\n  program\n    .command('create-cpn <component> [...args]')\n    .description('createt a component from template')\n    .action(createComponent)\n}\n\n\nmodule.exports = {\n  useHelp\n}\n```\n\naction.js\n\n```js\nconst { promisify } = require('util')\n// 通过 promisify 使 download 变为一个 promise\nconst download = promisify(require('download-git-repo'))\nconst { program } = require('commander')\n// 添加模板编译库\nconst ejs = require('ejs')\nconst path = require('path')\nconst fs = require('fs')\n\nasync function executeCommand(command, args, opts) {\n  return new Promise((resolve) => {    \n    const { spawn } = require('child_process')\n    // 开启子进程\n    const childProcess = spawn(command, args, opts)\n    // 将输出传入到主进程的输出\n    childProcess.stdout.pipe(process.stdout)\n    childProcess.stderr.pipe(process.stderr)\n\n    childProcess.on('close', () => {resolve()})\n  })\n}\n\nasync function createFromTemplate(template, args) {\n  console.log(template, args)\n  /**\n   * 参数一：下载地址 需要指定下载的分支\n   * 参数二：下载到哪里\n   * 参数三：可选参数，设置为 clone 方式\n   */\n  await download('direct:git@github.com:DaHui-BT/scoped-css-webpack-plugin.git#main', template, { clone: true })\n  let command = 'npm'\n  // 判断当前平台，win 需要添加 .exe\n  console.log(process.platform)\n  if (process.platform == 'win32') {\n    command += '.exe'\n  }\n  // 自动安装相关的依赖\n  await executeCommand(command, ['install'], { cwd: `./${template}`})\n  // 自动运行该项目\n  await executeCommand(command, ['run', 'dev'], { cwd: `./${template}`})\n}\n\nasync function createComponent(component, args) {\n  await new Promise((resolve, reject) => {\n    const templatePath = path.resolve(__dirname, './template/template.vue.ejs')\n    // 编译模板，并传入需要替换的字符\n    ejs.renderFile(templatePath, { name: component, lowerName: component.toLowerCase() }, (err, result) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(result)\n      }\n    })\n  }).then(async res => {\n    const destination = program.opts().destination || './'\n    const filePath = path.resolve(__dirname, destination)\n    // 判断文件路径是否存在，不存在则创建\n    if (!fs.existsSync(filePath)) {\n      fs.mkdirSync(filePath)\n    }\n    // 同步写入文件\n    await fs.promises.writeFile(`${filePath}/${component}.vue`, res)\n  })\n}\n\nmodule.exports = {\n  createFromTemplate,\n  createComponent\n}\n```\n\n\n\n\n\n# [TODO](https://www.aliyundrive.com/drive/file/all/backup/66f25f1481f8a5c9b2ec48bdb4953a2c7483f60a)\n\n802 day134_Rollup-Vite打包与原理-脚手架开发_14_(掌握)vite-esbuild构建工具的原理解析.mp4 \n\n","source":"_posts/learn.md","raw":"---\ntitle: Node 学习笔记\ndate: 2025-04-08 23:31:42\ntags: [Node]\ncategories: [编程]\n---\n\n\n\n## Node.js \n\n使用 npm 安装第三方工具时。当父文件夹存在 node_modules 文件夹时，并执行下载命令时（在子文件夹下），将会自动下载第三方工具到父文件夹下的 node_modules 文件夹中。\n\n### path 模块\n\nresolve 将会从后往前解析路径，当遇到绝对路径将会停止\n\n```js\nconst path = require('path')\n\nconsole.log(path.join('./a.txt', './b')) // a.txt\\b\n\nconsole.log(path.resolve('/a.txt', './b', '/c.txt')) // D:\\c.txt\n\nconsole.log(path.resolve('/a.txt', '/b.txt', './c.txt')) // D:\\b.txt\\c.txt\n\nconsole.log(path.resolve('/a.txt', './b.txt', './c.txt')) // D:\\a.txt\\b.txt\\c.txt\n\nconsole.log(path.resolve('./a.txt', './b.txt', './c.txt')) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt\n\nconsole.log(path.resolve('./a.txt', './b.txt', '', './c.txt/')) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt\n\nconsole.log(__dirname, __filename) // D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\index.js\n```\n\n\n\n## CommonJS\n\n### ``exports`` 与 ``module.exports`` \n\n``exports`` 和 ``module.exports`` 等价\n\n```js\n// b.js\nconsole.log(module.exports === exports)\n```\n\n执行：\n\n```bash\n$ node b.js\ntrue\n```\n\n### 路径查找问题\n\n在使用 ``require('路径')`` 时，当路径前缀不包含 ``/``、``./``、``../`` 等相对或绝对路径时\n\n- 将会首先在 node.js 的环境中查找该模块，例如：``require('path')`` \n- 当 node.js 环境不存在该模块时，将会在该目录的 node_modules 文件夹中查找，该目录中不存在 node_modules 文件夹则会一直向上寻找该文件夹，不存在则抛出异常\n\n当路径前缀包含 ``/``、``./``、``../`` 等相对或绝对路径时，首先会查找其路径对应的文件，当不存在该文件时：\n\n- 当不包含文件后缀名 (``.js``、``.json``、``.node``) 时，将会自动添加后缀，进行查找\n- 当添加后缀名后查找仍不存在，则会查找该路径命名的文件夹，当不存在该文件夹时抛出异常\n- 当文件夹存在时，则会在文件夹中查找 ``index.js`` 文件\n\n### 导出引用\n\n在使用 ``require`` 和 ``module.exports`` 时，``module.exports`` 所导出的为对象的引用，在导入文件中修改导入的变量时，原变量也会发生改变\n\n```js\n// a.js\nlet a = {\n  name: 'aaa'\n}\n\nmodule.exports = {\n  a\n}\n\nsetTimeout(() => {\n  console.log('in aaa file: ', a.name)\n}, 1000)\n\n// b.js\nconst ma = require('./aaa')\n\nconsole.log('in bbb file: ', ma)\n\nma.a.name = 'bbb'\n```\n\n当执行后：\n\n```bash\n$ node b.js\nin bbb file:  { a: { name: 'aaa' } }\nin aaa file:  bbb\n```\n\n### module 对象\n\n当模块使用 require 引入时，该模块中的代码将会被自动执行一次。当多次引入也会只执行一次。\n\nnode.js 源码中存在一个变量 ``module.loaded`` ，初始时为 false，当进行引入时该变量将会变为 true\n\n```js\nModule {\n  id: '.',\n  path: '~',\n  exports: {},\n  filename: '~/aaa.js',\n  loaded: false, // 代表是否已经加载该模块\n  children: [],\n  paths: [ // 当前目录及父目录下的 node_modules 文件夹，用于查找第三方工具包\n    'D:\\\\Dahui\\\\Project\\\\Algorithm-Exercise\\\\node_modules',\n    'D:\\\\Dahui\\\\Project\\\\node_modules',\n    'D:\\\\Dahui\\\\node_modules',\n    'D:\\\\node_modules'\n  ]\n}\n```\n\n### 加载过程\n\n其加载过程为同步过程，当一个模块加载完成之后，才会加载另一个，此方法经常在服务端使用（由于本地加载较为迅速）。此种方式在客户端加载时会导致卡顿或阻塞。由此引申出 AMD（Asynchronous Module Definition） 和 CMD （Common Module Definition），这两种方式都采用异步加载\n\n```js\n// a.js\nconsole.log('in aaa file')\n\n// b.js\nconsole.log('in bbb file')\nconst ma = require('./a')\nconsole.log('in bbb file')\n```\n\n执行结果：\n\n```bash\n$ node b.js\nin bbb file\nin aaa file\nin bbb file\n```\n\n当存在循环引入时，其执行顺序（node.js 为深度优先搜索）\n\n- a -> b -> c\n- a -> d -> c\n\n则执行顺序为：a -> b -> c -> d\n\n\n\n## ES-Module\n\n在 ES6（ES2015） 时推出\n\n### 导入导出方式\n\n```js\n// a.js\nlet a = \"aaa\"\n// 定义时直接导出，该方式不能使用 as 关键字改别名\nexport let aa = \"aaaaaa\"\n\nexport {\n\ta\n}\n\n// b.js\n// 在浏览器中导入时，必须夹后缀（.js），导入声明只能在文件顶层使用\nimport {a} from 'a.js'\n// import * as a from 'a.js'\n\nconsole.log(a)\n\n// a.html\n<script src='b.js' type=\"module\"></script>\n```\n\n执行结果\n\n```bash\naaa\n```\n\n当导入时的变量与该文件中的变量产生冲突时，通过 as 关键字可以在导出文件中替换名字\n\n```js\n// a.js\nlet a = \"aaa\"\n\nexport {\n\ta as a_a\n}\n\n// b.js\nimport {a_a} from 'a.js'\n\nconst a = \"bbb\"\nconsole.log(a, a_a)\n```\n\n或者在导入时起别名\n\n```js\n// a.js\nlet a = \"aaa\"\n\nexport {\n\ta\n}\n\n// b.js\nimport {a as a_a} from 'a.js'\n\nconst a = \"bbb\"\nconsole.log(a, a_a)\n```\n\n执行结果\n\n```bash\nbbb, aaa\n```\n\n### 导入导出优化\n\n当管理多个导入导出文件时，可采用如下优化方式（main.js 中需要引入 utils 文件夹下的所有工具类）。创建index.js 文件导入所有工具方法，并导出，此时 main.js 中只需要引入 index.js 文件中的方法即可\n\n```bash\n-- utils\n\t-- parse.js\n\t-- time.js\n\t-- index.js\n-- main.js\n```\n\n代码如下：\n\n```js\n// index.js\n// 导出所有\nexport * from 'parse.js'\n// 如下更清晰\nexpor { timeUtils } from 'time.js'\n\n// main.js\nimport { parseInt, timeUtils } from 'utils/index.js'\n```\n\n### 默认导出\n\n```js\n// a.js\n// 一个模块中只能存在一个默认导出\nexport default function() {\n    console.log('default export')\n}\n\n// b.js\nimport aaa from 'a.js'\n```\n\n### 导入函数\n\n默认导入只能在文件顶层，浏览器在加载 ``js`` 文件时，会直接在文件顶层扫描 import 并下载\n\n```js\n// a.js\nexport let a = \"aaa\"\n\n// b.js\nlet flag = true\nif (flag) {\n    const importPromise = import('./a.js')\n    importPromise.then((res) => {\n        console.log(res.a) // aaa\n    })\n    \n    // import('./a.js').then((res) => {\n    //     console.log(res.a) // aaa\n    // })\n}\n```\n\n如下导入方式将会报错，因为在执行之后才能知道具体要导入的文件\n\n```js\nimport {a} from 'a' + '.js'\nimport {a} from ('a' + '.js')\n```\n\n在 ES11（ES2020） import 中添加了如下的属性：\n\n```json\n{\n    url: 'http://127.0.0.1:5500/a.js', // 加载该 js 文件所使用的 url\n    resolve: ƒ\n}\n```\n\n### 解析流程 TODO\n\n\n\n\n\n\n\n## npm\n\n当所加载的第三方工具包的入口文件不为 index.js 文件时，无法通过 ``require('第三方工具包')`` 进行导入，可在第三方工具包中创建 ``package.json`` 文件\n\n```json\n// 例如第三方工具包的入口文件为 main.js\n{\n    name: \"第三方工具包\",\n    version: \"1.0.0\",\n    main: \"main.js\"\n    // ...\n}\n```\n\n### scripts 脚本\n\n针对于特定名称的脚本可以省略 run 参数，例如：``npm start`` ，可以省略 run 的命令如下：start、test、stop、restart\n\n```json\n{\n    // ...\n    scripts: {\n        start: \"node main.js\",\n        build: \"webpack ...\"\n    }\n    // ...\n}\n```\n\n### 开发依赖、生产依赖\n\n开发依赖：只在开发过程中会使用到，例如：webpack。执行命令：``npm install/i xxx --save-dev/-D`` \n\n生产依赖：在开发过程以及生产过程都会被使用到，例如：vue。执行命令：``npm install/i xxx --save/-S`` \n\npeer 依赖：在依赖本库时需要先安装该依赖的库\n\n*全局安装命令： ``npm install xxx -g``* \n\n```json\n{\n    // ...\n    dependencies: {\n        \"vue\": \"3.0\"\n        // ...\n    },\n    devDependencies: {\n        \"webpack\": \"5.0\"\n        // ...\n    },\n    peerDependencies: {\n        // ...\n    }\n    // ...\n}\n```\n\n### 版本管理\n\nsemver 版本规范 ``X.Y.Z`` \n\n- X 主版本号（major）：当做了不兼容的 API 修改时（可能不兼容之前的版本）\n- Y 次版本号（minor）：当做了向下兼容的功能性新增（新功能增加，但兼容以前的版本）\n- Z 修订号（patch）：当做了向下兼容的问题修正（没有新功能，修复了之前版本的 BUG）\n\n``^`` 和 ``~`` 前缀\n\n- ``x.y.z`` 代表特定的版本\n- ``^x.y.z`` 代表 x 是保持不变的，y 和 z 永远安装最新的版本\n- ``~x.y.z`` 表示 x 和 y 是保持不变的，z永远安装最新的版本\n\n\n\n### 命令\n\n```bash\n# 获取缓存目录\n$ npm config get cache\n\n# 获取配置信息\n$ npm config list\n# ; \"user\" config from ~\\.npmrc\n#\n# cache = \"~/node-v18.14.0-win-x64/node_cache\"\n# prefix = \"~/node-v18.14.0-win-x64/node_global\"\n# registry = \"http://registry.npm.taobao.org/\"\n#\n# ; node bin location = ~/node-v18.14.0-win-x64/node.exe\n# ; node version = v18.14.0\n# ; npm local prefix = ~/project\n# ; npm version = 9.3.1\n# ; cwd = ~/project\n# ; HOME = ~\n# ; Run `npm config ls -l` to show all defaults.\n\n\n# 卸载某个第三方库\n$ npm uninstall xxx\n\n# 重新构建项目依赖\n$ npm rebuild\n\n# 清除缓存\n$ npm cache clean\n\n# 获取本地使用的镜像源\n$ npm config get registry\n\n# 更新镜像源\n$ npm config set registry \"镜像源地址\"\n\n# 登录到 npm registry\n$ npm login\n\n# 发布当前包到 npm registry\n$ npm publish\n\n# 删除发布的包\n$ npm unpublish\n\n# 让发布的包过期\n$ npm deprecate\n```\n\n\n\n## npx\n\n当使用 npx 命令执行别的第三方包命令时，将会首先在该目录下的 node_modules 文件夹下的 .bin 文件夹中查找该命令是否存在，存在则会优先执行该命令\n\n\n\n## pnpm\n\n每创建一个项目都需要下载对应的第三方工具包，为了解决包占用较大的问题，pnpm采用软链接、硬链接\n\n- 扁平化：当一个工具包依赖另一个工具包时，将会直接下载到 node_modules 文件夹下，导致在``package.json`` 中没有写入依赖项就可以导入。当卸载该工具包时，其依赖包也可能被删除，由此引发导入错误\n- 非扁平化：当一个工具包依赖另一个工具包时，依赖项将会下载到在该工具包中\n\n``pnpm`` 通过设置软连接的方式将一个工具包依赖的另一个工具包保存到该工具包目录中，安装的该工具包依赖的工具包将会以硬链接的方式存储到 ``.pnpm`` 目录下\n\n\n\n## Webpack 模块化打包工具\n\n> Webpack 是一个静态的模块化打包工具。打包后成为最终的静态资源，用于部署到服务器中\n>\n> Webpack 支持 ES Module、CommonJS、AMD 等规范\n\n\n\n对项目进行打包：\n\n```bash\n# 执行当前项目依赖的 webpack 进行打包\n$ npx webpack\n```\n\n当将该命令集成到 ``package.json`` 文件中，则可以省略 ``npx`` ，``package.json`` 中的命令将会自动在该项目依赖中进行查找\n\n```json\n{\n    // ...\n    scripts: {\n        \"build\": \"webpack\"\n    }\n    // ...\n}\n```\n\n\n\nwebpack 默认会找到 ``src/index.js`` 文件进行打包\n\n- 可以通过参数指定要打包的文件：``npx webpack --entry ./src/main.js`` 进行修改\n- 通过添加如下参数：``npx webpack --output-filename bundle.js`` 修改输出的文件名\n- 通过添加如下参数：``npx webpack --output-dir build`` 修改输出的文件夹名称\n\n### 配置文件\n\n通过添加 webpack.config.js 文件修改 webpack 的配置信息。该文件采用 CommonJS 语法规范\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n当该配置文件名字不为 webpack.config.js 时可使用 `npx webpack --config newname.config.js` 来指定\n\n为了简化命令可以使用 `package.json` 的 scripts ：\n\n```json\n{\n\t//...\n    scripts: {\n        \"build\": \"webpack --config newname.config.js\"\n    }\n    //...\n}\n```\n\n### 配置后缀名\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  },\n  resolve: {\n    extensions: ['.js', '.jsx', '.json'] // 配置可省略的后缀名\n  },\n}\n```\n\n\n\n### 打包模式\n\n可选择的打包方式为：none | development | production（默认）\n\n| 选项        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| development | 会将 DefinePlugin 中的 process.env.NODE_ENV 的值设置为 development，为模块和 chunk 启用有效的名 |\n| production  | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production，为模块和 chunk 启用确定新的混淆名称，FlagDependencyUsagePlugin、FlagIncludeChunksPlugin、ModuleConcatenationPlugin、NoEmitOnErrorsPlugin 和 TerserPligin |\n| none        | 不适用任何默认优化选项                                       |\n\n\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'development', // none | development | production (default)\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n\n\n### HTML webpack plugin\n\n将 html 文件打包生成到指定的文件夹中\n\n安装指定插件\n\n```bash\nnpm install html-webpack-plugin -D\n```\n\n使用指定插件\n\n```js\n// webpack.config.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n\nmodule.exports = {\n  // ...\n  module: {\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    })\n  ]\n}\n```\n\n\n\n### 对 React 代码进行打包\n\n安装 react 依赖\n\n```bash\nnpm install react react-dom\n```\n\n安装对应编译 jsx 代码的插件\n\n```bash\nnpm install @babel/plugin-systax-jsx -D\nnpm install @babel/plugin-transform-react-jsx -D\nnpm install @babel/plugin-transform-react-display-name -D\n\n// 或者直接安装预设\n\nnpm install @babel/preset-react -D\n```\n\nApp 组件中的 jsx 代码\n\n```jsx\nimport React, { memo, useState } from \"react\";\n\nconst Component = memo(function () {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Add</button>\n    </div>\n  )\n})\n\nexport default Component\n```\n\nmain 入口文件\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom/client'\nimport App from './App.jsx'\n\nconst root = ReactDom.createRoot(document.querySelector('#app'))\nroot.render(<App />)\n```\n\nbabel.config.js\n\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      corejs: 3,\n      useBuiltIns: 'entry' // 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】\n    }],\n    ['@babel/preset-react'], // 解析 react 代码\n  ]\n}\n```\n\n\n\n### 对 TS 文件进行打包\n\n1. 可以使用 typescript compiler 进行打包，通过 tsc file.ts 进行手动打包\n\n2. 通过使用 ts-loader 进行整合 webpack 进行打包\n\n   需要对应的 tsconfig.json 文件（可以通过 npx tsc -init 生成）\n\n   会对 类型检查错误的代码进行报错\n\n   打包的内容并不包括 polyfill 部分\n\n   ```js\n   // webpack.config.js\n   const path = require('path')\n   const HtmlWebpackPlugin = require('html-webpack-plugin')\n   \n   module.exports = {\n     // ...\n     resolve: {\n       extensions: ['.js', '.jsx', '.json', '.ts']\n     },\n     module: {\n       rules: [\n         {\n           test: /\\.ts$/,\n           use: ['ts-loader']\n         }\n       ]\n     },\n     plugins: [\n       new HtmlWebpackPlugin({\n         template: './index.html'\n       })\n     ]\n   }\n   ```\n\n   \n\n3. 通过 ts 预设进行打包：@babel/preset-typescript（推荐）\n\n   但是 使用 babel-loader 将不会对 ts 代码类型检查错误进行报错\n\n   此时会使用 polyfill 进行填充\n\n   ```js\n   // webpack.config.js\n   const path = require('path')\n   const HtmlWebpackPlugin = require('html-webpack-plugin')\n   \n   module.exports = {\n     // ...\n     module: {\n       rules: [\n         {\n           test: /\\.ts$/,\n           use: {\n             loader: 'babel-loader', // 不会对类型检查错误进行报错\n             options: {\n               presets: ['@babel/preset-typescript']\n             },\n             // loader: 'ts-loader' // 会对类型检查错误进行报错\n           }\n         }\n       ]\n     },\n     plugins: [\n       new HtmlWebpackPlugin({\n         template: './index.html'\n       })\n     ]\n   }\n   ```\n\n   在使用过程中既要类型检查抛出异常又要使用 polyfill 进行代码的填充，可以通过配置 package.json 脚本\n\n   ```json\n   {\n     // ...\n     \"scripts\": {\n       \"build\": \"tsc --noEmit && webpack\",\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     },\n     // ...\n   }\n   ```\n\n   noEmit 表示不输出任何东西，也即不进行转换\n\n\n\n### Source Map\n\nwebapck 配置文件\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'production', // none | development | production (default)\n  devtool: 'source-map', // reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build')\n  }\n}\n```\n\n编写的主文件\n\n```js\n// main.js\n\nlet name = 'abc'\nconsole.log(name)\n\nname = 123\nconsole.log(name)\n```\n\n最后一行的注释指明了该打包后的文件的 source map 文件\n\n浏览器会根据我们的注释，查找相应的 source-map，并且根据  source-map 还原我们的代码，方便进行调试\n\n```js\n(()=>{let o=\"abc\";console.log(o),o=123,console.log(o)})();\n//# sourceMappingURL=bundle.js.map\n```\n\n生成的 source-map 文件\n\n```json\n{\n  \"version\": 3, // 当前使用的版本，也就是最新的第三版\n  \"file\": \"bundle.js\", // 打包后的文件（浏览器加载的文件）\n  \"mappings\": \"MAAA,IAAIA,EAAO,MAEXC,QAAQC,IAAIF,GAEZA,EAAO,IAEPC,QAAQC,IAAIF,E\", // source-map 用来和源文件映射的信息（比如位置信息等），一串 base64 VLQ（variable length quantity，可变长度值）编码\n  \"sources\": [\n    \"webpack://webpack/./src/main.js\"\n  ], // 从哪些文件转换过来的 source-map 和打包的代码（最初始的文件）\n  \"sourcesContent\": [\n    \"let name = 'abc'\\r\\n\\r\\nconsole.log(name)\\r\\n\\r\\nname = 123\\r\\n\\r\\nconsole.log(name)\\r\\n\"\n  ], // 转换前的具体代码信息（和 sources 是对应的关系）\n  \"names\": [\n    \"name\",\n    \"console\",\n    \"log\"\n  ], // 转换前的变量和属性名称（因为我们目前使用的是 development 模式，所以不需要保留转换前的名称）\n  \"sourceRoot\": \"\" // 所有的 sources 相对的根目录\n}\n```\n\n### devtool 选项\n\n- false：不使用 source-map，也就是没有任何和 source-map 相关的内容\n\n- none：production 模式下的默认值（什么值都不写），不生成 source-map\n\n- eval：development 模式下的默认值，不生成  source-map\n\n  - 但是他会在 eval 执行的代码中，添加 // # sourceURL=;\n  - 它会被浏览器在执行时解析，并且在调试面板中生成对应的一些文件目录，方便我们调试（但是此时还原的代码并不一定准确到具体的行、列）速度快\n\n- source-map：会生成完整的 source-map 文件，一般设置在 production 模式下\n\n- eval-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 eval 函数的后面（将 source-map 文件内容**转化为 base64 放到 eval 函数的后面**）\n\n  ```js\n  eval(... //# sourceMappingURL=data;application/json;charset=utf-8;base64,)\n  ```\n\n  \n\n- inline-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 bundle 文件的后面（将 source-map 文件内容**转化为 base64 放到 bundle 文件的最后面**）\n\n  ```js\n  eval(... )\n  //# sourceMappingURL=data;application/json;charset=utf-8;base64,\n  ```\n\n  \n\n- cheap-source-map\n\n  - 会生成 sourcemap，但是会更加高效一些（cheap 低开销），因为 **他没有生成列映射** （Column Mapping）\n  - 因为再发开中，我们只需要行信息通常就可以定位到错误了\n  - 在 development 中才会生成相应的 .js.map 文件\n\n- cheap-module-source-map\n\n  - 会生成 sourcemap，类似于 cheap-source-map，但是对源自 loader 的 sourcemap 处理会更好\n  - 如果 loader 对我们的源代码进行了特俗的处理，比如 babel 可能会删掉空行\n\n- hidden-source-map\n\n  - 会生成 sourcemap，但是不会对 sourcemap 文件进行引用\n  - 相当于删除了打包文件中对 sourcemap 的引用注释。如果我们手动添加进行，那么 sourcemap 就会生效了\n\n- nosources-source-map\n\n  - 会生成 sourcemap，但是生成的 sourcemap 只有错误信息的提示，不会生成源代码文件\n\n### 配置插件\n\n```js\n// webpack.config.js\nconst path = require('path')\n\n\nmodule.exports = {\n  mode: 'production', // none | development | production (default)\n  devtool: 'source-map', // reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build'),\n    clean: true, // when rebuild, the output dir will be cleaned\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [], // add plugins\n            presets: [\n              '@babel/preset-env'\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n### 自动化编译\n\n通过如下方式可以达到自动编译\n\n1. webpack watch mode\n2. webpack-dev-server （常用）\n   - webpack-dev-server 使用了 memfs 库，不会输出任何文件，生成的中间结果在内存中\n3. webpack-dev-middleware\n\n```bash\nnpm install webpack-dev-server -D\n```\n\n配置 DevServer\n\n如果配置了 devServer.static 那么该内容会覆盖默认值，也即如果这个地方没有写 public 那么 public 将不会被认为是静态资源目录\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  devServer: {\n    // if this is defined, then the public must be insert to this list\n    static: ['public', 'temp'],\n    host: '0.0.0.0',\n    open: true,\n    compress: true, // 进行压缩，会设置响应头中 content-encoding: gzip    \n  }\n}\n```\n\n\n\n### Webpack 性能优化\n\n- 对打包结果进行优化\n  - 分包处理，Vue/React 路由懒加载\n  - 代码进行压缩（丑化 const message => const m）\n  - 删除无用代码（tree shaking）\n  - CDN 服务器（对第三方库使用 CDN）\n- 对打包过程进行优化\n  - 加速打包的过程（exclude/cache-loader）\n\n#### 1. 分包处理\n\n- 他的主要目的是将 **代码分离到不同的 bundle 中**，之后我们可以 **按需加载**，或者并行加载这些文件\n- 默认情况下，所有的 JavaScript 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，会影响首页加载的速度\n- 代码可以分离出更小的 bundle，以及控制资源加载优先级，提供代码的性能。\n\nwebapck 中常用的代码分离方式：\n\n1. 入口起点：使用 entry 配置手动分离代码\n\n   ```js\n   module.exports = {\n     entry: {\n       index: './src/index.js',\n       main: './src/main.js'\n     },\n     output: {\n       // 使用占位符：name 为上面的 index 和 main\n       filename: '[name]-bundle.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n     },\n   }\n   ```\n\n   当多个入口文件对同一个库进行了依赖，可以设置起共享的库\n\n   ```js\n   module.exports = {\n     entry: {\n       index: {\n         import: './src/index.js',\n         dependOn: 'shared1'\n       },\n       main: {\n         import: './src/main.js',\n         dependOn: 'shared1'\n       },\n       // shared 可以配置多个，将会输出到 shared-xxx 文件中，其他依赖将会对该包进行引入 \n       shared1: ['react', 'react-dom']\n     },\n     output: {\n       // 使用占位符：name 为上面的 index 和 main\n       filename: '[name]-bundle.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n     },\n   }\n   ```\n\n   \n\n2. 防止重复：使用 Entry Dependencies 或 SplitChunksPlugin 去重和分离代码\n\n3. 动态导入：通过模块的内联函数调用来分离代码\n\n   通过使用 import 函数 `import('xxx.js').then(() => {{}})` \n\n   当使用 import 函数时，then 中可以直接拿到导入文件的 export 对象，获取导出 default 对象，可以通过 \n\n   ```js\n   import('xxx.js').then(res => {\n     // 获取默认导出对象\n     res.default()\n     // 获取导出对象\n     res.obj\n   })\n   ```\n\n通过魔法注释修改打包后的文件名：\n\n```js\n// a 代表打包后的文件名，此名称替换 name 字段\nimport(/* webpackChunkName: 'a' */'./ts/a').then(getResult => {\n  console.log(getResult('$123'))\n  console.log(getResult('234'))\n})\n```\n\nwebpack 配置\n\n```js\nmodule.exports = {\n  output: {\n    filename: '[name]-bundle.js',\n    chunkFilename: '[name]_chunk.js',\n    // chunkFilename: '[id]_[name]_chunk.js', // id 为文件路径，文件名使用 _ 分割的字符串\n    // path 必须指定绝对路径\n    path: path.resolve(__dirname, './build'),\n    clean: true, // when rebuild, the output dir will be cleaned\n  },\n}\n```\n\n通过配置 webpack 优化选项，设置分包方式\n\n```js\nmodule.exports = {\n  optimization: {\n    // natural: 按照数字的顺序使用 id\n    // named: development 下的默认值，文件路径使用 _ 分割\n    // deterministic: 确定的，在不同的编译中不变的短数字 id\n    chunkIds: 'deterministic',\n    splitChunks: {\n      chunks: 'all', // default：async\n      maxSize: 20000, // 20kb 拆分后的包最大大小，可能会大于最大值，由于一个函数或类可能很大\n      minSize: 10, // 拆分后的包最小大小\n      cacheGroups: { // 自定义拆包\n        vendors: {\n          // test: /node_modules/, // 匹配路径中包含该字符串的\n          test: /[\\\\/]node_modules[\\\\/]/, // 匹配路径中包含 /node_modules/ 或者 \\node_modules\\\n          filename: '[name]_vendors.js'\n        },\n        utils: { // 当编写的文件小于 minSize 时将不会被拆分\n          test: /utils/,\n          filename: '[name]_utils.js'\n        }\n      }\n    }\n  },\n}\n```\n\nchunIds 将会指定打包后文件的名字，当设置 natural 时，当导入文件发生变化时，不利于浏览器缓存，导致重新加载\n\n- 在开发中，推荐使用 named\n- 在打包过程中，推荐使用 deterministic\n\n\n\n### Prefetch 和 Preload\n\n在声明 import 时，使用内置指令，告知浏览器\n\n- prefetch（预获取）：将来某些导航下可能需要的资源\n- preload（预加载）：当前导航下可能需要的资源\n\n于 prefetch 指令相比，preload 指令由许多不同之处\n\n- preload chunk 会在父 chunk 加载时，以并行方式开始加载，prefetch 会在父 chunk 加载结束后开始加载\n- preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载\n- preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻\n\n```js\nimport(\n  /* webpackChunkName: 'a' */\n  /* webpackPreload: true */ // 设置预加载\n  './ts/a').then(getResult => {\n  console.log(getResult('$123'))\n  console.log(getResult('234'))\n})\n```\n\n\n\n### Shimming\n\nshimming 是一个概念，是某一类功能的统称：\n\n- shimming 翻译过来我们称之为 垫片，相当于给我们的代码填充一些垫片来处理一些问题\n- 比如我们现在以来一个第三方的库，这个第三方的库本身依赖 lodash，但是默认没有对 lodash 进行导入（认为全局存在 lodash），那么我们就可以通过 ProvidePlugin 来实现 shimming 的效果\n\nwebpack 并不推荐随意的使用 shimming\n\n- webpack 背后的整个理念是使前端开发更加模块化\n- 也就是说，需要编写具有封闭性的，不存在隐含依赖（比如全局变量）的彼此隔离的模块\n\n```js\nmodule.exports = {\n  plugins: [\n    new ProvidePlugin({\n      // 相当于对全局使用 import ReactDom from 'react-dom/client'\n      // ReactDom: 'react-dom/client',\n      // 相当于对全局使用 import { createRoot } from 'react-dom/client\n      createRoot: ['react-dom/client', 'createRoot']\n    })\n  ],\n}\n```\n\n\n\n### 对 CSS 文件进行单独提取\n\n提取 css 需要安装对应的依赖：`npm install mini-css-extract-plugin -D` \n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        \n        use: [\n          // 'style-loader', // style-loader 将会通过 js 在 html 插入 style 标签，并将相应的样式填入（开发阶段）\n          MiniCssExtractPlugin.loader, // 提取到单独的 css 文件中，通过 link 进行引入（生产阶段）\n          'css-loader'\n        ], // loader 将会从后往前进行加载\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    }),\n    new MiniCssExtractPlugin({\n      // 对打包后的文件名字，如下打包将会放入 css 文件夹中\n      filename: 'css/[name]-css.css',\n      chunkFilename: 'css/[name].css', // 分包后的包文件名\n    })\n  ],\n}\n```\n\n\n\n### Hash、ContentHash、ChunkHash\n\n在给打包的文件进行命名的时候，会使用 placeholder，placeholder 中有几个比较常用的属性\n\nhash 本身使通过 MD4 的散列函数处理后，生成一个 128 位的 hash 值（32 个十六进制）\n\n- fullhash：当某个文件发生改变时，所有文件的 hash 值都会重新生成，且一样\n  - hash 值的生成和整个项目有关系\n  - 当存在两个入口文件 index.js 和 main.js 时，他们分别会输出到不同的 bundle.js 文件中，并且在文件名称中我们有使用 hash\n  - 这个时候，如果修改了 index.js 文件中的内容，那么 hash 会发生变化，意味着两个文件的名称都会发生变化\n- chunkhash：当某个文件发生改变时，只有改变的文件 hash 值会重新生成\n  - 可以有效解决上面的问题，他会根据不同的入口进行解析来生成 hash 值\n  - 比如修改了 index.js，那么 main.js 的 chunkhash 是不会发生改变的\n  - chunkhash 根据不同的入口文件(entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。当某个文件内容发生变动时，再次执行打包，只有该文件以及依赖该文件的文件的打包结果 hash 值会发生改变\n- contenthash：表示生成的文件 hash 名称，只和内容有关（推荐）\n  - 比如我们的 index.js 引入了一个 style.css，style.css 有被抽取到一个独立的 css 文件\n  - 这个 css 文件在命名时，如果我们使用的是 chunkhash，那么当 index.js 文件的内容发生变化时，css 文件的命名也会发生变化\n  - 这个时候我们可以使用 contenthash \n\n### DLL 库\n\nDLL 全程是动态链接库（Dynamic Link Library）\n\n- 它指的是我们可以共享，并且不经常改变的代码，抽取称一个共享的库\n- 这个库在之后编译的过程中，会被引入到其他项目的代码中\n\n使用过程：\n\n1. 打包 DLL 库\n2. 项目中引入 DLL 库\n\n现在已经不再使用，移除原因：webpack 4 已经提供很好的性能，没有必要再花费时间去维护 DLL\n\n### Terser\n\n- Terser 是一个 JavaScript 的解析（Parser）、Mangler（绞肉机）、Compressor（压缩机） 的工具集\n\n- 早期我们会使用 uglify-js 来压缩、丑化我们的 JavaScript 代码，但是目前已经不再维护，并且不支持 ES6+ 的语法\n- Terser 是从 uglify-es fork 过来的，并且保留了他原来的大部分 API 以及适配 uglify-es 和 uglify-js@3 等\n\n#### 命令行使用方式\n\n```bash\nterser [filename] -o [outputfilename] -c [arguments] -m [arguments]\n```\n\n-c 表示压缩（compress）\n\n- arrows：class 或 object 中的函数，转换成箭头函数\n- arguments：将函数中使用的 arguments[index] 转成对应的形参名称\n- dead_code：移除不可达的代码（tree shaking）\n\n```bash\nnpx terser a.js -o a.min.js -c arrows=true,arguments=true,dead_code=true\n```\n\n优化前代码\n\n```js\nfunction test(name1, name2) {\n  console.log(name1, name2)\n  console.log(arguments[0], arguments[1])\n}\n\ntest('123', '234')\n\nconst obj = {\n  bar() {\n    return 'bar'\n  }\n}\n\nclass Person {\n  name = 'zhangsan'\n  getName() {\n    return 'lisi'\n  }\n}\n\nif (false) {\n  console.log('false')\n}\n```\n\n优化后代码\n\n```js\nfunction test(name1,name2){console.log(name1,name2),console.log(name1,name2)}test(\"123\",\"234\");const obj={bar:()=>\"bar\"};class Person{name=\"zhangsan\";getName(){return\"lisi\"}}\n```\n\n-m 选项\n\n- top_level：优化顶层所有变量名\n- keep_fnames：保持函数原名\n\n- keep_classnames：保持原类名\n\n```bash\nnpx terser .\\src\\main.js -o main.min.js -c arrows=true,arguments=true,dead_code=true -m toplevel=true,keep_fnames=true\n```\n\n优化后代码\n\n```js\nfunction test(n,s){console.log(n,s),console.log(n,s)}test(\"123\",\"234\");const n={bar:()=>\"bar\"};class s{name=\"zhangsan\";getName(){return\"lisi\"}}\n```\n\n#### 在 webpack 中配置 terser\n\n- 在 webpack 中有一个 minimizer 属性，在 production 模式下，默认就是使用 TerserPlugin 来处理我们的代码的\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    filename: 'js/[contenthash:10]-[name].js',\n    path: path.resolve(__dirname, './build'),\n    clean: true\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        // 屏蔽第三方库中的注释\n        extractComments: false,\n        // 使用多进程并发提高构建速度，默认值是 true\n        // 并发运行的默认数量是 os.cpu().length - 1\n        // 我们也可以设置自己的个数，使用默认即可\n        parallel: true,\n        terserOptions: {\n          compress: {\n            // 配置函数中使用 arguments 进行优化\n            arguments: true,\n            // 未被引用的代码将被删除\n            unused: true\n          },\n          // 配置 Mangler（绞肉机）\n          mangle: true,\n          // 对 mangle 传入的参数\n          keep_fnames: true\n        }\n      })\n    ]\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  }\n}\n```\n\n\n\n### CSS 压缩\n\n需要安装对应的插件\n\n```bash\nnpm install css-minimizer-webpack-plugin -D\n```\n\n- css 压缩通常是去除无用的空格等，它使用的是 cssnano 工具来进行优化、压缩 CSS 也可以单独使用\n\n```js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst CSSMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    filename: 'js/[contenthash:10]-[name].js',\n    path: path.resolve(__dirname, './build'),\n    clean: true\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CSSMinimizerPlugin()\n    ]\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html'\n    }),\n    new MiniCssExtractPlugin({\n      filename: 'style/[name]-[contenthash:10].css'\n    })\n  ]\n}\n```\n\n### webpack 配置文件的拆分\n\n在编写 webpack 配置文件时，可以导出一个函数，并且可以通过 --env 给该函数传入相应的参数\n\n```js\n// common.config.js\nconst path = require('path')\n\nconst commonConfig = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: '[name]-[contenthash:10].js',\n    path: path.resolve(__dirname, '../build')\n  }\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n  } else {\n    console.log('development environment')\n  }\n  return commonConfig\n}\n// package.json\n{\n  \"name\": \"multiply_config\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config ./config/common.config.js --env development\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^5.97.1\",\n    \"webpack-cli\": \"^6.0.1\"\n  }\n}\n```\n\n使用 webpack-merge 插件进行拆分\n\n```js\n// common.config.js\nconst path = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst { merge } = require('webpack-merge')\n\nconst production = require('./production.config')\nconst development = require('./development.config')\n\nconst commonConfig = {\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: 'js/[name]-[contenthash:10].js',\n    path: path.resolve(__dirname, '../build')\n  },\n  resolve: {\n    extensions: ['.css', '.js']\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      template: './index.html'\n    })\n  ]\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n    return merge(commonConfig, production)\n  } else {\n    console.log('development environment')\n    return merge(commonConfig, development)\n  }\n}\n// development.config.js\nmodule.exports = {\n  mode: 'development',\n  devtool: 'source-map',\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  },\n}\n// production.config.js\nconst MiniCSSExtractPlugin = require('mini-css-extract-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\nconst CSSMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\n\nmodule.exports = {\n  mode: 'production',\n  devtool: false,\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            arrows: true,\n            arguments: true,\n          },\n          mangle: true,\n          toplevel: true,\n          keep_fnames: true,\n          keep_classnames: true\n        }\n      }),\n      new CSSMinimizerPlugin()\n    ]\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: [MiniCSSExtractPlugin.loader, 'css-loader']\n      }\n    ]\n  },\n  plugins: [\n    new MiniCSSExtractPlugin({\n      filename: 'css/[name]-[contenthash:10].css'\n    })\n  ]\n}\n\n```\n\n\n\n### TreeShaking\n\n通过使用 `optimization.userdExports: true` 联合 terser 进行删除不会使用的代码\n\nwebpack.config.js\n\n```js\nmodule.exports = {\n  mode: 'production',\n  devtool: false,\n  optimization: {\n    minimize: true,\n    // 使用该参数，将会在生成的代码中标注那些函数没被使用\n    // 通过 terser plugin 对标记的代码进行删除\n    // plugin 模式下会自动开启该功能\n    usedExports: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            arrows: true,\n            arguments: true,\n          },\n          mangle: true,\n          toplevel: true,\n          keep_fnames: true,\n          keep_classnames: true\n        }\n      })\n    ]\n  }\n}\n\n```\n\n通过 sideEffects 方式删除多余代码在 package.json 中\n\n```json\n{\n  \"name\": \"multiply_config\",\n  // 告诉 webpack 所有文件都没有副作用，可以删除\n  // \"sideEffects\": false,\n  // 通过数组的方式告诉 webpack 那些文件存在副作用\n  \"sideEffects\": [\n    \"./src/utils/sideEffect.js\",\n    \"*.css\" // 所有 css 将不会被优化删除\n  ],\n  \"main\": \"src/main.js\",\n}\n\n```\n\n在模块中使用类似 `window.a = '123'` 就时副作用代码\n\n#### CSS tree shaking\n\n安装对应依赖：\n\n```bash\nnpm install purgecss-webpack-plugin -D\n```\n\n\n\n### Scope Hosting\n\n由于打包之后的文件每个模块会存在一个单独的作用域，在一个模块中使用另一个模块中的函数等将会涉及跨作用域的问题，从而导致的性能低下。\n\n该配置在 production 模式下是默认开启的\n\n```js\nconst webpack = require('webpack')\n\nmodule.exports = {\n  plugins: [\n    new webpack.optimize.ModuleConcatenationPlugin()\n  ]\n}\n```\n\n\n\n### HTTP 压缩\n\nHTTP 压缩是一种内置在服务器和客户端之间的，以改进传输速度和带宽利用率的方式\n\n1. 第一步，http 数据在服务器发送前就已经被压缩了；（可以在 webpack 中完成）\n\n2. 第二步，兼容的浏览器在向服务器发送请求时，或告知服务器自己支持哪些压缩格式\n\n   ```http\n   GET /encrypted-area HTTP/1.1\n   Host: www.example.com\n   Accept-Encoding: gzip, deflate\n   ```\n\n3. 第三步，服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器\n\n   ```http\n   HTTP/1.1 200 OK\n   Content-Encoding: gzip\n   ```\n\n### Gzip 压缩\n\nwebpack 中相当于是实现了 HTTP 压缩的第一步操作，我们可以使用 CompressionPlugin\n\n- 安装 CompressionPlugin\n\n  ```bash\n  npm install compression-webpack-plugin -D\n  ```\n\n- 使用 CompressionPlugin\n\n  ```js\n  const CompressionPlugin = require('compression-webpack-plugin')\n  \n  module.exports = {\n    plugins: [\n      new CompressionPlugin({\n        test: /\\.(css|js)$/, // 匹配哪些文件将被压缩\n        // threshold: 500, // 设置文件从多大开始压缩\n        minRatio: 0.7, // 至少压缩的比例\n        algorithm: 'gzip' // 采用的压缩算法\n      })\n    ]\n  }\n  ```\n\n### HTML 压缩\n\n```js\nconst path = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst { merge } = require('webpack-merge')\n\nconst production = require('./production.config')\nconst development = require('./development.config')\n\nconst commonConfig = function(isProduction) {\n  return {\n    entry: './src/main.js',\n    output: {\n      clean: true,\n      filename: 'js/[name]-[contenthash:10].js',\n      path: path.resolve(__dirname, '../build')\n    },\n    resolve: {\n      extensions: ['.css', '.js']\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        // 当文件内容发生改变的时候才重新生成\n        cache: true,\n        minify: isProduction ? {\n          // 压缩时移除注释\n          removeComments: true,\n          // 删除空属性，例如 <div class=''></div> => <div></div>\n          removeEmptyAttributes: true,\n          // 移除多以的属性，例如：<input type='text'> => <input>\n          removeRedundantAttributes: true,\n          // 删除空行和空格\n          collapseWhitespace: true,\n          // 压缩内联 css\n          minifyCSS: true,\n          // 压缩内联 js\n          minifyJS: {\n            mangle: {\n              toplevel: true\n            }\n          },\n        } : false,\n        template: './index.html'\n      })\n    ]\n  }\n}\n\nmodule.exports = function(env) {\n  if (env.production) {\n    console.log('production environment')\n    return merge(commonConfig(true), production)\n  } else {\n    console.log('development environment')\n    return merge(commonConfig(false), development)\n  }\n}\n```\n\n### 针对于打包过程进行分析\n\n需要安装 speed-measure-webpack-plugin\n\n```bash\nnpm install speed-measure-webpack-plugin -D\n```\n\n\n\n### 对打包后的文件进行分析\n\n方式一：添加 `--profile --json=stats.json` 将会生成 stats.json 文件，该文件可通过 webpack 的在线分析平台进行分析\n\n```json\n{\n  \"scripts\": {\n    \"build:dev\": \"webpack --config ./config/common.config.js --env development --profile --json=stats.json\",\n    \"build:pro\": \"webpack --config ./config/common.config.js --env production\"\n  },\n}\n```\n\n方式二：使用插件进行分析打包后的文件 `webpack-bundle-analyzer` \n\n```bash\nnpm install webpack-bundle-analyzer -D\n```\n\n在 webpack 中配置该插件\n\n```js\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\n\nmodule.exports = {\n  plugins: [\n    new BundleAnalyzerPlugin()\n  ]\n}\n```\n\n该方式会自动开启一个端口用于展示生成后的文件状态：localhost:8080 \n\n\n\n## Webpack 源码\n\n### createCompiler\n\nwebpack 首先会创建 compiler，然后注册插件\n\n```js\n/**\n * @param {WebpackOptions} rawOptions options object\n * @param {number} [compilerIndex] index of compiler\n * @returns {Compiler} a compiler\n */\nconst createCompiler = (rawOptions, compilerIndex) => {\n\tconst options = getNormalizedWebpackOptions(rawOptions);\n\tapplyWebpackOptionsBaseDefaults(options);\n\tconst compiler = new Compiler(\n\t\t/** @type {string} */ (options.context),\n\t\toptions\n\t);\n\tnew NodeEnvironmentPlugin({\n\t\tinfrastructureLogging: options.infrastructureLogging\n\t}).apply(compiler);\n\tif (Array.isArray(options.plugins)) {\n\t\tfor (const plugin of options.plugins) {\n\t\t\tif (typeof plugin === \"function\") {\n\t\t\t\t// 当插件是一个函数时将会执行这个函数，传入 compiler，并给该函数绑定 compiler\n\t\t\t\t/** @type {WebpackPluginFunction} */\n\t\t\t\t(plugin).call(compiler, compiler);\n\t\t\t} else if (plugin) {\n\t\t\t\t// 当插件时一个对象时，必须存在一个 apply 函数，compiler 将会传入这个函数\n\t\t\t\tplugin.apply(compiler);\n\t\t\t}\n\t\t}\n\t}\n\tconst resolvedDefaultOptions = applyWebpackOptionsDefaults(\n\t\toptions,\n\t\tcompilerIndex\n\t);\n\tif (resolvedDefaultOptions.platform) {\n\t\tcompiler.platform = resolvedDefaultOptions.platform;\n\t}\n\tcompiler.hooks.environment.call();\n\tcompiler.hooks.afterEnvironment.call();\n\tnew WebpackOptionsApply().process(options, compiler);\n\tcompiler.hooks.initialize.call();\n\treturn compiler;\n};\n```\n\n\n\n\n\n### webpack 解析过程\n\n\n\n### 自定义 Loader\n\nLoader 是用于对模块的源代码进行转换（处理），Loader 本质上是一个导出为函数的 Js 模块，Loader  runner 库会调用这个函数，然后将上一个 loader 产生的结果或者资源文件传入进去\n\nwebpack.config.js\n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  mode: 'development',\n  devtool: false,\n  entry: './src/main.js',\n  output: {\n    clean: true,\n    filename: '[name]-[contenthash:6].js',\n    path: path.resolve(__dirname, './build')\n  },\n  resolve: {\n    extensions: ['.js']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: [\n          {\n            loader: './loaders/loader04.js',\n            options: {\n              name: 'zhangsan',\n              age: 18\n            }\n          }\n        ]\n      }\n      // {\n      //   test: /\\.js$/,\n      //   use: [\n      //     // 可以使用相对路径，loader 将会从后往前进行加载\n      //     './loaders/loader01.js',\n      //     './loaders/loader02.js',\n      //     './loaders/loader03.js',\n      //   ]\n      // },\n\n      // 如下代码也将会从后往前加载\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader01.js'\n      // },\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader02.js'\n      // },\n      // {\n      //   test: /\\.js$/,\n      //   use: './loaders/loader03.js'\n      // }\n    ]\n  }\n}\n```\n\nloader01.js\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  console.log('====================')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### callback 函数\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  // 通过 callback 可以返回信息\n  const callback = this.callback\n  // 当 return 和 callabck 同时存在时，callback 返回的内容将会传递给下一个 loader\n  /**\n   * 参数一： 异常信息\n   * 参数二：返回给下一个 loader 的内容\n   */\n  // callback(null, content + '\\n//aaaaaaaaaaa')\n  setTimeout(() => {\n    // 当将 callback 放到异步函数里面，其返回值将不生效\n    // 其后面的 loader 将不会延迟执行\n    callback(null, content + '\\n//aaaaaaaaaaa')\n  }, 1000)\n\n  console.log('==========2=========')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### async 函数（异步函数）\n\n```js\n/**\n * \n * @param {*} content 上一个 loader 返回的结果或者文件的内容\n * @param {*} map 根 source map 有关\n * @param {*} meta 元数据\n * @returns 返回处理后的内容\n */\nmodule.exports = function(content, map, meta) {\n  const callabck = this.async()\n  // 通过 async 返回的函数作为异步函数，该 loader 将被视为一个异步 loader\n  setTimeout(() => {\n    // 下一个 loader 的 content 参数将会加上这个 loader 返回的结果，其优先级大于 return，return 返回的东西将不会生效\n    // 其后面的 loader 将会延后执行\n    callabck(null, content + '\\n//3333333')\n  }, 1000)\n  console.log('==========3=========')\n  console.log(content)\n  console.log('====================')\n  return content\n}\n```\n\n#### 给 loader 传递参数\n\n```js\nconst { getOptions } = require(\"loader-utils\")\n\nmodule.exports = function(content) {\n  // 方式一：通过 loader-utils （webpack 开发）的库来获取\n  console.log(getOptions(this)) // 现在执行将会报错 TypeError: getOptions is not a function\n  // 方式二：通过 this.getOptions() 函数来获取\n  console.log(this.getOptions()) // { name: 'zhangsan', age: 18 }\n  return content\n}\n```\n\n#### 对传入的参数进行校验\n\n需要使用第三方库的支持\n\n```bash\nnpm install schema-utils -D\n```\n\nloader.js\n\n```js\nconst { validate } = require('schema-utils')\n\nmodule.exports = function(content) {\n  const options = this.getOptions()\n\n  /**\n   * 参数一：校验的规则\n   * 参数二：需要校验的数据\n   */\n  validate({\n    type: \"object\",\n    properties: {\n      \"username\": {\n        type: 'string'\n      },\n      'age': {\n        type: 'number'\n      }\n    }\n  }, options)\n\n  return content\n}\n```\n\n#### markdown loader\n\n```js\nconst { marked } = require('marked')\nconst hljs = require('highlight.js')\n\n\nconst renderer = {\n  code(obj) {\n    /*\n    {\n      type: 'code',\n      raw: '```javascript\\n' +\n        \"const a = '213'\\n\" +\n        'let obj = {\\n' +\n        '  age: 18\\n' +\n        '}\\n' +\n        \"console.log('aaa')\\n\" +\n        '```',\n      lang: 'javascript',\n      text: \"const a = '213'\\nlet obj = {\\n  age: 18\\n}\\nconsole.log('aaa')\"\n    }\n    */\n    console.log(obj)\n    const language = hljs.getLanguage(obj.lang) ? obj.lang : 'plaintext';\n    try {\n      const highlightedCode = hljs.highlight(obj.text, { language }).value;\n      return `<pre><code class=\"hljs ${language}\">${highlightedCode}</code></pre>`;\n    } catch (__) {\n      return `<pre><code class=\"hljs ${language}\">${obj.text}</code></pre>`;\n    }\n  }\n};\n\nmodule.exports = function (content) {\n  marked.use({ renderer: renderer })\n  const htmlContent = marked(content)\n  const moduleContent = `var md = \\`${htmlContent}\\`; export default md`\n\n  return moduleContent\n}\n```\n\n\n\n### 自定义插件\n\nwebpack 中的compiler 和 compilation 通过注入插件的方式，来监听 webpack 的声明周期，其创建了 Tapable 库中的各种 Hook 的实例\n\n1. webpack 函数中的 createCompiler 方法中，注册了所有的插件\n2. 在注册插件时，会调用插件函数或者插件对象的 apply 方法\n3. 插件方法会接受 compiler 对象，我们可以通过 compiler 对象来注册 Hook 事件\n4. 某些插件也会传入一个 compilation 的对象，我们也可以监听 compilation 的 hook 事件\n\n#### Tapable\n\nTapable 是管理着需要的 Hook，这些 Hook 可以被应用到我们的插件中\n\n- bail：当有返回值时，就不会执行后续的事件触发了\n- loop：当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容时，就退出事件\n- waterfall：当返回值不为 undefined 时，会将这次放回的结果作为下次事件的第一个参数\n- parallel：并行，会同时执行事件处理回调结束，不会等到这个事件执行结束才执行下一次事件处理回调\n- series：串行，会等待上一次异步的 Hook\n\n官方提供的 Hook\n\n- 同步 Hook：SyncHook、SyncBailHook、SyncWatefallHook、SyncLoopHook\n- 异步 Hook，两个事件处理回调，不会等待上一次处理回调结果后再执行下一次回调\n  - Paralle（并行）：AsyncPralleHook、AsyncParalleBailHook\n  - Series（串行）：AsyncSeriesHook、AsyncSeriesBailHook、AsyncSeriesWaterfallHook\n\n安装 tapable 库\n\n```bash\nnpm install tapable -D\n```\n\n基本使用\n\n```js\nconst { SyncHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      syncHook: new SyncHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.syncHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n    })\n\n    this.hooks.syncHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.syncHook.call('zhangsan', 18)\n```\n\nbail\n\n```js\nconst { SyncBailHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      bailHook: new SyncBailHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.bailHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 当存在返回值时，后续的回调将不会执行\n      return 123\n    })\n\n    this.hooks.bailHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.bailHook.call('zhangsan', 18)\n```\n\nloop\n\n```js\nconst { SyncLoopHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      loopHook: new SyncLoopHook(['name', 'age'])\n    }\n\n    let count = 3\n\n    // 使用 hook 监听事件\n    this.hooks.loopHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 当不存在返回值或者返回值为 undefined 时将会中断循环\n      return count -- === 0 ? undefined : count\n    })\n\n    this.hooks.loopHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.loopHook.call('zhangsan', 18)\n```\n\nwaterfall\n\n```js\nconst { SyncWaterfallHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      waterfallHook: new SyncWaterfallHook(['name', 'age'])\n    }\n\n    let count = 3\n\n    // 使用 hook 监听事件\n    this.hooks.waterfallHook.tap('event1', (name, age) => {\n      console.log('hook1 execute', name, age)\n      // 返回值不为 undefined 时，将作为下一个回调函数第一个参数\n      return { gender: 'male' }\n    })\n\n    this.hooks.waterfallHook.tap('event2', (name, age) => {\n      console.log('hook1 execute 2', name, age) // hook1 execute 2 { gender: 'male' } 18\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.waterfallHook.call('zhangsan', 18)\n```\n\nparallel\n\n```js\nconst { AsyncParallelHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      parallelHook: new AsyncParallelHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.parallelHook.tapAsync('event1', (name, age) => {\n      setTimeout(() => {\n        console.log('hook1 execute', name, age)\n      }, 1000)\n    })\n\n    this.hooks.parallelHook.tapAsync('event2', (name, age) => {\n      setTimeout(() => {\n        console.log('hook1 execute 2', name, age)\n      }, 900)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.parallelHook.callAsync('zhangsan', 18)\n// 输出结果\n// hook1 execute 2 zhangsan 18\n// hook1 execute zhangsan 18\n```\n\nseries\n\n```js\nconst { AsyncSeriesHook } = require('tapable')\n\nclass Compiler1 {\n  constructor() {\n    this.hooks = {\n      // 定义 hook， name，age 为调用这个 hook 需要传递的参数\n      serieslHook: new AsyncSeriesHook(['name', 'age'])\n    }\n\n    // 使用 hook 监听事件\n    this.hooks.serieslHook.tapAsync('event1', (name, age, callback) => {\n      setTimeout(() => {\n        console.log('hook1 execute', name, age)\n        // 调用 callback 下面的任务才会执行\n        callback()\n      }, 1000)\n    })\n\n    this.hooks.serieslHook.tapAsync('event2', (name, age, callback) => {\n      setTimeout(() => {\n        console.log('hook1 execute 2', name, age)\n        callback()\n      }, 900)\n    })\n  }\n}\n\nconst compiler = new Compiler1()\ncompiler.hooks.serieslHook.callAsync('zhangsan', 18, () => {\n  console.log('all tasks finished')\n})\n// 输出结果\n// hook1 execute zhangsan 18\n// hook1 execute 2 zhangsan 18\n// all tasks finished\n```\n\n\n\n## Babel\n\n> babel 是一个工具链，主要用于就浏览器或者环境中的 ECMAScript2015 + 代码转化为向后兼容版本的 JavaScript\n>\n> - 包括：语法转换、源代码转换、Polyfill 实现目标环境缺少的功能等\n> - 需下载 @babel/core @babel/cli\n\n在使用 babel 命令时可以设置 plugins 参数，将其转换为使用该插件后的代码：\n\n转化箭头函数为普通函数\n\n```bash\n# transform arrow function to function\nnpm install @babel/plugin-transform-arrow-functions -D\nnpx babel src --out-dir dist --plugin@babel/plugin-transform-arrow-functions\n```\n\n转化块级作用域\n\n```bash\n# transform block scoping\nnpm install @babel/plugin-transform-block-scoping -D\nnpm babel src --out-dir dist --plugin@babel/plugin-transform-block-scoping,@babel/plugin-transform-arrow-functions\n```\n\n### 解析原理\n\nhttps://github.com/jamiebuilds/the-super-tiny-compiler\n\n![1735832299456](.\\imgs\\babel)\n\n1. 解析阶段（Parsing）\n2. 转换阶段（Transformation）\n3. 生成阶段（Code Generation）\n\n\n\n### 预设\n\n安装 @babel/preset-env\n\n```bash\nnpm install @babel/preset-env -D\n\nnpx babel ./src --out-dir ./dist --presets=@babel/preset-env\n```\n\n### babel 配置文件\n\n可以将 babel 的配置信息编写到一个文件中\n\n- babel.config.json（或 .js, .cjs, .mjs）文件（推荐）\n  - 可以直接作用于 Monorepos 项目的子包，更加推荐\n- .babelrc.json （或 .babelrc, .js, .cjs, .mjs）文件\n  - 早期使用较多的配置方案，但是对于配置 Monorepos 项目是比较麻烦的\n\n```js\n// babel.config.js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      \n    }]\n  ]\n}\n```\n\n\n\n\n\n## Browserslist 插件\n\nBrowserslist 可以在不同的的前端工具之间，共享目标浏览器和 Node.js 版本的配置\n\n条件查询使用的是 caiuse-lite 的工具，这个工具的数据来自于 caniuse 的网站上\n\nbrowserslist 编写规则：\n\n- defaults：browserslist 的默认浏览器（>0.5%, last 2 versions, Firefox ESR, not dead）\n- 5%：通过全局使用情况统计信息选择的浏览器版本，>=, < 和 <=\n\ndead：24 个月内没有官方支持或更新的浏览器\n\nlast 2 versions：每个浏览器的最后两个版本\n\n### 使用方式\n\n1. 可以在 package.json 文件中编写\n\n```json\n\"browserlists\": [\n  \"last 2 versions\",\n  \"not dead\",\n  \"> 0.2%\"\n]\n```\n\n2. 在 .browserslistrc 文件中编写（最常使用）\n   1. 该配置将会在多个工具之间进行共享（postcss/babel）\n\n```markdown\n> 0.2%\nlast 2 versions\nnot dead\n```\n\n3. 可以在 webpack.config.js 文件中配置（不常用）\n\n```js\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              ['@babel/preset-env', {\n                targets: '>5%', // 将会覆盖 browserslist 文件中的内容\n              }]\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n\n\n## Polyfill\n\n将一些高版本 js 代码对应于低版本中不存在的 API（Promise，string.includes 等函数）采用补丁的方式进行替换\n\n安装对应依赖（开发和生产环境都需要依赖）\n\n```bash\nnpm install core-js regenerator-runtime\n```\n\nuseBuiltIns 属性的可选值：\n\n1. false：\n   - 打包后的文件不适用 polyfill 来进行适配\n   - 并且这个时候是不需要设置 corejs 属性的\n2. usage：\n   - 会根据源代码中出现的语言特性，自动检测所需要的 polyfill\n   - 这样可以确保最终包离的 polyfill 数量的最小化，打包的包相对较小\n   - 可以设置 corejs 属性来确定使用的 corejs 的版本\n3. entry\n   - 如果我们依赖的某一个库本身使用了 polyfill 的特性，但是因为我们使用的是 usage，所以之后用户浏览器可能会报错，如果担心这种情况，可以使用 entry\n   - 并且需要在入口文件中添加 `import 'core-js/stable'; import 'regenerator-runtime/runtime';` \n   - 这样做会根据 browserslist 目标导入所有的 polyfill，但是对应的包会很大\n\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      corejs: 3,\n      useBuiltIns: 'entry' // 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】\n    }]\n  ]\n}\n```\n\n入口文件 main.js\n\n```js\nimport 'core-js/stable'\nimport 'regenerator-runtime/runtime'\n\n// ...\n```\n\n\n\n## CDN 服务器\n\nCDN 称之为内容分发网络（Content Delivery Network 或 Content Distribution Network）\n\n- 它是指通过相互连接的网络系统，利用最靠近每个用户的服务器\n- 更快、更可靠的将音乐、图片、视频、应用程序以及其他文件发送给用户\n- 来提供高性能、可扩展性及低成本的网络内容传递给用户\n\n在开发中，我们使用 CDN 主要是两种方式\n\n1. 打包所有的静态资源，放到 CDN 服务器，用户所有资源都是通过 CDN 服务器加载的\n\n   ```js\n   module.exports = {\n     output: {\n       filename: '[name]-bundle.js',\n       chunkFilename: '[name]_chunk.js',\n       // path 必须指定绝对路径\n       path: path.resolve(__dirname, './build'),\n       clean: true, // when rebuild, the output dir will be cleaned\n       publicPath: 'https://xxxcdn.com', // 设置 CDN 服务器域名\n     },\n   }\n   ```\n\n   \n\n2. 一些第三方资源放到 CDN 服务器上\n\n   国内 CDN 平台 [BOOTCDN](https://www.bootcdn.cn/) \n\n   在 模板 index 中直接引入需要从 CDN 引用的第三方库\n\n   ```html\n     <script src=\"https://cdn.bootcdn.net/ajax/libs/react/18.3.1/umd/react.production.min.js\"></script>\n   ```\n\n   在 webpack 中配置相应从 CDN 引用的包\n\n   ```js\n   module.exports = {\n     externals: {\n       // key: 排除框架的名称，import xxx from 'key'\n       // value：从 CDN 请求下来的 js 中提供的对应名称\n       react: 'React',\n       // react_dom: 'ReactDom'\n     },\n   }\n   ```\n\n\n\n## Gulp\n\ngulp 的核心理念是 task runner\n\n- 可以定义自己的一系列任务，等待任务被执行\n- 基于文件 stream 的构建流\n- 我们可以使用 gulp 的插件体系来完成某些任务\n\nwebpack 的核心理念是 module bundler\n\n- webpack 是一个模块化的打包工具\n- 可以使用各种各样的 loader 来加载不同的模块\n- 可以使用各种各样的插件在 webpack 打包的生命周期完成其他任务\n\ngulp 相对于 webpack 的优缺点\n\n- gulp 相对于 webpack 思想更加的简单、医用，更适合编写一些自动化的任务\n- 但是目前对于大型项目（Vue、React、Angular）并不会使用 gulp 来构建，比如默认 gulp 是不支持模块化的\n\n### 基本使用\n\n安装对应依赖\n\n```bash\nnpm install gulp\n```\n\n编写 gulpfile 文件\n\n```js\nconst gulp = require('gulp')\n\n\n// 使用 npx gulp foo1 执行\nconst foo1 = (callback) => {\n  console.log('task 1 finished')\n  // 需要调用 callback 才能知道该任务已完成\n  callback()\n}\n\n// 执行方式二\ngulp.task('foo2', (callback) => {\n  console.log('task 2 finished')\n  callback()\n})\n\nmodule.exports = {\n  foo1\n}\n\n// 默认任务 通过 npx gulp\nmodule.exports.default = (callback) => {\n  console.log('default task finished')\n  callback()\n}\n```\n\n### 创建 gulp 任务\n\n每个 gulp 任务都是一个异步的 JavaScript 代码\n\n- 此函数可以接收一个 callback 作为参数，调用 callback 函数，那么该任务会结束\n- 或者是一个返回 stream、promise、event emitter、child process 或 observable 类型的函数\n\n任务可以是 public 或者 private 类型的\n\n- 公开任务（public tasks）从 gulpfile 中被导出（export），可以通过 gulp 命令直接调用\n- 私有任务（private tasks）被设计为在内部使用，通常作为 series() 或 parallel() 组合的组成部分\n\n*在 gulp 4 之前，注册任务时需要通过 gulp.task 的方式进行注册，也即上面的方式二*\n\n### 多任务\n\n```js\nconst { series, parallel } = require('gulp')\n\n\n// 使用 npx gulp foo1 执行\nconst foo1 = (callback) => {\n  setTimeout(() => {\n    console.log('foo1')\n    callback()\n  }, 3000)\n}\n\nconst foo2 = (callback) => {\n  setTimeout(() => {\n    console.log('foo2')\n    callback()\n  }, 2000)\n}\n\nconst foo3 = (callback) => {\n  setTimeout(() => {\n    console.log('foo3')\n    callback()\n  }, 1000)\n}\n// 任务会依次执行\nconst seriesTask = series(foo1, foo2, foo3)\n// 任务将并行执行\nconst parallelTask = parallel(foo1, foo2, foo3)\n\nmodule.exports = {\n  seriesTask,\n  parallelTask\n}\n```\n\n### 读写文件\n\ngulp 暴露了 src 和 dest 函数，用于处理计算机存放的文件\n\n- src 接收一个正则路径，并从文件系统中读取文件然后生成一个 Node 流（Stream），它将所有匹配的文件放入内存中并通过读取流（Stream进行处理）\n- 由 src 产生的流（Stream）应当从任务（task 函数）中返回并发出异步完成的信号\n- dest 接收一个输出目录作为参数，并且它还会产生一个 Node 流（Stream），通过该流将文件内容输出到文件中\n\npipe 方法接收一个转换流（Transform stream）或 可写流（Writable Stream）\n\n转换流或可写流，拿到数据之后可以对数据进行操作，再次传递给下一个转换流或可写流\n\n```js\nconst { src, dest } = require('gulp')\n\nconst copyFile = () => {\n  return src('./src/**').pipe(dest('./dist'))\n}\n\nmodule.exports = {\n  copyFile\n}\n```\n\n### 对 Js 文件进行转化和压缩\n\n```js\nconst { src, dest, watch } = require('gulp')\nconst babel = require('gulp-babel')\nconst terser = require('gulp-terser')\n\nconst zipFile = () => {\n  return src('./src/**')\n    .pipe(babel({ presets: ['@babel/preset-env']}))\n    // .pipe(terser({ mangle: { toplevel: true }}))\n    .pipe(terser({ toplevel: true }))\n    .pipe(dest('./dist'))\n}\n\n// 设置自动监听\nwatch('./src/**/*js', zipFile)\n\nmodule.exports = {\n  zipFile\n}\n```\n\n### 搭建项目\n\n安装依赖\n\n```bash\nnpm install gulp-babel gulp-terser gulp-htmlmin gulp-less gulp-inject -D\n```\n\nhtml 文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n  <!-- inject:css -->\n  <!-- endinject -->\n</head>\n<body>\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\ngulpfile.js\n\n```js\nconst { src, dest, series, parallel, watch } = require('gulp')\n\nconst babel = require('gulp-babel')\nconst terser = require('gulp-terser')\n\nconst less = require('gulp-less')\nconst inject = require('gulp-inject')\n\nconst htmlmin = require('gulp-htmlmin')\nconst browserSync = require('browser-sync')\n\nconst jsTask = () => {\n  return src('./src/**/*.js')\n    .pipe(babel({ presets: ['@babel/preset-env'] }))\n    .pipe(terser({ mangle: { toplevel: true }}))\n    .pipe(dest('./dist/js'))\n}\n\nconst cssTask = () => {\n  return src('./src/**/*.less')\n    .pipe(less())\n    .pipe(dest('./dist/css'))\n}\n\nconst htmlTask = () => {\n  return src('./src/**/*.html')\n    .pipe(htmlmin())\n    .pipe(dest('./dist'))\n}\n\n// 注入时使用相对路径设置 relative 为 true\nconst injectTask = () => {\n  return src('./dist/**/*.html')\n    .pipe(inject(src(['./dist/**/*.js', './dist/**/*.css']), { relative: true}))\n    .pipe(dest('./dist'))\n}\n\n// 开启本地服务\nconst bs = browserSync.create()\nconst serveTask = () => {\n  bs.init({\n    port: 8000,\n    open: true,\n    files: './dist/*',\n    server: {\n      baseDir: './dist'\n    }\n  })\n}\n\nconst parallelTask = parallel(jsTask, cssTask, htmlTask)\nconst buildTask = series(parallelTask, injectTask)\n\nwatch('./src/**/*', buildTask)\n\nconst serve = series(buildTask, serveTask)\n\nmodule.exports = {\n  serve,\n  buildTask\n}\nmodule.exports.default = buildTask\n```\n\n\n\n## Rollup\n\nRollup 是一个 JavaScript 的模块化打包工具，可以帮助我们编译小的代码到一个大的，复杂的代码中，比如一个库一个应用程序\n\n### rollup VS webpack\n\n- rollup 是一个模块化的打包工具，但是 rollup 主要是针对 ESModule 进行打包的\n- 另外 webpack 通常可以通过各种 loader 处理各样的文件，以及他们之间的依赖关系\n- rollup 更多时候是专注于处理 JavaScript 代码的（当然也可以是 css、font、vue 等文件）\n- 另外 rollup 的配置和理念相对于 webpack 来说，更加的简洁和容易理解\n- 在早期 webpack 不支持 tree shaking 时，rollup 具备更强的优势\n\n通常在实际项目开发过程中，我们都会使用 webpack（比如 react、angular 项目都是基于 webpack）\n\n在对库文件进行打包时，我们通常会使用 rollup （比如 vue、react、dayjs 源码本身都是基于 rollup的，vite 底层使用 rollup）\n\n### rollup 基本使用\n\n安装 rollup\n\n```bash\nnpm install rollup -D\n```\n\n使用命令进行打包\n\n```bash\n# 打包为 node 环境\nnpx rollup ./src/main.js -f cjs -o dist/bundle.cjs\n# 打包为浏览器环境\nnpx rollup ./src/main.js -f iife -o dist/bundle.cjs\n# 打包为 amd 环境\nnpx rollup ./src/main.js -f cjs -o dist/bundle.cjs\n# 打包为所有环境都支持，此时必须要指定名字\nnpx rollup ./src/main.js -f umd --name foo -o dist/bundle.cjs\n```\n\n原始代码内容\n\n```js\nconst foo = (name) => {\n  console.log('hello', name)\n}\n\nfoo('zhangsan')\n\nexport { foo }\n```\n\n\n\n打包后的代码结构\n\n```js\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = {}));\n})(this, (function (exports) { 'use strict';\n\n  const foo = (name) => {\n    console.log('hello', name);\n  };\n\n  foo('zhangsan');\n\n  exports.foo = foo;\n\n}));\n\n// 对上述代码的解析\n// 打包后的代码定义了一个函数，该函数接收两个参数 global 和 factory，factory 为函数\nconst foo = function (global, factory) {\n  // 判断是否存在 exports，并且 module 存在，则将 exports 传入\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  // 在浏览器中会存在 global 和 globalThis 变量指向 window，相当于传入 factory为 window.foo = {}\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foo = {}));\n}\n\n// 将 this 和 另外一个函数 传入该函数，执行该函数后，将会对全局对象绑定对应的属性\nfoo(this, (function (exports) { 'use strict';\n\n  const foo = (name) => {\n    console.log('hello', name);\n  };\n\n  foo('zhangsan');\n\n  // exports 将为对应环境中的 this（浏览器环境中 window，globalThis，this） 或 exports（node 环境中）\n  exports.foo = foo;\n\n}))\n```\n\n编写相应配置文件，通过 `npx rollup -c` 执行\n\n```js\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './dist/bundle.umd.js'\n  }\n}\n```\n\n对项目进行打包\n\n一般情况下不需要打包 node_modules 文件中的内容，用户可以通过依赖进行安装\n\n```js\n// 由于 loadsh 是通过 commonjs 导出的，默认情况下，rollup 不会对其进行打包\n// 需要安装 @rollup/plugin-commonjs 解决 使用 esmodule 方式导入 commonjs 包\n// 安装 @rollup/plugin-node-resolve 解决 打包 node_modules 文件中的内容\n\nimport _ from 'loadsh'\n\nconst foo = (name) => {\n  console.log(_.join([1, 2, 3]))\n  console.log('hello', name)\n}\n\nfoo('zhangsan')\n\nexport { foo }\n```\n\nrollup.config.js\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    nodeResolve()\n  ]\n}\n```\n\n对代码进行转化并压缩\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    // nodeResolve(),\n    babel({\n      presets: ['@babel/preset-env']\n    }),\n    terser()\n  ]\n}\n```\n\n### 处理 CSS 文件\n\n安装对应的插件\n\n```bash\nnpm install rollup-plugin-postcss postcss-preset-env -D\n```\n\n配置 rollup\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\nconst postcss = require('rollup-plugin-postcss')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_'\n    }\n  },\n  plugins: [\n    commonjs(),\n    // nodeResolve(),\n    babel({\n      presets: ['@babel/preset-env']\n    }),\n    terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    })\n  ]\n}\n```\n\n### 对 vue 进行打包\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nconst postcss = require('rollup-plugin-postcss')\nconst vue = require('rollup-plugin-vue')\n// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development\n// 所以需要执行该变量 process.env.NODE_ENV\nconst replace = require('rollup-plugin-replace')\n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_',\n      vue: 'vue'\n    }\n  },\n  plugins: [\n    // commonjs(),\n    nodeResolve(),\n    babel({\n      babelHelpers: 'bundled',\n      exclude: /node_modules/,\n      presets: ['@babel/preset-env']\n    }),\n    // terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    }),\n    vue(),\n    replace({\n      'process.env.NODE_ENV': '\"development\"'\n    })\n  ]\n}\n```\n\n### 搭建本地开发服务\n\n安装对应依赖\n\n```bash\n# 安装 本地服务\nnpm install rollup-plugin-server -D\n# 监听文件发生变化重新打包\nnpm install rollup-plugin-livereload -D\n```\n\n配置环境\n\n```js\n// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入\nconst commonjs = require('@rollup/plugin-commonjs')\n// 解决 打包 node_modules 文件中的内容\nconst nodeResolve = require('@rollup/plugin-node-resolve')\n// 对代码进行转换\nconst {babel} = require('@rollup/plugin-babel')\n// 对代码进行压缩\nconst terser = require('@rollup/plugin-terser')\n\nconst html = require('@rollup/plugin-html')\nconst postcss = require('rollup-plugin-postcss')\nconst vue = require('rollup-plugin-vue')\n// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development\n// 所以需要执行该变量 process.env.NODE_ENV\nconst replace = require('rollup-plugin-replace')\n\nconst server = require('rollup-plugin-server')\nconst livereload = require('rollup-plugin-livereload') \n\nmodule.exports = {\n  // 入口文件\n  input: './src/main.js',\n  output: {\n    // 打包后的格式\n    format: 'umd',\n    // 当使用 umd 时，需要执行名称\n    name: 'foo',\n    // 输出的文件\n    file: './build/bundle.umd.js',\n    globals: {\n      loadsh: '_',\n      vue: 'vue'\n    }\n  },\n  plugins: [\n    // commonjs(),\n    nodeResolve(),\n    babel({\n      babelHelpers: 'bundled',\n      exclude: /node_modules/,\n      presets: ['@babel/preset-env']\n    }),\n    // terser(),\n    postcss({\n      plugins: [require('postcss-preset-env')]\n    }),\n    // html({\n    //   include: './index.html'\n    // }),\n    vue(),\n    replace({\n      'process.env.NODE_ENV': '\"development\"'\n    }),\n    server({\n      port: 8000,\n      contentDir: '.'\n    }),\n    livereload()\n  ]\n}\n```\n\n执行命令\n\n```bash\n# -w: watch\nnpx rollup -c -w\n```\n\n在执行 rollup 命令时，可以指定参数\n\n```bash\n# 通过设定 environment 设置环境变量，可以在 rollup.config.js 文件中 通过 process.env.NODE_ENV 拿到该变量\nnpx rollup --environment NODE_ENV:production\nnpx rollup --environment NODE_ENV:development\n```\n\n\n\n## Vite\n\n由于现在浏览器支持 esmodule 模块化的加载，在开发时，可以直接使用这个特性。但是仍存在如下的问题：\n\n- 在加载文件时，后缀名不能省略\n- 加载别的文件时，该文件的依赖也将会在浏览器中进行下载，导致浏览器下载了很多个文件，占用了很大的带宽\n- 不支持 ts、vue 等代码文件\n\nvite 对 css、ts 原生支持。对于 less 的使用，只需要安装 less 插件即可\n\n\n\n### 配置对 vue 的支持\n\n需要安装配置 vue 的插件 @vite/plugin-vue\n\n```bash\nnpm install @vite/plugin-vue\n```\n\n配置 vite\n\n```js\nconst { defineConfig } = require('vite')\nconst vue = require('@vitejs/plugin-vue')\n\nmodule.exports = defineConfig({\n  plugins: [\n    vue()\n  ]\n})\n```\n\n\n\n## 自定义 CLI\n\n在项目根目录下创建 bin 文件夹，文件夹里面存放 js 代码，在文件头部需要标明执行该文件的环境路径\n\n```js\n#!D:/Dahui/Environment/Node/node\n\nconsole.log('test')\n```\n\n创建 package.json 文件，并配置 bin ，其中 demo01 表示执行的命令\n\n```json\n{\n  \"name\": \"cli\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"demo01\": \"bin/test.js\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\"\n}\n```\n\n通过 npm link 命令创建一个连接，该命令将会将配置的 bin 生成一个 demo01（linux），demo01.cmd（cmd） 和 demo01.ps1（powershell） 文件，该文件被存放到 node_global 文件夹中，用于执行该命令\n\n```bash\nnpm link\n```\n\n通过使用 commander 工具来解析传入的参数\n\n```js\n#!D:/Dahui/Environment/Node/node\n\nconst { program } = require('commander')\n\n// console.log('test')\n\n/**\n * [\n *   'D:\\\\Dahui\\\\Environment\\\\Node\\\\node.exe', // node 路径\n *   'D:\\\\Dahui\\\\Environment\\\\Node\\\\node-v18.14.0-win-x64\\\\node_global\\\\node_modules\\\\cli\\\\bin\\\\test.js', // 脚本路径\n *   '--version' // 参数\n * ]\n */\n// console.log(process.argv)\n\nconst version = require('../package.json').version\n\nprogram.version(version, '-V, --version')\n// <valuename> 用于传值 valuename 用于表明传值到哪个属性中\nprogram.option('-d, --destination <destination>', 'where to put the result')\n\n// 监听 --help 参数，当输入该参数将会执行里面的回调函数\nprogram.on('--help', () => {\n  console.log('')\n  console.log('others')\n  console.log('  1111111')\n  console.log('  2222222')\n})\n\nprogram.parse(process.argv)\n\n// 获取对 destination 传入的值\nconsole.log(program.opts().destination)\n```\n\n### 封装自定义命令，并从远程仓库下载\n\n```js\n#!/usr/bin/env node\n\nconst { program } = require('commander')\nconst { useHelp } = require('./core/help')\n\nuseHelp()\n\nprogram.parse(process.argv)\n```\n\nhelp.js\n\n```js\nconst { program } = require('commander')\nconst { createFromTemplate, createComponent } = require('./action')\n\nfunction useHelp() {\n  program\n    .option('-d, --destination <destination>', 'the destination of direcotry')\n    .option('-r, --remove', 'remove the files')\n\n  program\n    .command('create <template> [args]')\n    .description('the template of project to create')\n    .action(createFromTemplate)\n\n  program\n    .command('create-cpn <component> [...args]')\n    .description('createt a component from template')\n    .action(createComponent)\n}\n\n\nmodule.exports = {\n  useHelp\n}\n```\n\naction.js\n\n```js\nconst { promisify } = require('util')\n// 通过 promisify 使 download 变为一个 promise\nconst download = promisify(require('download-git-repo'))\nconst { program } = require('commander')\n// 添加模板编译库\nconst ejs = require('ejs')\nconst path = require('path')\nconst fs = require('fs')\n\nasync function executeCommand(command, args, opts) {\n  return new Promise((resolve) => {    \n    const { spawn } = require('child_process')\n    // 开启子进程\n    const childProcess = spawn(command, args, opts)\n    // 将输出传入到主进程的输出\n    childProcess.stdout.pipe(process.stdout)\n    childProcess.stderr.pipe(process.stderr)\n\n    childProcess.on('close', () => {resolve()})\n  })\n}\n\nasync function createFromTemplate(template, args) {\n  console.log(template, args)\n  /**\n   * 参数一：下载地址 需要指定下载的分支\n   * 参数二：下载到哪里\n   * 参数三：可选参数，设置为 clone 方式\n   */\n  await download('direct:git@github.com:DaHui-BT/scoped-css-webpack-plugin.git#main', template, { clone: true })\n  let command = 'npm'\n  // 判断当前平台，win 需要添加 .exe\n  console.log(process.platform)\n  if (process.platform == 'win32') {\n    command += '.exe'\n  }\n  // 自动安装相关的依赖\n  await executeCommand(command, ['install'], { cwd: `./${template}`})\n  // 自动运行该项目\n  await executeCommand(command, ['run', 'dev'], { cwd: `./${template}`})\n}\n\nasync function createComponent(component, args) {\n  await new Promise((resolve, reject) => {\n    const templatePath = path.resolve(__dirname, './template/template.vue.ejs')\n    // 编译模板，并传入需要替换的字符\n    ejs.renderFile(templatePath, { name: component, lowerName: component.toLowerCase() }, (err, result) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(result)\n      }\n    })\n  }).then(async res => {\n    const destination = program.opts().destination || './'\n    const filePath = path.resolve(__dirname, destination)\n    // 判断文件路径是否存在，不存在则创建\n    if (!fs.existsSync(filePath)) {\n      fs.mkdirSync(filePath)\n    }\n    // 同步写入文件\n    await fs.promises.writeFile(`${filePath}/${component}.vue`, res)\n  })\n}\n\nmodule.exports = {\n  createFromTemplate,\n  createComponent\n}\n```\n\n\n\n\n\n# [TODO](https://www.aliyundrive.com/drive/file/all/backup/66f25f1481f8a5c9b2ec48bdb4953a2c7483f60a)\n\n802 day134_Rollup-Vite打包与原理-脚手架开发_14_(掌握)vite-esbuild构建工具的原理解析.mp4 \n\n","slug":"learn","published":1,"updated":"2025-09-03T15:26:27.932Z","comments":1,"layout":"post","photos":[],"_id":"cmf9kkffg000cr44y0bdj07aw","content":"<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>使用 npm 安装第三方工具时。当父文件夹存在 node_modules 文件夹时，并执行下载命令时（在子文件夹下），将会自动下载第三方工具到父文件夹下的 node_modules 文件夹中。</p>\n<h3 id=\"path-模块\"><a href=\"#path-模块\" class=\"headerlink\" title=\"path 模块\"></a>path 模块</h3><p>resolve 将会从后往前解析路径，当遇到绝对路径将会停止</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>)) <span class=\"comment\">// a.txt\\b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>, <span class=\"string\">&#x27;/c.txt&#x27;</span>)) <span class=\"comment\">// D:\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;/b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;./c.txt/&#x27;</span>)) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(__dirname, __filename) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\index.js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><h3 id=\"exports-与-module-exports\"><a href=\"#exports-与-module-exports\" class=\"headerlink\" title=\"exports 与 module.exports\"></a><code>exports</code> 与 <code>module.exports</code></h3><p><code>exports</code> 和 <code>module.exports</code> 等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> === <span class=\"built_in\">exports</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径查找问题\"><a href=\"#路径查找问题\" class=\"headerlink\" title=\"路径查找问题\"></a>路径查找问题</h3><p>在使用 <code>require(&#39;路径&#39;)</code> 时，当路径前缀不包含 <code>/</code>、<code>./</code>、<code>../</code> 等相对或绝对路径时</p>\n<ul>\n<li>将会首先在 node.js 的环境中查找该模块，例如：<code>require(&#39;path&#39;)</code> </li>\n<li>当 node.js 环境不存在该模块时，将会在该目录的 node_modules 文件夹中查找，该目录中不存在 node_modules 文件夹则会一直向上寻找该文件夹，不存在则抛出异常</li>\n</ul>\n<p>当路径前缀包含 <code>/</code>、<code>./</code>、<code>../</code> 等相对或绝对路径时，首先会查找其路径对应的文件，当不存在该文件时：</p>\n<ul>\n<li>当不包含文件后缀名 (<code>.js</code>、<code>.json</code>、<code>.node</code>) 时，将会自动添加后缀，进行查找</li>\n<li>当添加后缀名后查找仍不存在，则会查找该路径命名的文件夹，当不存在该文件夹时抛出异常</li>\n<li>当文件夹存在时，则会在文件夹中查找 <code>index.js</code> 文件</li>\n</ul>\n<h3 id=\"导出引用\"><a href=\"#导出引用\" class=\"headerlink\" title=\"导出引用\"></a>导出引用</h3><p>在使用 <code>require</code> 和 <code>module.exports</code> 时，<code>module.exports</code> 所导出的为对象的引用，在导入文件中修改导入的变量时，原变量也会发生改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in aaa file: &#x27;</span>, a.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ma = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./aaa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file: &#x27;</span>, ma)</span><br><span class=\"line\"></span><br><span class=\"line\">ma.<span class=\"property\">a</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;bbb&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当执行后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file:  &#123; a: &#123; name: <span class=\"string\">&#x27;aaa&#x27;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">in</span> aaa file:  bbb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"module-对象\"><a href=\"#module-对象\" class=\"headerlink\" title=\"module 对象\"></a>module 对象</h3><p>当模块使用 require 引入时，该模块中的代码将会被自动执行一次。当多次引入也会只执行一次。</p>\n<p>node.js 源码中存在一个变量 <code>module.loaded</code> ，初始时为 false，当进行引入时该变量将会变为 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Module</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;.&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;~&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;~/aaa.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 代表是否已经加载该模块</span></span><br><span class=\"line\">  <span class=\"attr\">children</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">paths</span>: [ <span class=\"comment\">// 当前目录及父目录下的 node_modules 文件夹，用于查找第三方工具包</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\Project\\\\Algorithm-Exercise\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\Project\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\node_modules&#x27;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><p>其加载过程为同步过程，当一个模块加载完成之后，才会加载另一个，此方法经常在服务端使用（由于本地加载较为迅速）。此种方式在客户端加载时会导致卡顿或阻塞。由此引申出 AMD（Asynchronous Module Definition） 和 CMD （Common Module Definition），这两种方式都采用异步加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in aaa file&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ma = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file</span><br><span class=\"line\"><span class=\"keyword\">in</span> aaa file</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file</span><br></pre></td></tr></table></figure>\n\n<p>当存在循环引入时，其执行顺序（node.js 为深度优先搜索）</p>\n<ul>\n<li>a -&gt; b -&gt; c</li>\n<li>a -&gt; d -&gt; c</li>\n</ul>\n<p>则执行顺序为：a -&gt; b -&gt; c -&gt; d</p>\n<h2 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES-Module\"></a>ES-Module</h2><p>在 ES6（ES2015） 时推出</p>\n<h3 id=\"导入导出方式\"><a href=\"#导入导出方式\" class=\"headerlink\" title=\"导入导出方式\"></a>导入导出方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义时直接导出，该方式不能使用 as 关键字改别名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> aa = <span class=\"string\">&quot;aaaaaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"comment\">// 在浏览器中导入时，必须夹后缀（.js），导入声明只能在文件顶层使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import * as a from &#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.html</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&#x27;b.js&#x27;</span> type=<span class=\"string\">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>当导入时的变量与该文件中的变量产生冲突时，通过 as 关键字可以在导出文件中替换名字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta <span class=\"keyword\">as</span> a_a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a_a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;bbb&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, a_a)</span><br></pre></td></tr></table></figure>\n\n<p>或者在导入时起别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a <span class=\"keyword\">as</span> a_a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;bbb&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, a_a)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb, aaa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出优化\"><a href=\"#导入导出优化\" class=\"headerlink\" title=\"导入导出优化\"></a>导入导出优化</h3><p>当管理多个导入导出文件时，可采用如下优化方式（main.js 中需要引入 utils 文件夹下的所有工具类）。创建index.js 文件导入所有工具方法，并导出，此时 main.js 中只需要引入 index.js 文件中的方法即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- utils</span><br><span class=\"line\">\t-- parse.js</span><br><span class=\"line\">\t-- time.js</span><br><span class=\"line\">\t-- index.js</span><br><span class=\"line\">-- main.js</span><br></pre></td></tr></table></figure>\n\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导出所有</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;parse.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 如下更清晰</span></span><br><span class=\"line\">expor &#123; timeUtils &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;time.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"built_in\">parseInt</span>, timeUtils &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;utils/index.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"comment\">// 一个模块中只能存在一个默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default export&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> aaa <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入函数\"><a href=\"#导入函数\" class=\"headerlink\" title=\"导入函数\"></a>导入函数</h3><p>默认导入只能在文件顶层，浏览器在加载 <code>js</code> 文件时，会直接在文件顶层扫描 import 并下载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> importPromise = <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br><span class=\"line\">    importPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">a</span>) <span class=\"comment\">// aaa</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// import(&#x27;./a.js&#x27;).then((res) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(res.a) // aaa</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下导入方式将会报错，因为在执行之后才能知道具体要导入的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"title function_\">from</span> (<span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 ES11（ES2020） import 中添加了如下的属性：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    url<span class=\"punctuation\">:</span> &#x27;http<span class=\"punctuation\">:</span><span class=\"comment\">//127.0.0.1:5500/a.js&#x27;, // 加载该 js 文件所使用的 url</span></span><br><span class=\"line\">    resolve<span class=\"punctuation\">:</span> ƒ</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析流程-TODO\"><a href=\"#解析流程-TODO\" class=\"headerlink\" title=\"解析流程 TODO\"></a>解析流程 TODO</h3><h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>当所加载的第三方工具包的入口文件不为 index.js 文件时，无法通过 <code>require(&#39;第三方工具包&#39;)</code> 进行导入，可在第三方工具包中创建 <code>package.json</code> 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如第三方工具包的入口文件为 main.js</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;第三方工具包&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    version<span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    main<span class=\"punctuation\">:</span> <span class=\"string\">&quot;main.js&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h3><p>针对于特定名称的脚本可以省略 run 参数，例如：<code>npm start</code> ，可以省略 run 的命令如下：start、test、stop、restart</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        start<span class=\"punctuation\">:</span> <span class=\"string\">&quot;node main.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        build<span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack ...&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发依赖、生产依赖\"><a href=\"#开发依赖、生产依赖\" class=\"headerlink\" title=\"开发依赖、生产依赖\"></a>开发依赖、生产依赖</h3><p>开发依赖：只在开发过程中会使用到，例如：webpack。执行命令：<code>npm install/i xxx --save-dev/-D</code> </p>\n<p>生产依赖：在开发过程以及生产过程都会被使用到，例如：vue。执行命令：<code>npm install/i xxx --save/-S</code> </p>\n<p>peer 依赖：在依赖本库时需要先安装该依赖的库</p>\n<p><em>全局安装命令： <code>npm install xxx -g</code></em> </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    dependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.0&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    devDependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;5.0&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    peerDependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h3><p>semver 版本规范 <code>X.Y.Z</code> </p>\n<ul>\n<li>X 主版本号（major）：当做了不兼容的 API 修改时（可能不兼容之前的版本）</li>\n<li>Y 次版本号（minor）：当做了向下兼容的功能性新增（新功能增加，但兼容以前的版本）</li>\n<li>Z 修订号（patch）：当做了向下兼容的问题修正（没有新功能，修复了之前版本的 BUG）</li>\n</ul>\n<p><code>^</code> 和 <code>~</code> 前缀</p>\n<ul>\n<li><code>x.y.z</code> 代表特定的版本</li>\n<li><code>^x.y.z</code> 代表 x 是保持不变的，y 和 z 永远安装最新的版本</li>\n<li><code>~x.y.z</code> 表示 x 和 y 是保持不变的，z永远安装最新的版本</li>\n</ul>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取缓存目录</span></span><br><span class=\"line\">$ npm config get cache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取配置信息</span></span><br><span class=\"line\">$ npm config list</span><br><span class=\"line\"><span class=\"comment\"># ; &quot;user&quot; config from ~\\.npmrc</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># cache = &quot;~/node-v18.14.0-win-x64/node_cache&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># prefix = &quot;~/node-v18.14.0-win-x64/node_global&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># registry = &quot;http://registry.npm.taobao.org/&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ; node bin location = ~/node-v18.14.0-win-x64/node.exe</span></span><br><span class=\"line\"><span class=\"comment\"># ; node version = v18.14.0</span></span><br><span class=\"line\"><span class=\"comment\"># ; npm local prefix = ~/project</span></span><br><span class=\"line\"><span class=\"comment\"># ; npm version = 9.3.1</span></span><br><span class=\"line\"><span class=\"comment\"># ; cwd = ~/project</span></span><br><span class=\"line\"><span class=\"comment\"># ; HOME = ~</span></span><br><span class=\"line\"><span class=\"comment\"># ; Run `npm config ls -l` to show all defaults.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载某个第三方库</span></span><br><span class=\"line\">$ npm uninstall xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新构建项目依赖</span></span><br><span class=\"line\">$ npm rebuild</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">$ npm cache clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取本地使用的镜像源</span></span><br><span class=\"line\">$ npm config get registry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新镜像源</span></span><br><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">&quot;镜像源地址&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录到 npm registry</span></span><br><span class=\"line\">$ npm login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布当前包到 npm registry</span></span><br><span class=\"line\">$ npm publish</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除发布的包</span></span><br><span class=\"line\">$ npm unpublish</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 让发布的包过期</span></span><br><span class=\"line\">$ npm deprecate</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"npx\"><a href=\"#npx\" class=\"headerlink\" title=\"npx\"></a>npx</h2><p>当使用 npx 命令执行别的第三方包命令时，将会首先在该目录下的 node_modules 文件夹下的 .bin 文件夹中查找该命令是否存在，存在则会优先执行该命令</p>\n<h2 id=\"pnpm\"><a href=\"#pnpm\" class=\"headerlink\" title=\"pnpm\"></a>pnpm</h2><p>每创建一个项目都需要下载对应的第三方工具包，为了解决包占用较大的问题，pnpm采用软链接、硬链接</p>\n<ul>\n<li>扁平化：当一个工具包依赖另一个工具包时，将会直接下载到 node_modules 文件夹下，导致在<code>package.json</code> 中没有写入依赖项就可以导入。当卸载该工具包时，其依赖包也可能被删除，由此引发导入错误</li>\n<li>非扁平化：当一个工具包依赖另一个工具包时，依赖项将会下载到在该工具包中</li>\n</ul>\n<p><code>pnpm</code> 通过设置软连接的方式将一个工具包依赖的另一个工具包保存到该工具包目录中，安装的该工具包依赖的工具包将会以硬链接的方式存储到 <code>.pnpm</code> 目录下</p>\n<h2 id=\"Webpack-模块化打包工具\"><a href=\"#Webpack-模块化打包工具\" class=\"headerlink\" title=\"Webpack 模块化打包工具\"></a>Webpack 模块化打包工具</h2><blockquote>\n<p>Webpack 是一个静态的模块化打包工具。打包后成为最终的静态资源，用于部署到服务器中</p>\n<p>Webpack 支持 ES Module、CommonJS、AMD 等规范</p>\n</blockquote>\n<p>对项目进行打包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行当前项目依赖的 webpack 进行打包</span></span><br><span class=\"line\">$ npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>当将该命令集成到 <code>package.json</code> 文件中，则可以省略 <code>npx</code> ，<code>package.json</code> 中的命令将会自动在该项目依赖中进行查找</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack 默认会找到 <code>src/index.js</code> 文件进行打包</p>\n<ul>\n<li>可以通过参数指定要打包的文件：<code>npx webpack --entry ./src/main.js</code> 进行修改</li>\n<li>通过添加如下参数：<code>npx webpack --output-filename bundle.js</code> 修改输出的文件名</li>\n<li>通过添加如下参数：<code>npx webpack --output-dir build</code> 修改输出的文件夹名称</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>通过添加 webpack.config.js 文件修改 webpack 的配置信息。该文件采用 CommonJS 语法规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当该配置文件名字不为 webpack.config.js 时可使用 <code>npx webpack --config newname.config.js</code> 来指定</p>\n<p>为了简化命令可以使用 <code>package.json</code> 的 scripts ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config newname.config.js&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置后缀名\"><a href=\"#配置后缀名\" class=\"headerlink\" title=\"配置后缀名\"></a>配置后缀名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>] <span class=\"comment\">// 配置可省略的后缀名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打包模式\"><a href=\"#打包模式\" class=\"headerlink\" title=\"打包模式\"></a>打包模式</h3><p>可选择的打包方式为：none | development | production（默认）</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>development</td>\n<td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设置为 development，为模块和 chunk 启用有效的名</td>\n</tr>\n<tr>\n<td>production</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production，为模块和 chunk 启用确定新的混淆名称，FlagDependencyUsagePlugin、FlagIncludeChunksPlugin、ModuleConcatenationPlugin、NoEmitOnErrorsPlugin 和 TerserPligin</td>\n</tr>\n<tr>\n<td>none</td>\n<td>不适用任何默认优化选项</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HTML-webpack-plugin\"><a href=\"#HTML-webpack-plugin\" class=\"headerlink\" title=\"HTML webpack plugin\"></a>HTML webpack plugin</h3><p>将 html 文件打包生成到指定的文件夹中</p>\n<p>安装指定插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>使用指定插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-React-代码进行打包\"><a href=\"#对-React-代码进行打包\" class=\"headerlink\" title=\"对 React 代码进行打包\"></a>对 React 代码进行打包</h3><p>安装 react 依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react react-dom</span><br></pre></td></tr></table></figure>\n\n<p>安装对应编译 jsx 代码的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-systax-jsx -D</span><br><span class=\"line\">npm install @babel/plugin-transform-react-jsx -D</span><br><span class=\"line\">npm install @babel/plugin-transform-react-display-name -D</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者直接安装预设</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n\n<p>App 组件中的 jsx 代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = <span class=\"title function_\">memo</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Count: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span></span><br></pre></td></tr></table></figure>\n\n<p>main 入口文件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.jsx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>)</span><br></pre></td></tr></table></figure>\n\n<p>babel.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&#x27;entry&#x27;</span> <span class=\"comment\">// 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-react&#x27;</span>], <span class=\"comment\">// 解析 react 代码</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-TS-文件进行打包\"><a href=\"#对-TS-文件进行打包\" class=\"headerlink\" title=\"对 TS 文件进行打包\"></a>对 TS 文件进行打包</h3><ol>\n<li><p>可以使用 typescript compiler 进行打包，通过 tsc file.ts 进行手动打包</p>\n</li>\n<li><p>通过使用 ts-loader 进行整合 webpack 进行打包</p>\n<p>需要对应的 tsconfig.json 文件（可以通过 npx tsc -init 生成）</p>\n<p>会对 类型检查错误的代码进行报错</p>\n<p>打包的内容并不包括 polyfill 部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;ts-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>通过 ts 预设进行打包：@babel&#x2F;preset-typescript（推荐）</p>\n<p>但是 使用 babel-loader 将不会对 ts 代码类型检查错误进行报错</p>\n<p>此时会使用 polyfill 进行填充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>, <span class=\"comment\">// 不会对类型检查错误进行报错</span></span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-typescript&#x27;</span>]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// loader: &#x27;ts-loader&#x27; // 会对类型检查错误进行报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中既要类型检查抛出异常又要使用 polyfill 进行代码的填充，可以通过配置 package.json 脚本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;tsc --noEmit &amp;&amp; webpack&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>noEmit 表示不输出任何东西，也即不进行转换</p>\n</li>\n</ol>\n<h3 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h3><p>webapck 配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>, <span class=\"comment\">// reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写的主文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br></pre></td></tr></table></figure>\n\n<p>最后一行的注释指明了该打包后的文件的 source map 文件</p>\n<p>浏览器会根据我们的注释，查找相应的 source-map，并且根据  source-map 还原我们的代码，方便进行调试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">let</span> o=<span class=\"string\">&quot;abc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o),o=<span class=\"number\">123</span>,<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o)&#125;)();</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=bundle.js.map</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的 source-map 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 当前使用的版本，也就是最新的第三版</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bundle.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 打包后的文件（浏览器加载的文件）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MAAA,IAAIA,EAAO,MAEXC,QAAQC,IAAIF,GAEZA,EAAO,IAEPC,QAAQC,IAAIF,E&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// source-map 用来和源文件映射的信息（比如位置信息等），一串 base64 VLQ（variable length quantity，可变长度值）编码</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;webpack://webpack/./src/main.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 从哪些文件转换过来的 source-map 和打包的代码（最初始的文件）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourcesContent&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;let name = &#x27;abc&#x27;\\r\\n\\r\\nconsole.log(name)\\r\\n\\r\\nname = 123\\r\\n\\r\\nconsole.log(name)\\r\\n&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 转换前的具体代码信息（和 sources 是对应的关系）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;names&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;console&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 转换前的变量和属性名称（因为我们目前使用的是 development 模式，所以不需要保留转换前的名称）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourceRoot&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 所有的 sources 相对的根目录</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devtool-选项\"><a href=\"#devtool-选项\" class=\"headerlink\" title=\"devtool 选项\"></a>devtool 选项</h3><ul>\n<li><p>false：不使用 source-map，也就是没有任何和 source-map 相关的内容</p>\n</li>\n<li><p>none：production 模式下的默认值（什么值都不写），不生成 source-map</p>\n</li>\n<li><p>eval：development 模式下的默认值，不生成  source-map</p>\n<ul>\n<li>但是他会在 eval 执行的代码中，添加 &#x2F;&#x2F; # sourceURL&#x3D;;</li>\n<li>它会被浏览器在执行时解析，并且在调试面板中生成对应的一些文件目录，方便我们调试（但是此时还原的代码并不一定准确到具体的行、列）速度快</li>\n</ul>\n</li>\n<li><p>source-map：会生成完整的 source-map 文件，一般设置在 production 模式下</p>\n</li>\n<li><p>eval-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 eval 函数的后面（将 source-map 文件内容<strong>转化为 base64 放到 eval 函数的后面</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(... <span class=\"comment\">//# sourceMappingURL=data;application/json;charset=utf-8;base64,)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>inline-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 bundle 文件的后面（将 source-map 文件内容<strong>转化为 base64 放到 bundle 文件的最后面</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(... )</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=data;application/json;charset=utf-8;base64,</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>cheap-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是会更加高效一些（cheap 低开销），因为 <strong>他没有生成列映射</strong> （Column Mapping）</li>\n<li>因为再发开中，我们只需要行信息通常就可以定位到错误了</li>\n<li>在 development 中才会生成相应的 .js.map 文件</li>\n</ul>\n</li>\n<li><p>cheap-module-source-map</p>\n<ul>\n<li>会生成 sourcemap，类似于 cheap-source-map，但是对源自 loader 的 sourcemap 处理会更好</li>\n<li>如果 loader 对我们的源代码进行了特俗的处理，比如 babel 可能会删掉空行</li>\n</ul>\n</li>\n<li><p>hidden-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是不会对 sourcemap 文件进行引用</li>\n<li>相当于删除了打包文件中对 sourcemap 的引用注释。如果我们手动添加进行，那么 sourcemap 就会生效了</li>\n</ul>\n</li>\n<li><p>nosources-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是生成的 sourcemap 只有错误信息的提示，不会生成源代码文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>, <span class=\"comment\">// reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [], <span class=\"comment\">// add plugins</span></span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">              <span class=\"string\">&#x27;@babel/preset-env&#x27;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动化编译\"><a href=\"#自动化编译\" class=\"headerlink\" title=\"自动化编译\"></a>自动化编译</h3><p>通过如下方式可以达到自动编译</p>\n<ol>\n<li>webpack watch mode</li>\n<li>webpack-dev-server （常用）<ul>\n<li>webpack-dev-server 使用了 memfs 库，不会输出任何文件，生成的中间结果在内存中</li>\n</ul>\n</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 DevServer</p>\n<p>如果配置了 devServer.static 那么该内容会覆盖默认值，也即如果这个地方没有写 public 那么 public 将不会被认为是静态资源目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if this is defined, then the public must be insert to this list</span></span><br><span class=\"line\">    <span class=\"attr\">static</span>: [<span class=\"string\">&#x27;public&#x27;</span>, <span class=\"string\">&#x27;temp&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 进行压缩，会设置响应头中 content-encoding: gzip    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Webpack-性能优化\"><a href=\"#Webpack-性能优化\" class=\"headerlink\" title=\"Webpack 性能优化\"></a>Webpack 性能优化</h3><ul>\n<li>对打包结果进行优化<ul>\n<li>分包处理，Vue&#x2F;React 路由懒加载</li>\n<li>代码进行压缩（丑化 const message &#x3D;&gt; const m）</li>\n<li>删除无用代码（tree shaking）</li>\n<li>CDN 服务器（对第三方库使用 CDN）</li>\n</ul>\n</li>\n<li>对打包过程进行优化<ul>\n<li>加速打包的过程（exclude&#x2F;cache-loader）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-分包处理\"><a href=\"#1-分包处理\" class=\"headerlink\" title=\"1. 分包处理\"></a>1. 分包处理</h4><ul>\n<li>他的主要目的是将 <strong>代码分离到不同的 bundle 中</strong>，之后我们可以 <strong>按需加载</strong>，或者并行加载这些文件</li>\n<li>默认情况下，所有的 JavaScript 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，会影响首页加载的速度</li>\n<li>代码可以分离出更小的 bundle，以及控制资源加载优先级，提供代码的性能。</li>\n</ul>\n<p>webapck 中常用的代码分离方式：</p>\n<ol>\n<li><p>入口起点：使用 entry 配置手动分离代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用占位符：name 为上面的 index 和 main</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当多个入口文件对同一个库进行了依赖，可以设置起共享的库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">import</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">dependOn</span>: <span class=\"string\">&#x27;shared1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">import</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">dependOn</span>: <span class=\"string\">&#x27;shared1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// shared 可以配置多个，将会输出到 shared-xxx 文件中，其他依赖将会对该包进行引入 </span></span><br><span class=\"line\">    <span class=\"attr\">shared1</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用占位符：name 为上面的 index 和 main</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>防止重复：使用 Entry Dependencies 或 SplitChunksPlugin 去重和分离代码</p>\n</li>\n<li><p>动态导入：通过模块的内联函数调用来分离代码</p>\n<p>通过使用 import 函数 <code>import(&#39;xxx.js&#39;).then(() =&gt; &#123;&#123;&#125;&#125;)</code> </p>\n<p>当使用 import 函数时，then 中可以直接拿到导入文件的 export 对象，获取导出 default 对象，可以通过 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;xxx.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取默认导出对象</span></span><br><span class=\"line\">  res.<span class=\"title function_\">default</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 获取导出对象</span></span><br><span class=\"line\">  res.<span class=\"property\">obj</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过魔法注释修改打包后的文件名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 代表打包后的文件名，此名称替换 name 字段</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &#x27;a&#x27; */</span><span class=\"string\">&#x27;./ts/a&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">getResult</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;$123&#x27;</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;234&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>webpack 配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name]_chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// chunkFilename: &#x27;[id]_[name]_chunk.js&#x27;, // id 为文件路径，文件名使用 _ 分割的字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过配置 webpack 优化选项，设置分包方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// natural: 按照数字的顺序使用 id</span></span><br><span class=\"line\">    <span class=\"comment\">// named: development 下的默认值，文件路径使用 _ 分割</span></span><br><span class=\"line\">    <span class=\"comment\">// deterministic: 确定的，在不同的编译中不变的短数字 id</span></span><br><span class=\"line\">    <span class=\"attr\">chunkIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// default：async</span></span><br><span class=\"line\">      <span class=\"attr\">maxSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 20kb 拆分后的包最大大小，可能会大于最大值，由于一个函数或类可能很大</span></span><br><span class=\"line\">      <span class=\"attr\">minSize</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 拆分后的包最小大小</span></span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123; <span class=\"comment\">// 自定义拆包</span></span><br><span class=\"line\">        <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// test: /node_modules/, // 匹配路径中包含该字符串的</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>, <span class=\"comment\">// 匹配路径中包含 /node_modules/ 或者 \\node_modules\\</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_vendors.js&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">utils</span>: &#123; <span class=\"comment\">// 当编写的文件小于 minSize 时将不会被拆分</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/utils/</span>,</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_utils.js&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>chunIds 将会指定打包后文件的名字，当设置 natural 时，当导入文件发生变化时，不利于浏览器缓存，导致重新加载</p>\n<ul>\n<li>在开发中，推荐使用 named</li>\n<li>在打包过程中，推荐使用 deterministic</li>\n</ul>\n<h3 id=\"Prefetch-和-Preload\"><a href=\"#Prefetch-和-Preload\" class=\"headerlink\" title=\"Prefetch 和 Preload\"></a>Prefetch 和 Preload</h3><p>在声明 import 时，使用内置指令，告知浏览器</p>\n<ul>\n<li>prefetch（预获取）：将来某些导航下可能需要的资源</li>\n<li>preload（预加载）：当前导航下可能需要的资源</li>\n</ul>\n<p>于 prefetch 指令相比，preload 指令由许多不同之处</p>\n<ul>\n<li>preload chunk 会在父 chunk 加载时，以并行方式开始加载，prefetch 会在父 chunk 加载结束后开始加载</li>\n<li>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载</li>\n<li>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  <span class=\"comment\">/* webpackChunkName: &#x27;a&#x27; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* webpackPreload: true */</span> <span class=\"comment\">// 设置预加载</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;./ts/a&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">getResult</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;$123&#x27;</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;234&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Shimming\"><a href=\"#Shimming\" class=\"headerlink\" title=\"Shimming\"></a>Shimming</h3><p>shimming 是一个概念，是某一类功能的统称：</p>\n<ul>\n<li>shimming 翻译过来我们称之为 垫片，相当于给我们的代码填充一些垫片来处理一些问题</li>\n<li>比如我们现在以来一个第三方的库，这个第三方的库本身依赖 lodash，但是默认没有对 lodash 进行导入（认为全局存在 lodash），那么我们就可以通过 ProvidePlugin 来实现 shimming 的效果</li>\n</ul>\n<p>webpack 并不推荐随意的使用 shimming</p>\n<ul>\n<li>webpack 背后的整个理念是使前端开发更加模块化</li>\n<li>也就是说，需要编写具有封闭性的，不存在隐含依赖（比如全局变量）的彼此隔离的模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ProvidePlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相当于对全局使用 import ReactDom from &#x27;react-dom/client&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// ReactDom: &#x27;react-dom/client&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// 相当于对全局使用 import &#123; createRoot &#125; from &#x27;react-dom/client</span></span><br><span class=\"line\">      <span class=\"attr\">createRoot</span>: [<span class=\"string\">&#x27;react-dom/client&#x27;</span>, <span class=\"string\">&#x27;createRoot&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-CSS-文件进行单独提取\"><a href=\"#对-CSS-文件进行单独提取\" class=\"headerlink\" title=\"对 CSS 文件进行单独提取\"></a>对 CSS 文件进行单独提取</h3><p>提取 css 需要安装对应的依赖：<code>npm install mini-css-extract-plugin -D</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// &#x27;style-loader&#x27;, // style-loader 将会通过 js 在 html 插入 style 标签，并将相应的样式填入（开发阶段）</span></span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"comment\">// 提取到单独的 css 文件中，通过 link 进行引入（生产阶段）</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ], <span class=\"comment\">// loader 将会从后往前进行加载</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对打包后的文件名字，如下打包将会放入 css 文件夹中</span></span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name]-css.css&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;css/[name].css&#x27;</span>, <span class=\"comment\">// 分包后的包文件名</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Hash、ContentHash、ChunkHash\"><a href=\"#Hash、ContentHash、ChunkHash\" class=\"headerlink\" title=\"Hash、ContentHash、ChunkHash\"></a>Hash、ContentHash、ChunkHash</h3><p>在给打包的文件进行命名的时候，会使用 placeholder，placeholder 中有几个比较常用的属性</p>\n<p>hash 本身使通过 MD4 的散列函数处理后，生成一个 128 位的 hash 值（32 个十六进制）</p>\n<ul>\n<li>fullhash：当某个文件发生改变时，所有文件的 hash 值都会重新生成，且一样<ul>\n<li>hash 值的生成和整个项目有关系</li>\n<li>当存在两个入口文件 index.js 和 main.js 时，他们分别会输出到不同的 bundle.js 文件中，并且在文件名称中我们有使用 hash</li>\n<li>这个时候，如果修改了 index.js 文件中的内容，那么 hash 会发生变化，意味着两个文件的名称都会发生变化</li>\n</ul>\n</li>\n<li>chunkhash：当某个文件发生改变时，只有改变的文件 hash 值会重新生成<ul>\n<li>可以有效解决上面的问题，他会根据不同的入口进行解析来生成 hash 值</li>\n<li>比如修改了 index.js，那么 main.js 的 chunkhash 是不会发生改变的</li>\n<li>chunkhash 根据不同的入口文件(entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。当某个文件内容发生变动时，再次执行打包，只有该文件以及依赖该文件的文件的打包结果 hash 值会发生改变</li>\n</ul>\n</li>\n<li>contenthash：表示生成的文件 hash 名称，只和内容有关（推荐）<ul>\n<li>比如我们的 index.js 引入了一个 style.css，style.css 有被抽取到一个独立的 css 文件</li>\n<li>这个 css 文件在命名时，如果我们使用的是 chunkhash，那么当 index.js 文件的内容发生变化时，css 文件的命名也会发生变化</li>\n<li>这个时候我们可以使用 contenthash</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"DLL-库\"><a href=\"#DLL-库\" class=\"headerlink\" title=\"DLL 库\"></a>DLL 库</h3><p>DLL 全程是动态链接库（Dynamic Link Library）</p>\n<ul>\n<li>它指的是我们可以共享，并且不经常改变的代码，抽取称一个共享的库</li>\n<li>这个库在之后编译的过程中，会被引入到其他项目的代码中</li>\n</ul>\n<p>使用过程：</p>\n<ol>\n<li>打包 DLL 库</li>\n<li>项目中引入 DLL 库</li>\n</ol>\n<p>现在已经不再使用，移除原因：webpack 4 已经提供很好的性能，没有必要再花费时间去维护 DLL</p>\n<h3 id=\"Terser\"><a href=\"#Terser\" class=\"headerlink\" title=\"Terser\"></a>Terser</h3><ul>\n<li><p>Terser 是一个 JavaScript 的解析（Parser）、Mangler（绞肉机）、Compressor（压缩机） 的工具集</p>\n</li>\n<li><p>早期我们会使用 uglify-js 来压缩、丑化我们的 JavaScript 代码，但是目前已经不再维护，并且不支持 ES6+ 的语法</p>\n</li>\n<li><p>Terser 是从 uglify-es fork 过来的，并且保留了他原来的大部分 API 以及适配 uglify-es 和 uglify-js@3 等</p>\n</li>\n</ul>\n<h4 id=\"命令行使用方式\"><a href=\"#命令行使用方式\" class=\"headerlink\" title=\"命令行使用方式\"></a>命令行使用方式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terser [filename] -o [outputfilename] -c [arguments] -m [arguments]</span><br></pre></td></tr></table></figure>\n\n<p>-c 表示压缩（compress）</p>\n<ul>\n<li>arrows：class 或 object 中的函数，转换成箭头函数</li>\n<li>arguments：将函数中使用的 arguments[index] 转成对应的形参名称</li>\n<li>dead_code：移除不可达的代码（tree shaking）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx terser a.js -o a.min.js -c arrows=<span class=\"literal\">true</span>,arguments=<span class=\"literal\">true</span>,dead_code=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>优化前代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name1, name2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1, name2)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>], <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;234&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;lisi&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优化后代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name1,name2</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1,name2),<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1,name2)&#125;<span class=\"title function_\">test</span>(<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;234&quot;</span>);<span class=\"keyword\">const</span> obj=&#123;<span class=\"attr\">bar</span>:<span class=\"function\">()=&gt;</span><span class=\"string\">&quot;bar&quot;</span>&#125;;<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;name=<span class=\"string\">&quot;zhangsan&quot;</span>;<span class=\"title function_\">getName</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;lisi&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>-m 选项</p>\n<ul>\n<li><p>top_level：优化顶层所有变量名</p>\n</li>\n<li><p>keep_fnames：保持函数原名</p>\n</li>\n<li><p>keep_classnames：保持原类名</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx terser .\\src\\main.js -o main.min.js -c arrows=<span class=\"literal\">true</span>,arguments=<span class=\"literal\">true</span>,dead_code=<span class=\"literal\">true</span> -m toplevel=<span class=\"literal\">true</span>,keep_fnames=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">n,s</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n,s),<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n,s)&#125;<span class=\"title function_\">test</span>(<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;234&quot;</span>);<span class=\"keyword\">const</span> n=&#123;<span class=\"attr\">bar</span>:<span class=\"function\">()=&gt;</span><span class=\"string\">&quot;bar&quot;</span>&#125;;<span class=\"keyword\">class</span> <span class=\"title class_\">s</span>&#123;name=<span class=\"string\">&quot;zhangsan&quot;</span>;<span class=\"title function_\">getName</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;lisi&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-webpack-中配置-terser\"><a href=\"#在-webpack-中配置-terser\" class=\"headerlink\" title=\"在 webpack 中配置 terser\"></a>在 webpack 中配置 terser</h4><ul>\n<li>在 webpack 中有一个 minimizer 属性，在 production 模式下，默认就是使用 TerserPlugin 来处理我们的代码的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[contenthash:10]-[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 屏蔽第三方库中的注释</span></span><br><span class=\"line\">        <span class=\"attr\">extractComments</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 使用多进程并发提高构建速度，默认值是 true</span></span><br><span class=\"line\">        <span class=\"comment\">// 并发运行的默认数量是 os.cpu().length - 1</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们也可以设置自己的个数，使用默认即可</span></span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 配置函数中使用 arguments 进行优化</span></span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 未被引用的代码将被删除</span></span><br><span class=\"line\">            <span class=\"attr\">unused</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 配置 Mangler（绞肉机）</span></span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 对 mangle 传入的参数</span></span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CSS-压缩\"><a href=\"#CSS-压缩\" class=\"headerlink\" title=\"CSS 压缩\"></a>CSS 压缩</h3><p>需要安装对应的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 压缩通常是去除无用的空格等，它使用的是 cssnano 工具来进行优化、压缩 CSS 也可以单独使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CSSMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[contenthash:10]-[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CSSMinimizerPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;style/[name]-[contenthash:10].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置文件的拆分\"><a href=\"#webpack-配置文件的拆分\" class=\"headerlink\" title=\"webpack 配置文件的拆分\"></a>webpack 配置文件的拆分</h3><p>在编写 webpack 配置文件时，可以导出一个函数，并且可以通过 –env 给该函数传入相应的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> commonConfig</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;multiply_config&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack --config ./config/common.config.js --env development&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;^5.97.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^6.0.1&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 webpack-merge 插件进行拆分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> production = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./production.config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> development = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./development.config&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HTMLWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(commonConfig, production)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(commonConfig, development)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// development.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// production.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCSSExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CSSMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arrows</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_classnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CSSMinimizerPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCSSExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCSSExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name]-[contenthash:10].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TreeShaking\"><a href=\"#TreeShaking\" class=\"headerlink\" title=\"TreeShaking\"></a>TreeShaking</h3><p>通过使用 <code>optimization.userdExports: true</code> 联合 terser 进行删除不会使用的代码</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用该参数，将会在生成的代码中标注那些函数没被使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过 terser plugin 对标记的代码进行删除</span></span><br><span class=\"line\">    <span class=\"comment\">// plugin 模式下会自动开启该功能</span></span><br><span class=\"line\">    <span class=\"attr\">usedExports</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arrows</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_classnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 sideEffects 方式删除多余代码在 package.json 中</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;multiply_config&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 告诉 webpack 所有文件都没有副作用，可以删除</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;sideEffects&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过数组的方式告诉 webpack 那些文件存在副作用</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sideEffects&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;./src/utils/sideEffect.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;*.css&quot;</span> <span class=\"comment\">// 所有 css 将不会被优化删除</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/main.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在模块中使用类似 <code>window.a = &#39;123&#39;</code> 就时副作用代码</p>\n<h4 id=\"CSS-tree-shaking\"><a href=\"#CSS-tree-shaking\" class=\"headerlink\" title=\"CSS tree shaking\"></a>CSS tree shaking</h4><p>安装对应依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Scope-Hosting\"><a href=\"#Scope-Hosting\" class=\"headerlink\" title=\"Scope Hosting\"></a>Scope Hosting</h3><p>由于打包之后的文件每个模块会存在一个单独的作用域，在一个模块中使用另一个模块中的函数等将会涉及跨作用域的问题，从而导致的性能低下。</p>\n<p>该配置在 production 模式下是默认开启的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">ModuleConcatenationPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HTTP-压缩\"><a href=\"#HTTP-压缩\" class=\"headerlink\" title=\"HTTP 压缩\"></a>HTTP 压缩</h3><p>HTTP 压缩是一种内置在服务器和客户端之间的，以改进传输速度和带宽利用率的方式</p>\n<ol>\n<li><p>第一步，http 数据在服务器发送前就已经被压缩了；（可以在 webpack 中完成）</p>\n</li>\n<li><p>第二步，兼容的浏览器在向服务器发送请求时，或告知服务器自己支持哪些压缩格式</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/encrypted-area</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.example.com</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三步，服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Encoding</span><span class=\"punctuation\">: </span>gzip</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Gzip-压缩\"><a href=\"#Gzip-压缩\" class=\"headerlink\" title=\"Gzip 压缩\"></a>Gzip 压缩</h3><p>webpack 中相当于是实现了 HTTP 压缩的第一步操作，我们可以使用 CompressionPlugin</p>\n<ul>\n<li><p>安装 CompressionPlugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install compression-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 CompressionPlugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(css|js)$/</span>, <span class=\"comment\">// 匹配哪些文件将被压缩</span></span><br><span class=\"line\">      <span class=\"comment\">// threshold: 500, // 设置文件从多大开始压缩</span></span><br><span class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0.7</span>, <span class=\"comment\">// 至少压缩的比例</span></span><br><span class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;gzip&#x27;</span> <span class=\"comment\">// 采用的压缩算法</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"HTML-压缩\"><a href=\"#HTML-压缩\" class=\"headerlink\" title=\"HTML 压缩\"></a>HTML 压缩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> production = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./production.config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> development = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./development.config&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = <span class=\"keyword\">function</span>(<span class=\"params\">isProduction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HTMLWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当文件内容发生改变的时候才重新生成</span></span><br><span class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: isProduction ? &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 压缩时移除注释</span></span><br><span class=\"line\">          <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除空属性，例如 &lt;div class=&#x27;&#x27;&gt;&lt;/div&gt; =&gt; &lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">removeEmptyAttributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 移除多以的属性，例如：&lt;input type=&#x27;text&#x27;&gt; =&gt; &lt;input&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">removeRedundantAttributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除空行和空格</span></span><br><span class=\"line\">          <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 压缩内联 css</span></span><br><span class=\"line\">          <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 压缩内联 js</span></span><br><span class=\"line\">          <span class=\"attr\">minifyJS</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">mangle</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125; : <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">commonConfig</span>(<span class=\"literal\">true</span>), production)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">commonConfig</span>(<span class=\"literal\">false</span>), development)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"针对于打包过程进行分析\"><a href=\"#针对于打包过程进行分析\" class=\"headerlink\" title=\"针对于打包过程进行分析\"></a>针对于打包过程进行分析</h3><p>需要安装 speed-measure-webpack-plugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install speed-measure-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对打包后的文件进行分析\"><a href=\"#对打包后的文件进行分析\" class=\"headerlink\" title=\"对打包后的文件进行分析\"></a>对打包后的文件进行分析</h3><p>方式一：添加 <code>--profile --json=stats.json</code> 将会生成 stats.json 文件，该文件可通过 webpack 的在线分析平台进行分析</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/common.config.js --env development --profile --json=stats.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:pro&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/common.config.js --env production&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>方式二：使用插件进行分析打包后的文件 <code>webpack-bundle-analyzer</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure>\n\n<p>在 webpack 中配置该插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">BundleAnalyzerPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方式会自动开启一个端口用于展示生成后的文件状态：localhost:8080 </p>\n<h2 id=\"Webpack-源码\"><a href=\"#Webpack-源码\" class=\"headerlink\" title=\"Webpack 源码\"></a>Webpack 源码</h2><h3 id=\"createCompiler\"><a href=\"#createCompiler\" class=\"headerlink\" title=\"createCompiler\"></a>createCompiler</h3><p>webpack 首先会创建 compiler，然后注册插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">WebpackOptions</span>&#125; rawOptions options object</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [compilerIndex] index of compiler</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Compiler</span>&#125; a compiler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createCompiler</span> = (<span class=\"params\">rawOptions, compilerIndex</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> options = <span class=\"title function_\">getNormalizedWebpackOptions</span>(rawOptions);</span><br><span class=\"line\">\t<span class=\"title function_\">applyWebpackOptionsBaseDefaults</span>(options);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler</span>(</span><br><span class=\"line\">\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string</span>&#125; */</span> (options.<span class=\"property\">context</span>),</span><br><span class=\"line\">\t\toptions</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">NodeEnvironmentPlugin</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">infrastructureLogging</span>: options.<span class=\"property\">infrastructureLogging</span></span><br><span class=\"line\">\t&#125;).<span class=\"title function_\">apply</span>(compiler);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(options.<span class=\"property\">plugins</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> plugin <span class=\"keyword\">of</span> options.<span class=\"property\">plugins</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当插件是一个函数时将会执行这个函数，传入 compiler，并给该函数绑定 compiler</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">WebpackPluginFunction</span>&#125; */</span></span><br><span class=\"line\">\t\t\t\t(plugin).<span class=\"title function_\">call</span>(compiler, compiler);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (plugin) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当插件时一个对象时，必须存在一个 apply 函数，compiler 将会传入这个函数</span></span><br><span class=\"line\">\t\t\t\tplugin.<span class=\"title function_\">apply</span>(compiler);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolvedDefaultOptions = <span class=\"title function_\">applyWebpackOptionsDefaults</span>(</span><br><span class=\"line\">\t\toptions,</span><br><span class=\"line\">\t\tcompilerIndex</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolvedDefaultOptions.<span class=\"property\">platform</span>) &#123;</span><br><span class=\"line\">\t\tcompiler.<span class=\"property\">platform</span> = resolvedDefaultOptions.<span class=\"property\">platform</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">environment</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">afterEnvironment</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebpackOptionsApply</span>().<span class=\"title function_\">process</span>(options, compiler);</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">initialize</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"webpack-解析过程\"><a href=\"#webpack-解析过程\" class=\"headerlink\" title=\"webpack 解析过程\"></a>webpack 解析过程</h3><h3 id=\"自定义-Loader\"><a href=\"#自定义-Loader\" class=\"headerlink\" title=\"自定义 Loader\"></a>自定义 Loader</h3><p>Loader 是用于对模块的源代码进行转换（处理），Loader 本质上是一个导出为函数的 Js 模块，Loader  runner 库会调用这个函数，然后将上一个 loader 产生的结果或者资源文件传入进去</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-[contenthash:6].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;./loaders/loader04.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: [</span></span><br><span class=\"line\">      <span class=\"comment\">//     // 可以使用相对路径，loader 将会从后往前进行加载</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader01.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader02.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader03.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   ]</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如下代码也将会从后往前加载</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader01.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader02.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader03.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>loader01.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"callback-函数\"><a href=\"#callback-函数\" class=\"headerlink\" title=\"callback 函数\"></a>callback 函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 callback 可以返回信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = <span class=\"variable language_\">this</span>.<span class=\"property\">callback</span></span><br><span class=\"line\">  <span class=\"comment\">// 当 return 和 callabck 同时存在时，callback 返回的内容将会传递给下一个 loader</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一： 异常信息</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：返回给下一个 loader 的内容</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// callback(null, content + &#x27;\\n//aaaaaaaaaaa&#x27;)</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当将 callback 放到异步函数里面，其返回值将不生效</span></span><br><span class=\"line\">    <span class=\"comment\">// 其后面的 loader 将不会延迟执行</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content + <span class=\"string\">&#x27;\\n//aaaaaaaaaaa&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==========2=========&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"async-函数（异步函数）\"><a href=\"#async-函数（异步函数）\" class=\"headerlink\" title=\"async 函数（异步函数）\"></a>async 函数（异步函数）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callabck = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 通过 async 返回的函数作为异步函数，该 loader 将被视为一个异步 loader</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下一个 loader 的 content 参数将会加上这个 loader 返回的结果，其优先级大于 return，return 返回的东西将不会生效</span></span><br><span class=\"line\">    <span class=\"comment\">// 其后面的 loader 将会延后执行</span></span><br><span class=\"line\">    <span class=\"title function_\">callabck</span>(<span class=\"literal\">null</span>, content + <span class=\"string\">&#x27;\\n//3333333&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==========3=========&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给-loader-传递参数\"><a href=\"#给-loader-传递参数\" class=\"headerlink\" title=\"给 loader 传递参数\"></a>给 loader 传递参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;loader-utils&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方式一：通过 loader-utils （webpack 开发）的库来获取</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>)) <span class=\"comment\">// 现在执行将会报错 TypeError: getOptions is not a function</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式二：通过 this.getOptions() 函数来获取</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getOptions</span>()) <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27;, age: 18 &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对传入的参数进行校验\"><a href=\"#对传入的参数进行校验\" class=\"headerlink\" title=\"对传入的参数进行校验\"></a>对传入的参数进行校验</h4><p>需要使用第三方库的支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install schema-utils -D</span><br></pre></td></tr></table></figure>\n\n<p>loader.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOptions</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一：校验的规则</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：需要校验的数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;username&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"markdown-loader\"><a href=\"#markdown-loader\" class=\"headerlink\" title=\"markdown loader\"></a>markdown loader</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; marked &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;marked&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> hljs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;highlight.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">code</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      type: &#x27;code&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      raw: &#x27;```javascript\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;const a = &#x27;213&#x27;\\n&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;let obj = &#123;\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;  age: 18\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;&#125;\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;console.log(&#x27;aaa&#x27;)\\n&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;```&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      lang: &#x27;javascript&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      text: &quot;const a = &#x27;213&#x27;\\nlet obj = &#123;\\n  age: 18\\n&#125;\\nconsole.log(&#x27;aaa&#x27;)&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> language = hljs.<span class=\"title function_\">getLanguage</span>(obj.<span class=\"property\">lang</span>) ? obj.<span class=\"property\">lang</span> : <span class=\"string\">&#x27;plaintext&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> highlightedCode = hljs.<span class=\"title function_\">highlight</span>(obj.<span class=\"property\">text</span>, &#123; language &#125;).<span class=\"property\">value</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;pre&gt;&lt;code class=&quot;hljs <span class=\"subst\">$&#123;language&#125;</span>&quot;&gt;<span class=\"subst\">$&#123;highlightedCode&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;pre&gt;&lt;code class=&quot;hljs <span class=\"subst\">$&#123;language&#125;</span>&quot;&gt;<span class=\"subst\">$&#123;obj.text&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  marked.<span class=\"title function_\">use</span>(&#123; <span class=\"attr\">renderer</span>: renderer &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> htmlContent = <span class=\"title function_\">marked</span>(content)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleContent = <span class=\"string\">`var md = \\`<span class=\"subst\">$&#123;htmlContent&#125;</span>\\`; export default md`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> moduleContent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"自定义插件\"><a href=\"#自定义插件\" class=\"headerlink\" title=\"自定义插件\"></a>自定义插件</h3><p>webpack 中的compiler 和 compilation 通过注入插件的方式，来监听 webpack 的声明周期，其创建了 Tapable 库中的各种 Hook 的实例</p>\n<ol>\n<li>webpack 函数中的 createCompiler 方法中，注册了所有的插件</li>\n<li>在注册插件时，会调用插件函数或者插件对象的 apply 方法</li>\n<li>插件方法会接受 compiler 对象，我们可以通过 compiler 对象来注册 Hook 事件</li>\n<li>某些插件也会传入一个 compilation 的对象，我们也可以监听 compilation 的 hook 事件</li>\n</ol>\n<h4 id=\"Tapable\"><a href=\"#Tapable\" class=\"headerlink\" title=\"Tapable\"></a>Tapable</h4><p>Tapable 是管理着需要的 Hook，这些 Hook 可以被应用到我们的插件中</p>\n<ul>\n<li>bail：当有返回值时，就不会执行后续的事件触发了</li>\n<li>loop：当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容时，就退出事件</li>\n<li>waterfall：当返回值不为 undefined 时，会将这次放回的结果作为下次事件的第一个参数</li>\n<li>parallel：并行，会同时执行事件处理回调结束，不会等到这个事件执行结束才执行下一次事件处理回调</li>\n<li>series：串行，会等待上一次异步的 Hook</li>\n</ul>\n<p>官方提供的 Hook</p>\n<ul>\n<li>同步 Hook：SyncHook、SyncBailHook、SyncWatefallHook、SyncLoopHook</li>\n<li>异步 Hook，两个事件处理回调，不会等待上一次处理回调结果后再执行下一次回调<ul>\n<li>Paralle（并行）：AsyncPralleHook、AsyncParalleBailHook</li>\n<li>Series（串行）：AsyncSeriesHook、AsyncSeriesBailHook、AsyncSeriesWaterfallHook</li>\n</ul>\n</li>\n</ul>\n<p>安装 tapable 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install tapable -D</span><br></pre></td></tr></table></figure>\n\n<p>基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">syncHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>bail</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncBailHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">bailHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 当存在返回值时，后续的回调将不会执行</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>loop</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncLoopHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">loopHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncLoopHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 当不存在返回值或者返回值为 undefined 时将会中断循环</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> count -- === <span class=\"number\">0</span> ? <span class=\"literal\">undefined</span> : count</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>waterfall</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncWaterfallHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">waterfallHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncWaterfallHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 返回值不为 undefined 时，将作为下一个回调函数第一个参数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age) <span class=\"comment\">// hook1 execute 2 &#123; gender: &#x27;male&#x27; &#125; 18</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>parallel</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">AsyncParallelHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">parallelHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">      &#125;, <span class=\"number\">900</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute 2 zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute zhangsan 18</span></span><br></pre></td></tr></table></figure>\n\n<p>series</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">AsyncSeriesHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">serieslHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 callback 下面的任务才会执行</span></span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">      &#125;, <span class=\"number\">900</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;all tasks finished&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute 2 zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// all tasks finished</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><blockquote>\n<p>babel 是一个工具链，主要用于就浏览器或者环境中的 ECMAScript2015 + 代码转化为向后兼容版本的 JavaScript</p>\n<ul>\n<li>包括：语法转换、源代码转换、Polyfill 实现目标环境缺少的功能等</li>\n<li>需下载 @babel&#x2F;core @babel&#x2F;cli</li>\n</ul>\n</blockquote>\n<p>在使用 babel 命令时可以设置 plugins 参数，将其转换为使用该插件后的代码：</p>\n<p>转化箭头函数为普通函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># transform arrow function to function</span></span><br><span class=\"line\">npm install @babel/plugin-transform-arrow-functions -D</span><br><span class=\"line\">npx babel src --out-dir dist --plugin@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure>\n\n<p>转化块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># transform block scoping</span></span><br><span class=\"line\">npm install @babel/plugin-transform-block-scoping -D</span><br><span class=\"line\">npm babel src --out-dir dist --plugin@babel/plugin-transform-block-scoping,@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析原理\"><a href=\"#解析原理\" class=\"headerlink\" title=\"解析原理\"></a>解析原理</h3><p><a href=\"https://github.com/jamiebuilds/the-super-tiny-compiler\">https://github.com/jamiebuilds/the-super-tiny-compiler</a></p>\n<p><img src=\"/paw/.%5Cimgs%5Cbabel\" alt=\"1735832299456\"></p>\n<ol>\n<li>解析阶段（Parsing）</li>\n<li>转换阶段（Transformation）</li>\n<li>生成阶段（Code Generation）</li>\n</ol>\n<h3 id=\"预设\"><a href=\"#预设\" class=\"headerlink\" title=\"预设\"></a>预设</h3><p>安装 @babel&#x2F;preset-env</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/preset-env -D</span><br><span class=\"line\"></span><br><span class=\"line\">npx babel ./src --out-dir ./dist --presets=@babel/preset-env</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-配置文件\"><a href=\"#babel-配置文件\" class=\"headerlink\" title=\"babel 配置文件\"></a>babel 配置文件</h3><p>可以将 babel 的配置信息编写到一个文件中</p>\n<ul>\n<li>babel.config.json（或 .js, .cjs, .mjs）文件（推荐）<ul>\n<li>可以直接作用于 Monorepos 项目的子包，更加推荐</li>\n</ul>\n</li>\n<li>.babelrc.json （或 .babelrc, .js, .cjs, .mjs）文件<ul>\n<li>早期使用较多的配置方案，但是对于配置 Monorepos 项目是比较麻烦的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Browserslist-插件\"><a href=\"#Browserslist-插件\" class=\"headerlink\" title=\"Browserslist 插件\"></a>Browserslist 插件</h2><p>Browserslist 可以在不同的的前端工具之间，共享目标浏览器和 Node.js 版本的配置</p>\n<p>条件查询使用的是 caiuse-lite 的工具，这个工具的数据来自于 caniuse 的网站上</p>\n<p>browserslist 编写规则：</p>\n<ul>\n<li>defaults：browserslist 的默认浏览器（&gt;0.5%, last 2 versions, Firefox ESR, not dead）</li>\n<li>5%：通过全局使用情况统计信息选择的浏览器版本，&gt;&#x3D;, &lt; 和 &lt;&#x3D;</li>\n</ul>\n<p>dead：24 个月内没有官方支持或更新的浏览器</p>\n<p>last 2 versions：每个浏览器的最后两个版本</p>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><ol>\n<li>可以在 package.json 文件中编写</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;browserlists&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;last 2 versions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;not dead&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;&gt; 0.2%&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 .browserslistrc 文件中编写（最常使用）<ol>\n<li>该配置将会在多个工具之间进行共享（postcss&#x2F;babel）</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 0.2%</span></span><br><span class=\"line\">last 2 versions</span><br><span class=\"line\">not dead</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>可以在 webpack.config.js 文件中配置（不常用）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">              [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">targets</span>: <span class=\"string\">&#x27;&gt;5%&#x27;</span>, <span class=\"comment\">// 将会覆盖 browserslist 文件中的内容</span></span><br><span class=\"line\">              &#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><p>将一些高版本 js 代码对应于低版本中不存在的 API（Promise，string.includes 等函数）采用补丁的方式进行替换</p>\n<p>安装对应依赖（开发和生产环境都需要依赖）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install core-js regenerator-runtime</span><br></pre></td></tr></table></figure>\n\n<p>useBuiltIns 属性的可选值：</p>\n<ol>\n<li>false：<ul>\n<li>打包后的文件不适用 polyfill 来进行适配</li>\n<li>并且这个时候是不需要设置 corejs 属性的</li>\n</ul>\n</li>\n<li>usage：<ul>\n<li>会根据源代码中出现的语言特性，自动检测所需要的 polyfill</li>\n<li>这样可以确保最终包离的 polyfill 数量的最小化，打包的包相对较小</li>\n<li>可以设置 corejs 属性来确定使用的 corejs 的版本</li>\n</ul>\n</li>\n<li>entry<ul>\n<li>如果我们依赖的某一个库本身使用了 polyfill 的特性，但是因为我们使用的是 usage，所以之后用户浏览器可能会报错，如果担心这种情况，可以使用 entry</li>\n<li>并且需要在入口文件中添加 <code>import &#39;core-js/stable&#39;; import &#39;regenerator-runtime/runtime&#39;;</code> </li>\n<li>这样做会根据 browserslist 目标导入所有的 polyfill，但是对应的包会很大</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&#x27;entry&#x27;</span> <span class=\"comment\">// 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>入口文件 main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/stable&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;regenerator-runtime/runtime&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CDN-服务器\"><a href=\"#CDN-服务器\" class=\"headerlink\" title=\"CDN 服务器\"></a>CDN 服务器</h2><p>CDN 称之为内容分发网络（Content Delivery Network 或 Content Distribution Network）</p>\n<ul>\n<li>它是指通过相互连接的网络系统，利用最靠近每个用户的服务器</li>\n<li>更快、更可靠的将音乐、图片、视频、应用程序以及其他文件发送给用户</li>\n<li>来提供高性能、可扩展性及低成本的网络内容传递给用户</li>\n</ul>\n<p>在开发中，我们使用 CDN 主要是两种方式</p>\n<ol>\n<li><p>打包所有的静态资源，放到 CDN 服务器，用户所有资源都是通过 CDN 服务器加载的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name]_chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;https://xxxcdn.com&#x27;</span>, <span class=\"comment\">// 设置 CDN 服务器域名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>一些第三方资源放到 CDN 服务器上</p>\n<p>国内 CDN 平台 <a href=\"https://www.bootcdn.cn/\">BOOTCDN</a> </p>\n<p>在 模板 index 中直接引入需要从 CDN 引用的第三方库</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/react/18.3.1/umd/react.production.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 webpack 中配置相应从 CDN 引用的包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key: 排除框架的名称，import xxx from &#x27;key&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// value：从 CDN 请求下来的 js 中提供的对应名称</span></span><br><span class=\"line\">    <span class=\"attr\">react</span>: <span class=\"string\">&#x27;React&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// react_dom: &#x27;ReactDom&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><p>gulp 的核心理念是 task runner</p>\n<ul>\n<li>可以定义自己的一系列任务，等待任务被执行</li>\n<li>基于文件 stream 的构建流</li>\n<li>我们可以使用 gulp 的插件体系来完成某些任务</li>\n</ul>\n<p>webpack 的核心理念是 module bundler</p>\n<ul>\n<li>webpack 是一个模块化的打包工具</li>\n<li>可以使用各种各样的 loader 来加载不同的模块</li>\n<li>可以使用各种各样的插件在 webpack 打包的生命周期完成其他任务</li>\n</ul>\n<p>gulp 相对于 webpack 的优缺点</p>\n<ul>\n<li>gulp 相对于 webpack 思想更加的简单、医用，更适合编写一些自动化的任务</li>\n<li>但是目前对于大型项目（Vue、React、Angular）并不会使用 gulp 来构建，比如默认 gulp 是不支持模块化的</li>\n</ul>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>安装对应依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp</span><br></pre></td></tr></table></figure>\n\n<p>编写 gulpfile 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 npx gulp foo1 执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;task 1 finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 需要调用 callback 才能知道该任务已完成</span></span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行方式二</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;foo2&#x27;</span>, <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;task 2 finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  foo1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认任务 通过 npx gulp</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">default</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default task finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-gulp-任务\"><a href=\"#创建-gulp-任务\" class=\"headerlink\" title=\"创建 gulp 任务\"></a>创建 gulp 任务</h3><p>每个 gulp 任务都是一个异步的 JavaScript 代码</p>\n<ul>\n<li>此函数可以接收一个 callback 作为参数，调用 callback 函数，那么该任务会结束</li>\n<li>或者是一个返回 stream、promise、event emitter、child process 或 observable 类型的函数</li>\n</ul>\n<p>任务可以是 public 或者 private 类型的</p>\n<ul>\n<li>公开任务（public tasks）从 gulpfile 中被导出（export），可以通过 gulp 命令直接调用</li>\n<li>私有任务（private tasks）被设计为在内部使用，通常作为 series() 或 parallel() 组合的组成部分</li>\n</ul>\n<p><em>在 gulp 4 之前，注册任务时需要通过 gulp.task 的方式进行注册，也即上面的方式二</em></p>\n<h3 id=\"多任务\"><a href=\"#多任务\" class=\"headerlink\" title=\"多任务\"></a>多任务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; series, parallel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 npx gulp foo1 执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo2</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo3</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo3&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 任务会依次执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> seriesTask = <span class=\"title function_\">series</span>(foo1, foo2, foo3)</span><br><span class=\"line\"><span class=\"comment\">// 任务将并行执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parallelTask = <span class=\"title function_\">parallel</span>(foo1, foo2, foo3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  seriesTask,</span><br><span class=\"line\">  parallelTask</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><p>gulp 暴露了 src 和 dest 函数，用于处理计算机存放的文件</p>\n<ul>\n<li>src 接收一个正则路径，并从文件系统中读取文件然后生成一个 Node 流（Stream），它将所有匹配的文件放入内存中并通过读取流（Stream进行处理）</li>\n<li>由 src 产生的流（Stream）应当从任务（task 函数）中返回并发出异步完成的信号</li>\n<li>dest 接收一个输出目录作为参数，并且它还会产生一个 Node 流（Stream），通过该流将文件内容输出到文件中</li>\n</ul>\n<p>pipe 方法接收一个转换流（Transform stream）或 可写流（Writable Stream）</p>\n<p>转换流或可写流，拿到数据之后可以对数据进行操作，再次传递给下一个转换流或可写流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyFile</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**&#x27;</span>).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  copyFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对-Js-文件进行转化和压缩\"><a href=\"#对-Js-文件进行转化和压缩\" class=\"headerlink\" title=\"对 Js 文件进行转化和压缩\"></a>对 Js 文件进行转化和压缩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest, watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">zipFile</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123; <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]&#125;))</span><br><span class=\"line\">    <span class=\"comment\">// .pipe(terser(&#123; mangle: &#123; toplevel: true &#125;&#125;))</span></span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">terser</span>(&#123; <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置自动监听</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*js&#x27;</span>, zipFile)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  zipFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-babel gulp-terser gulp-htmlmin gulp-less gulp-inject -D</span><br></pre></td></tr></table></figure>\n\n<p>html 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- inject:css --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endinject --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- inject:js --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endinject --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>gulpfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest, series, parallel, watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-less&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> inject = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-inject&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;browser-sync&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jsTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123; <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">terser</span>(&#123; <span class=\"attr\">mangle</span>: &#123; <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span> &#125;&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/js&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cssTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.less&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">less</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/css&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">htmlTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.html&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注入时使用相对路径设置 relative 为 true</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">injectTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./dist/**/*.html&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">inject</span>(<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;./dist/**/*.js&#x27;</span>, <span class=\"string\">&#x27;./dist/**/*.css&#x27;</span>]), &#123; <span class=\"attr\">relative</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启本地服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bs = browserSync.<span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">serveTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  bs.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8000</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">files</span>: <span class=\"string\">&#x27;./dist/*&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">baseDir</span>: <span class=\"string\">&#x27;./dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> parallelTask = <span class=\"title function_\">parallel</span>(jsTask, cssTask, htmlTask)</span><br><span class=\"line\"><span class=\"keyword\">const</span> buildTask = <span class=\"title function_\">series</span>(parallelTask, injectTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*&#x27;</span>, buildTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"title function_\">series</span>(buildTask, serveTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  serve,</span><br><span class=\"line\">  buildTask</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">default</span> = buildTask</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Rollup\"><a href=\"#Rollup\" class=\"headerlink\" title=\"Rollup\"></a>Rollup</h2><p>Rollup 是一个 JavaScript 的模块化打包工具，可以帮助我们编译小的代码到一个大的，复杂的代码中，比如一个库一个应用程序</p>\n<h3 id=\"rollup-VS-webpack\"><a href=\"#rollup-VS-webpack\" class=\"headerlink\" title=\"rollup VS webpack\"></a>rollup VS webpack</h3><ul>\n<li>rollup 是一个模块化的打包工具，但是 rollup 主要是针对 ESModule 进行打包的</li>\n<li>另外 webpack 通常可以通过各种 loader 处理各样的文件，以及他们之间的依赖关系</li>\n<li>rollup 更多时候是专注于处理 JavaScript 代码的（当然也可以是 css、font、vue 等文件）</li>\n<li>另外 rollup 的配置和理念相对于 webpack 来说，更加的简洁和容易理解</li>\n<li>在早期 webpack 不支持 tree shaking 时，rollup 具备更强的优势</li>\n</ul>\n<p>通常在实际项目开发过程中，我们都会使用 webpack（比如 react、angular 项目都是基于 webpack）</p>\n<p>在对库文件进行打包时，我们通常会使用 rollup （比如 vue、react、dayjs 源码本身都是基于 rollup的，vite 底层使用 rollup）</p>\n<h3 id=\"rollup-基本使用\"><a href=\"#rollup-基本使用\" class=\"headerlink\" title=\"rollup 基本使用\"></a>rollup 基本使用</h3><p>安装 rollup</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rollup -D</span><br></pre></td></tr></table></figure>\n\n<p>使用命令进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包为 node 环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f cjs -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为浏览器环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f iife -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为 amd 环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f cjs -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为所有环境都支持，此时必须要指定名字</span></span><br><span class=\"line\">npx rollup ./src/main.js -f umd --name foo -o dist/bundle.cjs</span><br></pre></td></tr></table></figure>\n\n<p>原始代码内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>打包后的代码结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">global</span>, factory</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> ? <span class=\"title function_\">factory</span>(<span class=\"built_in\">exports</span>) :</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span> ? <span class=\"title function_\">define</span>([<span class=\"string\">&#x27;exports&#x27;</span>], factory) :</span><br><span class=\"line\">  (<span class=\"variable language_\">global</span> = <span class=\"keyword\">typeof</span> globalThis !== <span class=\"string\">&#x27;undefined&#x27;</span> ? globalThis : <span class=\"variable language_\">global</span> || self, <span class=\"title function_\">factory</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">foo</span> = &#123;&#125;));</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>, (<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span></span>) &#123; <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对上述代码的解析</span></span><br><span class=\"line\"><span class=\"comment\">// 打包后的代码定义了一个函数，该函数接收两个参数 global 和 factory，factory 为函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">global</span>, factory</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否存在 exports，并且 module 存在，则将 exports 传入</span></span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> ? <span class=\"title function_\">factory</span>(<span class=\"built_in\">exports</span>) :</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span> ? <span class=\"title function_\">define</span>([<span class=\"string\">&#x27;exports&#x27;</span>], factory) :</span><br><span class=\"line\">  <span class=\"comment\">// 在浏览器中会存在 global 和 globalThis 变量指向 window，相当于传入 factory为 window.foo = &#123;&#125;</span></span><br><span class=\"line\">  (<span class=\"variable language_\">global</span> = <span class=\"keyword\">typeof</span> globalThis !== <span class=\"string\">&#x27;undefined&#x27;</span> ? globalThis : <span class=\"variable language_\">global</span> || self, <span class=\"title function_\">factory</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">foo</span> = &#123;&#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 this 和 另外一个函数 传入该函数，执行该函数后，将会对全局对象绑定对应的属性</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"variable language_\">this</span>, (<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span></span>) &#123; <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// exports 将为对应环境中的 this（浏览器环境中 window，globalThis，this） 或 exports（node 环境中）</span></span><br><span class=\"line\">  <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>编写相应配置文件，通过 <code>npx rollup -c</code> 执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./dist/bundle.umd.js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对项目进行打包</p>\n<p>一般情况下不需要打包 node_modules 文件中的内容，用户可以通过依赖进行安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 loadsh 是通过 commonjs 导出的，默认情况下，rollup 不会对其进行打包</span></span><br><span class=\"line\"><span class=\"comment\">// 需要安装 @rollup/plugin-commonjs 解决 使用 esmodule 方式导入 commonjs 包</span></span><br><span class=\"line\"><span class=\"comment\">// 安装 @rollup/plugin-node-resolve 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;loadsh&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">join</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>\n\n<p>rollup.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对代码进行转化并压缩</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// nodeResolve(),</span></span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h3><p>安装对应的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rollup-plugin-postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 rollup</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// nodeResolve(),</span></span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对-vue-进行打包\"><a href=\"#对-vue-进行打包\" class=\"headerlink\" title=\"对 vue 进行打包\"></a>对 vue 进行打包</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development</span></span><br><span class=\"line\"><span class=\"comment\">// 所以需要执行该变量 process.env.NODE_ENV</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-replace&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// commonjs(),</span></span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;bundled&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// terser(),</span></span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.NODE_ENV&#x27;</span>: <span class=\"string\">&#x27;&quot;development&quot;&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建本地开发服务\"><a href=\"#搭建本地开发服务\" class=\"headerlink\" title=\"搭建本地开发服务\"></a>搭建本地开发服务</h3><p>安装对应依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 本地服务</span></span><br><span class=\"line\">npm install rollup-plugin-server -D</span><br><span class=\"line\"><span class=\"comment\"># 监听文件发生变化重新打包</span></span><br><span class=\"line\">npm install rollup-plugin-livereload -D</span><br></pre></td></tr></table></figure>\n\n<p>配置环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-html&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development</span></span><br><span class=\"line\"><span class=\"comment\">// 所以需要执行该变量 process.env.NODE_ENV</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-replace&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-server&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-livereload&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// commonjs(),</span></span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;bundled&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// terser(),</span></span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// html(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   include: &#x27;./index.html&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.NODE_ENV&#x27;</span>: <span class=\"string\">&#x27;&quot;development&quot;&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">server</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">8000</span>,</span><br><span class=\"line\">      <span class=\"attr\">contentDir</span>: <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">livereload</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -w: watch</span></span><br><span class=\"line\">npx rollup -c -w</span><br></pre></td></tr></table></figure>\n\n<p>在执行 rollup 命令时，可以指定参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过设定 environment 设置环境变量，可以在 rollup.config.js 文件中 通过 process.env.NODE_ENV 拿到该变量</span></span><br><span class=\"line\">npx rollup --environment NODE_ENV:production</span><br><span class=\"line\">npx rollup --environment NODE_ENV:development</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vite\"><a href=\"#Vite\" class=\"headerlink\" title=\"Vite\"></a>Vite</h2><p>由于现在浏览器支持 esmodule 模块化的加载，在开发时，可以直接使用这个特性。但是仍存在如下的问题：</p>\n<ul>\n<li>在加载文件时，后缀名不能省略</li>\n<li>加载别的文件时，该文件的依赖也将会在浏览器中进行下载，导致浏览器下载了很多个文件，占用了很大的带宽</li>\n<li>不支持 ts、vue 等代码文件</li>\n</ul>\n<p>vite 对 css、ts 原生支持。对于 less 的使用，只需要安装 less 插件即可</p>\n<h3 id=\"配置对-vue-的支持\"><a href=\"#配置对-vue-的支持\" class=\"headerlink\" title=\"配置对 vue 的支持\"></a>配置对 vue 的支持</h3><p>需要安装配置 vue 的插件 @vite&#x2F;plugin-vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @vite/plugin-vue</span><br></pre></td></tr></table></figure>\n\n<p>配置 vite</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vite&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@vitejs/plugin-vue&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">vue</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义-CLI\"><a href=\"#自定义-CLI\" class=\"headerlink\" title=\"自定义 CLI\"></a>自定义 CLI</h2><p>在项目根目录下创建 bin 文件夹，文件夹里面存放 js 代码，在文件头部需要标明执行该文件的环境路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!<span class=\"attr\">D</span>:<span class=\"regexp\">/Dahui/</span><span class=\"title class_\">Environment</span>/<span class=\"title class_\">Node</span>/node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建 package.json 文件，并配置 bin ，其中 demo01 表示执行的命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cli&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;bin&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;demo01&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bin/test.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 npm link 命令创建一个连接，该命令将会将配置的 bin 生成一个 demo01（linux），demo01.cmd（cmd） 和 demo01.ps1（powershell） 文件，该文件被存放到 node_global 文件夹中，用于执行该命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用 commander 工具来解析传入的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!<span class=\"attr\">D</span>:<span class=\"regexp\">/Dahui/</span><span class=\"title class_\">Environment</span>/<span class=\"title class_\">Node</span>/node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(&#x27;test&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;D:\\\\Dahui\\\\Environment\\\\Node\\\\node.exe&#x27;, // node 路径</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;D:\\\\Dahui\\\\Environment\\\\Node\\\\node-v18.14.0-win-x64\\\\node_global\\\\node_modules\\\\cli\\\\bin\\\\test.js&#x27;, // 脚本路径</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;--version&#x27; // 参数</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package.json&#x27;</span>).<span class=\"property\">version</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">version</span>(version, <span class=\"string\">&#x27;-V, --version&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;valuename&gt; 用于传值 valuename 用于表明传值到哪个属性中</span></span><br><span class=\"line\">program.<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-d, --destination &lt;destination&gt;&#x27;</span>, <span class=\"string\">&#x27;where to put the result&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听 --help 参数，当输入该参数将会执行里面的回调函数</span></span><br><span class=\"line\">program.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;--help&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;others&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;  1111111&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;  2222222&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对 destination 传入的值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(program.<span class=\"title function_\">opts</span>().<span class=\"property\">destination</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装自定义命令，并从远程仓库下载\"><a href=\"#封装自定义命令，并从远程仓库下载\" class=\"headerlink\" title=\"封装自定义命令，并从远程仓库下载\"></a>封装自定义命令，并从远程仓库下载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; useHelp &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./core/help&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useHelp</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>)</span><br></pre></td></tr></table></figure>\n\n<p>help.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createFromTemplate, createComponent &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./action&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useHelp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-d, --destination &lt;destination&gt;&#x27;</span>, <span class=\"string\">&#x27;the destination of direcotry&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-r, --remove&#x27;</span>, <span class=\"string\">&#x27;remove the files&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&#x27;create &lt;template&gt; [args]&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&#x27;the template of project to create&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(createFromTemplate)</span><br><span class=\"line\"></span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&#x27;create-cpn &lt;component&gt; [...args]&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&#x27;createt a component from template&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(createComponent)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  useHelp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 通过 promisify 使 download 变为一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"title function_\">promisify</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;download-git-repo&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加模板编译库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ejs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ejs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeCommand</span>(<span class=\"params\">command, args, opts</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 开启子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childProcess = <span class=\"title function_\">spawn</span>(command, args, opts)</span><br><span class=\"line\">    <span class=\"comment\">// 将输出传入到主进程的输出</span></span><br><span class=\"line\">    childProcess.<span class=\"property\">stdout</span>.<span class=\"title function_\">pipe</span>(process.<span class=\"property\">stdout</span>)</span><br><span class=\"line\">    childProcess.<span class=\"property\">stderr</span>.<span class=\"title function_\">pipe</span>(process.<span class=\"property\">stderr</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"title function_\">resolve</span>()&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFromTemplate</span>(<span class=\"params\">template, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(template, args)</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一：下载地址 需要指定下载的分支</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：下载到哪里</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数三：可选参数，设置为 clone 方式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">download</span>(<span class=\"string\">&#x27;direct:git@github.com:DaHui-BT/scoped-css-webpack-plugin.git#main&#x27;</span>, template, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> command = <span class=\"string\">&#x27;npm&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 判断当前平台，win 需要添加 .exe</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">platform</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">platform</span> == <span class=\"string\">&#x27;win32&#x27;</span>) &#123;</span><br><span class=\"line\">    command += <span class=\"string\">&#x27;.exe&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自动安装相关的依赖</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">executeCommand</span>(command, [<span class=\"string\">&#x27;install&#x27;</span>], &#123; <span class=\"attr\">cwd</span>: <span class=\"string\">`./<span class=\"subst\">$&#123;template&#125;</span>`</span>&#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 自动运行该项目</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">executeCommand</span>(command, [<span class=\"string\">&#x27;run&#x27;</span>, <span class=\"string\">&#x27;dev&#x27;</span>], &#123; <span class=\"attr\">cwd</span>: <span class=\"string\">`./<span class=\"subst\">$&#123;template&#125;</span>`</span>&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createComponent</span>(<span class=\"params\">component, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> templatePath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./template/template.vue.ejs&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 编译模板，并传入需要替换的字符</span></span><br><span class=\"line\">    ejs.<span class=\"title function_\">renderFile</span>(templatePath, &#123; <span class=\"attr\">name</span>: component, <span class=\"attr\">lowerName</span>: component.<span class=\"title function_\">toLowerCase</span>() &#125;, <span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> destination = program.<span class=\"title function_\">opts</span>().<span class=\"property\">destination</span> || <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">resolve</span>(__dirname, destination)</span><br><span class=\"line\">    <span class=\"comment\">// 判断文件路径是否存在，不存在则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(filePath)) &#123;</span><br><span class=\"line\">      fs.<span class=\"title function_\">mkdirSync</span>(filePath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 同步写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"property\">promises</span>.<span class=\"title function_\">writeFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;filePath&#125;</span>/<span class=\"subst\">$&#123;component&#125;</span>.vue`</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  createFromTemplate,</span><br><span class=\"line\">  createComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a><a href=\"https://www.aliyundrive.com/drive/file/all/backup/66f25f1481f8a5c9b2ec48bdb4953a2c7483f60a\">TODO</a></h1><p>802 day134_Rollup-Vite打包与原理-脚手架开发_14_(掌握)vite-esbuild构建工具的原理解析.mp4 </p>\n","excerpt":"","more":"<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>使用 npm 安装第三方工具时。当父文件夹存在 node_modules 文件夹时，并执行下载命令时（在子文件夹下），将会自动下载第三方工具到父文件夹下的 node_modules 文件夹中。</p>\n<h3 id=\"path-模块\"><a href=\"#path-模块\" class=\"headerlink\" title=\"path 模块\"></a>path 模块</h3><p>resolve 将会从后往前解析路径，当遇到绝对路径将会停止</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>)) <span class=\"comment\">// a.txt\\b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>, <span class=\"string\">&#x27;/c.txt&#x27;</span>)) <span class=\"comment\">// D:\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;/b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;./c.txt&#x27;</span>)) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>, <span class=\"string\">&#x27;./b.txt&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;./c.txt/&#x27;</span>)) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\a.txt\\b.txt\\c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(__dirname, __filename) <span class=\"comment\">// D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src D:\\Dahui\\Project\\Algorithm-Exercise\\u-front\\npm\\src\\index.js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><h3 id=\"exports-与-module-exports\"><a href=\"#exports-与-module-exports\" class=\"headerlink\" title=\"exports 与 module.exports\"></a><code>exports</code> 与 <code>module.exports</code></h3><p><code>exports</code> 和 <code>module.exports</code> 等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> === <span class=\"built_in\">exports</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径查找问题\"><a href=\"#路径查找问题\" class=\"headerlink\" title=\"路径查找问题\"></a>路径查找问题</h3><p>在使用 <code>require(&#39;路径&#39;)</code> 时，当路径前缀不包含 <code>/</code>、<code>./</code>、<code>../</code> 等相对或绝对路径时</p>\n<ul>\n<li>将会首先在 node.js 的环境中查找该模块，例如：<code>require(&#39;path&#39;)</code> </li>\n<li>当 node.js 环境不存在该模块时，将会在该目录的 node_modules 文件夹中查找，该目录中不存在 node_modules 文件夹则会一直向上寻找该文件夹，不存在则抛出异常</li>\n</ul>\n<p>当路径前缀包含 <code>/</code>、<code>./</code>、<code>../</code> 等相对或绝对路径时，首先会查找其路径对应的文件，当不存在该文件时：</p>\n<ul>\n<li>当不包含文件后缀名 (<code>.js</code>、<code>.json</code>、<code>.node</code>) 时，将会自动添加后缀，进行查找</li>\n<li>当添加后缀名后查找仍不存在，则会查找该路径命名的文件夹，当不存在该文件夹时抛出异常</li>\n<li>当文件夹存在时，则会在文件夹中查找 <code>index.js</code> 文件</li>\n</ul>\n<h3 id=\"导出引用\"><a href=\"#导出引用\" class=\"headerlink\" title=\"导出引用\"></a>导出引用</h3><p>在使用 <code>require</code> 和 <code>module.exports</code> 时，<code>module.exports</code> 所导出的为对象的引用，在导入文件中修改导入的变量时，原变量也会发生改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in aaa file: &#x27;</span>, a.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ma = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./aaa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file: &#x27;</span>, ma)</span><br><span class=\"line\"></span><br><span class=\"line\">ma.<span class=\"property\">a</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;bbb&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当执行后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file:  &#123; a: &#123; name: <span class=\"string\">&#x27;aaa&#x27;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">in</span> aaa file:  bbb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"module-对象\"><a href=\"#module-对象\" class=\"headerlink\" title=\"module 对象\"></a>module 对象</h3><p>当模块使用 require 引入时，该模块中的代码将会被自动执行一次。当多次引入也会只执行一次。</p>\n<p>node.js 源码中存在一个变量 <code>module.loaded</code> ，初始时为 false，当进行引入时该变量将会变为 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Module</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;.&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;~&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;~/aaa.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 代表是否已经加载该模块</span></span><br><span class=\"line\">  <span class=\"attr\">children</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">paths</span>: [ <span class=\"comment\">// 当前目录及父目录下的 node_modules 文件夹，用于查找第三方工具包</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\Project\\\\Algorithm-Exercise\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\Project\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\Dahui\\\\node_modules&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;D:\\\\node_modules&#x27;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><p>其加载过程为同步过程，当一个模块加载完成之后，才会加载另一个，此方法经常在服务端使用（由于本地加载较为迅速）。此种方式在客户端加载时会导致卡顿或阻塞。由此引申出 AMD（Asynchronous Module Definition） 和 CMD （Common Module Definition），这两种方式都采用异步加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in aaa file&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ma = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in bbb file&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node b.js</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file</span><br><span class=\"line\"><span class=\"keyword\">in</span> aaa file</span><br><span class=\"line\"><span class=\"keyword\">in</span> bbb file</span><br></pre></td></tr></table></figure>\n\n<p>当存在循环引入时，其执行顺序（node.js 为深度优先搜索）</p>\n<ul>\n<li>a -&gt; b -&gt; c</li>\n<li>a -&gt; d -&gt; c</li>\n</ul>\n<p>则执行顺序为：a -&gt; b -&gt; c -&gt; d</p>\n<h2 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES-Module\"></a>ES-Module</h2><p>在 ES6（ES2015） 时推出</p>\n<h3 id=\"导入导出方式\"><a href=\"#导入导出方式\" class=\"headerlink\" title=\"导入导出方式\"></a>导入导出方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义时直接导出，该方式不能使用 as 关键字改别名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> aa = <span class=\"string\">&quot;aaaaaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"comment\">// 在浏览器中导入时，必须夹后缀（.js），导入声明只能在文件顶层使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import * as a from &#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.html</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&#x27;b.js&#x27;</span> type=<span class=\"string\">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>当导入时的变量与该文件中的变量产生冲突时，通过 as 关键字可以在导出文件中替换名字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta <span class=\"keyword\">as</span> a_a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a_a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;bbb&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, a_a)</span><br></pre></td></tr></table></figure>\n\n<p>或者在导入时起别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a <span class=\"keyword\">as</span> a_a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;bbb&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, a_a)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb, aaa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出优化\"><a href=\"#导入导出优化\" class=\"headerlink\" title=\"导入导出优化\"></a>导入导出优化</h3><p>当管理多个导入导出文件时，可采用如下优化方式（main.js 中需要引入 utils 文件夹下的所有工具类）。创建index.js 文件导入所有工具方法，并导出，此时 main.js 中只需要引入 index.js 文件中的方法即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- utils</span><br><span class=\"line\">\t-- parse.js</span><br><span class=\"line\">\t-- time.js</span><br><span class=\"line\">\t-- index.js</span><br><span class=\"line\">-- main.js</span><br></pre></td></tr></table></figure>\n\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导出所有</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;parse.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 如下更清晰</span></span><br><span class=\"line\">expor &#123; timeUtils &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;time.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"built_in\">parseInt</span>, timeUtils &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;utils/index.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"comment\">// 一个模块中只能存在一个默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default export&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> aaa <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入函数\"><a href=\"#导入函数\" class=\"headerlink\" title=\"导入函数\"></a>导入函数</h3><p>默认导入只能在文件顶层，浏览器在加载 <code>js</code> 文件时，会直接在文件顶层扫描 import 并下载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> a = <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> importPromise = <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br><span class=\"line\">    importPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">a</span>) <span class=\"comment\">// aaa</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// import(&#x27;./a.js&#x27;).then((res) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(res.a) // aaa</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下导入方式将会报错，因为在执行之后才能知道具体要导入的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"title function_\">from</span> (<span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 ES11（ES2020） import 中添加了如下的属性：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    url<span class=\"punctuation\">:</span> &#x27;http<span class=\"punctuation\">:</span><span class=\"comment\">//127.0.0.1:5500/a.js&#x27;, // 加载该 js 文件所使用的 url</span></span><br><span class=\"line\">    resolve<span class=\"punctuation\">:</span> ƒ</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析流程-TODO\"><a href=\"#解析流程-TODO\" class=\"headerlink\" title=\"解析流程 TODO\"></a>解析流程 TODO</h3><h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>当所加载的第三方工具包的入口文件不为 index.js 文件时，无法通过 <code>require(&#39;第三方工具包&#39;)</code> 进行导入，可在第三方工具包中创建 <code>package.json</code> 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如第三方工具包的入口文件为 main.js</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;第三方工具包&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    version<span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    main<span class=\"punctuation\">:</span> <span class=\"string\">&quot;main.js&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h3><p>针对于特定名称的脚本可以省略 run 参数，例如：<code>npm start</code> ，可以省略 run 的命令如下：start、test、stop、restart</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        start<span class=\"punctuation\">:</span> <span class=\"string\">&quot;node main.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        build<span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack ...&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发依赖、生产依赖\"><a href=\"#开发依赖、生产依赖\" class=\"headerlink\" title=\"开发依赖、生产依赖\"></a>开发依赖、生产依赖</h3><p>开发依赖：只在开发过程中会使用到，例如：webpack。执行命令：<code>npm install/i xxx --save-dev/-D</code> </p>\n<p>生产依赖：在开发过程以及生产过程都会被使用到，例如：vue。执行命令：<code>npm install/i xxx --save/-S</code> </p>\n<p>peer 依赖：在依赖本库时需要先安装该依赖的库</p>\n<p><em>全局安装命令： <code>npm install xxx -g</code></em> </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    dependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.0&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    devDependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;5.0&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    peerDependencies<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h3><p>semver 版本规范 <code>X.Y.Z</code> </p>\n<ul>\n<li>X 主版本号（major）：当做了不兼容的 API 修改时（可能不兼容之前的版本）</li>\n<li>Y 次版本号（minor）：当做了向下兼容的功能性新增（新功能增加，但兼容以前的版本）</li>\n<li>Z 修订号（patch）：当做了向下兼容的问题修正（没有新功能，修复了之前版本的 BUG）</li>\n</ul>\n<p><code>^</code> 和 <code>~</code> 前缀</p>\n<ul>\n<li><code>x.y.z</code> 代表特定的版本</li>\n<li><code>^x.y.z</code> 代表 x 是保持不变的，y 和 z 永远安装最新的版本</li>\n<li><code>~x.y.z</code> 表示 x 和 y 是保持不变的，z永远安装最新的版本</li>\n</ul>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取缓存目录</span></span><br><span class=\"line\">$ npm config get cache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取配置信息</span></span><br><span class=\"line\">$ npm config list</span><br><span class=\"line\"><span class=\"comment\"># ; &quot;user&quot; config from ~\\.npmrc</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># cache = &quot;~/node-v18.14.0-win-x64/node_cache&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># prefix = &quot;~/node-v18.14.0-win-x64/node_global&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># registry = &quot;http://registry.npm.taobao.org/&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ; node bin location = ~/node-v18.14.0-win-x64/node.exe</span></span><br><span class=\"line\"><span class=\"comment\"># ; node version = v18.14.0</span></span><br><span class=\"line\"><span class=\"comment\"># ; npm local prefix = ~/project</span></span><br><span class=\"line\"><span class=\"comment\"># ; npm version = 9.3.1</span></span><br><span class=\"line\"><span class=\"comment\"># ; cwd = ~/project</span></span><br><span class=\"line\"><span class=\"comment\"># ; HOME = ~</span></span><br><span class=\"line\"><span class=\"comment\"># ; Run `npm config ls -l` to show all defaults.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载某个第三方库</span></span><br><span class=\"line\">$ npm uninstall xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新构建项目依赖</span></span><br><span class=\"line\">$ npm rebuild</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">$ npm cache clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取本地使用的镜像源</span></span><br><span class=\"line\">$ npm config get registry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新镜像源</span></span><br><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">&quot;镜像源地址&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录到 npm registry</span></span><br><span class=\"line\">$ npm login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布当前包到 npm registry</span></span><br><span class=\"line\">$ npm publish</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除发布的包</span></span><br><span class=\"line\">$ npm unpublish</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 让发布的包过期</span></span><br><span class=\"line\">$ npm deprecate</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"npx\"><a href=\"#npx\" class=\"headerlink\" title=\"npx\"></a>npx</h2><p>当使用 npx 命令执行别的第三方包命令时，将会首先在该目录下的 node_modules 文件夹下的 .bin 文件夹中查找该命令是否存在，存在则会优先执行该命令</p>\n<h2 id=\"pnpm\"><a href=\"#pnpm\" class=\"headerlink\" title=\"pnpm\"></a>pnpm</h2><p>每创建一个项目都需要下载对应的第三方工具包，为了解决包占用较大的问题，pnpm采用软链接、硬链接</p>\n<ul>\n<li>扁平化：当一个工具包依赖另一个工具包时，将会直接下载到 node_modules 文件夹下，导致在<code>package.json</code> 中没有写入依赖项就可以导入。当卸载该工具包时，其依赖包也可能被删除，由此引发导入错误</li>\n<li>非扁平化：当一个工具包依赖另一个工具包时，依赖项将会下载到在该工具包中</li>\n</ul>\n<p><code>pnpm</code> 通过设置软连接的方式将一个工具包依赖的另一个工具包保存到该工具包目录中，安装的该工具包依赖的工具包将会以硬链接的方式存储到 <code>.pnpm</code> 目录下</p>\n<h2 id=\"Webpack-模块化打包工具\"><a href=\"#Webpack-模块化打包工具\" class=\"headerlink\" title=\"Webpack 模块化打包工具\"></a>Webpack 模块化打包工具</h2><blockquote>\n<p>Webpack 是一个静态的模块化打包工具。打包后成为最终的静态资源，用于部署到服务器中</p>\n<p>Webpack 支持 ES Module、CommonJS、AMD 等规范</p>\n</blockquote>\n<p>对项目进行打包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行当前项目依赖的 webpack 进行打包</span></span><br><span class=\"line\">$ npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>当将该命令集成到 <code>package.json</code> 文件中，则可以省略 <code>npx</code> ，<code>package.json</code> 中的命令将会自动在该项目依赖中进行查找</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack 默认会找到 <code>src/index.js</code> 文件进行打包</p>\n<ul>\n<li>可以通过参数指定要打包的文件：<code>npx webpack --entry ./src/main.js</code> 进行修改</li>\n<li>通过添加如下参数：<code>npx webpack --output-filename bundle.js</code> 修改输出的文件名</li>\n<li>通过添加如下参数：<code>npx webpack --output-dir build</code> 修改输出的文件夹名称</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>通过添加 webpack.config.js 文件修改 webpack 的配置信息。该文件采用 CommonJS 语法规范</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当该配置文件名字不为 webpack.config.js 时可使用 <code>npx webpack --config newname.config.js</code> 来指定</p>\n<p>为了简化命令可以使用 <code>package.json</code> 的 scripts ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">    scripts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config newname.config.js&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置后缀名\"><a href=\"#配置后缀名\" class=\"headerlink\" title=\"配置后缀名\"></a>配置后缀名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>] <span class=\"comment\">// 配置可省略的后缀名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打包模式\"><a href=\"#打包模式\" class=\"headerlink\" title=\"打包模式\"></a>打包模式</h3><p>可选择的打包方式为：none | development | production（默认）</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>development</td>\n<td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设置为 development，为模块和 chunk 启用有效的名</td>\n</tr>\n<tr>\n<td>production</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production，为模块和 chunk 启用确定新的混淆名称，FlagDependencyUsagePlugin、FlagIncludeChunksPlugin、ModuleConcatenationPlugin、NoEmitOnErrorsPlugin 和 TerserPligin</td>\n</tr>\n<tr>\n<td>none</td>\n<td>不适用任何默认优化选项</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HTML-webpack-plugin\"><a href=\"#HTML-webpack-plugin\" class=\"headerlink\" title=\"HTML webpack plugin\"></a>HTML webpack plugin</h3><p>将 html 文件打包生成到指定的文件夹中</p>\n<p>安装指定插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>使用指定插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-React-代码进行打包\"><a href=\"#对-React-代码进行打包\" class=\"headerlink\" title=\"对 React 代码进行打包\"></a>对 React 代码进行打包</h3><p>安装 react 依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react react-dom</span><br></pre></td></tr></table></figure>\n\n<p>安装对应编译 jsx 代码的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-systax-jsx -D</span><br><span class=\"line\">npm install @babel/plugin-transform-react-jsx -D</span><br><span class=\"line\">npm install @babel/plugin-transform-react-display-name -D</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者直接安装预设</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n\n<p>App 组件中的 jsx 代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = <span class=\"title function_\">memo</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Count: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span></span><br></pre></td></tr></table></figure>\n\n<p>main 入口文件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.jsx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>))</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>)</span><br></pre></td></tr></table></figure>\n\n<p>babel.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&#x27;entry&#x27;</span> <span class=\"comment\">// 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-react&#x27;</span>], <span class=\"comment\">// 解析 react 代码</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-TS-文件进行打包\"><a href=\"#对-TS-文件进行打包\" class=\"headerlink\" title=\"对 TS 文件进行打包\"></a>对 TS 文件进行打包</h3><ol>\n<li><p>可以使用 typescript compiler 进行打包，通过 tsc file.ts 进行手动打包</p>\n</li>\n<li><p>通过使用 ts-loader 进行整合 webpack 进行打包</p>\n<p>需要对应的 tsconfig.json 文件（可以通过 npx tsc -init 生成）</p>\n<p>会对 类型检查错误的代码进行报错</p>\n<p>打包的内容并不包括 polyfill 部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;ts-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>通过 ts 预设进行打包：@babel&#x2F;preset-typescript（推荐）</p>\n<p>但是 使用 babel-loader 将不会对 ts 代码类型检查错误进行报错</p>\n<p>此时会使用 polyfill 进行填充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>, <span class=\"comment\">// 不会对类型检查错误进行报错</span></span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-typescript&#x27;</span>]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// loader: &#x27;ts-loader&#x27; // 会对类型检查错误进行报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中既要类型检查抛出异常又要使用 polyfill 进行代码的填充，可以通过配置 package.json 脚本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;tsc --noEmit &amp;&amp; webpack&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>noEmit 表示不输出任何东西，也即不进行转换</p>\n</li>\n</ol>\n<h3 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h3><p>webapck 配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>, <span class=\"comment\">// reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写的主文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br></pre></td></tr></table></figure>\n\n<p>最后一行的注释指明了该打包后的文件的 source map 文件</p>\n<p>浏览器会根据我们的注释，查找相应的 source-map，并且根据  source-map 还原我们的代码，方便进行调试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">let</span> o=<span class=\"string\">&quot;abc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o),o=<span class=\"number\">123</span>,<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o)&#125;)();</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=bundle.js.map</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的 source-map 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 当前使用的版本，也就是最新的第三版</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bundle.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 打包后的文件（浏览器加载的文件）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MAAA,IAAIA,EAAO,MAEXC,QAAQC,IAAIF,GAEZA,EAAO,IAEPC,QAAQC,IAAIF,E&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// source-map 用来和源文件映射的信息（比如位置信息等），一串 base64 VLQ（variable length quantity，可变长度值）编码</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;webpack://webpack/./src/main.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 从哪些文件转换过来的 source-map 和打包的代码（最初始的文件）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourcesContent&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;let name = &#x27;abc&#x27;\\r\\n\\r\\nconsole.log(name)\\r\\n\\r\\nname = 123\\r\\n\\r\\nconsole.log(name)\\r\\n&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 转换前的具体代码信息（和 sources 是对应的关系）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;names&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;console&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 转换前的变量和属性名称（因为我们目前使用的是 development 模式，所以不需要保留转换前的名称）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourceRoot&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 所有的 sources 相对的根目录</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devtool-选项\"><a href=\"#devtool-选项\" class=\"headerlink\" title=\"devtool 选项\"></a>devtool 选项</h3><ul>\n<li><p>false：不使用 source-map，也就是没有任何和 source-map 相关的内容</p>\n</li>\n<li><p>none：production 模式下的默认值（什么值都不写），不生成 source-map</p>\n</li>\n<li><p>eval：development 模式下的默认值，不生成  source-map</p>\n<ul>\n<li>但是他会在 eval 执行的代码中，添加 &#x2F;&#x2F; # sourceURL&#x3D;;</li>\n<li>它会被浏览器在执行时解析，并且在调试面板中生成对应的一些文件目录，方便我们调试（但是此时还原的代码并不一定准确到具体的行、列）速度快</li>\n</ul>\n</li>\n<li><p>source-map：会生成完整的 source-map 文件，一般设置在 production 模式下</p>\n</li>\n<li><p>eval-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 eval 函数的后面（将 source-map 文件内容<strong>转化为 base64 放到 eval 函数的后面</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(... <span class=\"comment\">//# sourceMappingURL=data;application/json;charset=utf-8;base64,)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>inline-source-map：会生成 sourcemap，但是 source-map 是以 DateUrl 添加到 bundle 文件的后面（将 source-map 文件内容<strong>转化为 base64 放到 bundle 文件的最后面</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(... )</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=data;application/json;charset=utf-8;base64,</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>cheap-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是会更加高效一些（cheap 低开销），因为 <strong>他没有生成列映射</strong> （Column Mapping）</li>\n<li>因为再发开中，我们只需要行信息通常就可以定位到错误了</li>\n<li>在 development 中才会生成相应的 .js.map 文件</li>\n</ul>\n</li>\n<li><p>cheap-module-source-map</p>\n<ul>\n<li>会生成 sourcemap，类似于 cheap-source-map，但是对源自 loader 的 sourcemap 处理会更好</li>\n<li>如果 loader 对我们的源代码进行了特俗的处理，比如 babel 可能会删掉空行</li>\n</ul>\n</li>\n<li><p>hidden-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是不会对 sourcemap 文件进行引用</li>\n<li>相当于删除了打包文件中对 sourcemap 的引用注释。如果我们手动添加进行，那么 sourcemap 就会生效了</li>\n</ul>\n</li>\n<li><p>nosources-source-map</p>\n<ul>\n<li>会生成 sourcemap，但是生成的 sourcemap 只有错误信息的提示，不会生成源代码文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// none | development | production (default)</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>, <span class=\"comment\">// reflect to the source code, will generate the filename.js.map file, if the mode is development then the devtool is source-map</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [], <span class=\"comment\">// add plugins</span></span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">              <span class=\"string\">&#x27;@babel/preset-env&#x27;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动化编译\"><a href=\"#自动化编译\" class=\"headerlink\" title=\"自动化编译\"></a>自动化编译</h3><p>通过如下方式可以达到自动编译</p>\n<ol>\n<li>webpack watch mode</li>\n<li>webpack-dev-server （常用）<ul>\n<li>webpack-dev-server 使用了 memfs 库，不会输出任何文件，生成的中间结果在内存中</li>\n</ul>\n</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 DevServer</p>\n<p>如果配置了 devServer.static 那么该内容会覆盖默认值，也即如果这个地方没有写 public 那么 public 将不会被认为是静态资源目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if this is defined, then the public must be insert to this list</span></span><br><span class=\"line\">    <span class=\"attr\">static</span>: [<span class=\"string\">&#x27;public&#x27;</span>, <span class=\"string\">&#x27;temp&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 进行压缩，会设置响应头中 content-encoding: gzip    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Webpack-性能优化\"><a href=\"#Webpack-性能优化\" class=\"headerlink\" title=\"Webpack 性能优化\"></a>Webpack 性能优化</h3><ul>\n<li>对打包结果进行优化<ul>\n<li>分包处理，Vue&#x2F;React 路由懒加载</li>\n<li>代码进行压缩（丑化 const message &#x3D;&gt; const m）</li>\n<li>删除无用代码（tree shaking）</li>\n<li>CDN 服务器（对第三方库使用 CDN）</li>\n</ul>\n</li>\n<li>对打包过程进行优化<ul>\n<li>加速打包的过程（exclude&#x2F;cache-loader）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-分包处理\"><a href=\"#1-分包处理\" class=\"headerlink\" title=\"1. 分包处理\"></a>1. 分包处理</h4><ul>\n<li>他的主要目的是将 <strong>代码分离到不同的 bundle 中</strong>，之后我们可以 <strong>按需加载</strong>，或者并行加载这些文件</li>\n<li>默认情况下，所有的 JavaScript 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，会影响首页加载的速度</li>\n<li>代码可以分离出更小的 bundle，以及控制资源加载优先级，提供代码的性能。</li>\n</ul>\n<p>webapck 中常用的代码分离方式：</p>\n<ol>\n<li><p>入口起点：使用 entry 配置手动分离代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用占位符：name 为上面的 index 和 main</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当多个入口文件对同一个库进行了依赖，可以设置起共享的库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">import</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">dependOn</span>: <span class=\"string\">&#x27;shared1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">import</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">dependOn</span>: <span class=\"string\">&#x27;shared1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// shared 可以配置多个，将会输出到 shared-xxx 文件中，其他依赖将会对该包进行引入 </span></span><br><span class=\"line\">    <span class=\"attr\">shared1</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用占位符：name 为上面的 index 和 main</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>防止重复：使用 Entry Dependencies 或 SplitChunksPlugin 去重和分离代码</p>\n</li>\n<li><p>动态导入：通过模块的内联函数调用来分离代码</p>\n<p>通过使用 import 函数 <code>import(&#39;xxx.js&#39;).then(() =&gt; &#123;&#123;&#125;&#125;)</code> </p>\n<p>当使用 import 函数时，then 中可以直接拿到导入文件的 export 对象，获取导出 default 对象，可以通过 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;xxx.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取默认导出对象</span></span><br><span class=\"line\">  res.<span class=\"title function_\">default</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 获取导出对象</span></span><br><span class=\"line\">  res.<span class=\"property\">obj</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过魔法注释修改打包后的文件名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 代表打包后的文件名，此名称替换 name 字段</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &#x27;a&#x27; */</span><span class=\"string\">&#x27;./ts/a&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">getResult</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;$123&#x27;</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;234&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>webpack 配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name]_chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// chunkFilename: &#x27;[id]_[name]_chunk.js&#x27;, // id 为文件路径，文件名使用 _ 分割的字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过配置 webpack 优化选项，设置分包方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// natural: 按照数字的顺序使用 id</span></span><br><span class=\"line\">    <span class=\"comment\">// named: development 下的默认值，文件路径使用 _ 分割</span></span><br><span class=\"line\">    <span class=\"comment\">// deterministic: 确定的，在不同的编译中不变的短数字 id</span></span><br><span class=\"line\">    <span class=\"attr\">chunkIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// default：async</span></span><br><span class=\"line\">      <span class=\"attr\">maxSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 20kb 拆分后的包最大大小，可能会大于最大值，由于一个函数或类可能很大</span></span><br><span class=\"line\">      <span class=\"attr\">minSize</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 拆分后的包最小大小</span></span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123; <span class=\"comment\">// 自定义拆包</span></span><br><span class=\"line\">        <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// test: /node_modules/, // 匹配路径中包含该字符串的</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>, <span class=\"comment\">// 匹配路径中包含 /node_modules/ 或者 \\node_modules\\</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_vendors.js&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">utils</span>: &#123; <span class=\"comment\">// 当编写的文件小于 minSize 时将不会被拆分</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/utils/</span>,</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_utils.js&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>chunIds 将会指定打包后文件的名字，当设置 natural 时，当导入文件发生变化时，不利于浏览器缓存，导致重新加载</p>\n<ul>\n<li>在开发中，推荐使用 named</li>\n<li>在打包过程中，推荐使用 deterministic</li>\n</ul>\n<h3 id=\"Prefetch-和-Preload\"><a href=\"#Prefetch-和-Preload\" class=\"headerlink\" title=\"Prefetch 和 Preload\"></a>Prefetch 和 Preload</h3><p>在声明 import 时，使用内置指令，告知浏览器</p>\n<ul>\n<li>prefetch（预获取）：将来某些导航下可能需要的资源</li>\n<li>preload（预加载）：当前导航下可能需要的资源</li>\n</ul>\n<p>于 prefetch 指令相比，preload 指令由许多不同之处</p>\n<ul>\n<li>preload chunk 会在父 chunk 加载时，以并行方式开始加载，prefetch 会在父 chunk 加载结束后开始加载</li>\n<li>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载</li>\n<li>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">  <span class=\"comment\">/* webpackChunkName: &#x27;a&#x27; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* webpackPreload: true */</span> <span class=\"comment\">// 设置预加载</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;./ts/a&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">getResult</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;$123&#x27;</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getResult</span>(<span class=\"string\">&#x27;234&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Shimming\"><a href=\"#Shimming\" class=\"headerlink\" title=\"Shimming\"></a>Shimming</h3><p>shimming 是一个概念，是某一类功能的统称：</p>\n<ul>\n<li>shimming 翻译过来我们称之为 垫片，相当于给我们的代码填充一些垫片来处理一些问题</li>\n<li>比如我们现在以来一个第三方的库，这个第三方的库本身依赖 lodash，但是默认没有对 lodash 进行导入（认为全局存在 lodash），那么我们就可以通过 ProvidePlugin 来实现 shimming 的效果</li>\n</ul>\n<p>webpack 并不推荐随意的使用 shimming</p>\n<ul>\n<li>webpack 背后的整个理念是使前端开发更加模块化</li>\n<li>也就是说，需要编写具有封闭性的，不存在隐含依赖（比如全局变量）的彼此隔离的模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ProvidePlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相当于对全局使用 import ReactDom from &#x27;react-dom/client&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// ReactDom: &#x27;react-dom/client&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// 相当于对全局使用 import &#123; createRoot &#125; from &#x27;react-dom/client</span></span><br><span class=\"line\">      <span class=\"attr\">createRoot</span>: [<span class=\"string\">&#x27;react-dom/client&#x27;</span>, <span class=\"string\">&#x27;createRoot&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对-CSS-文件进行单独提取\"><a href=\"#对-CSS-文件进行单独提取\" class=\"headerlink\" title=\"对 CSS 文件进行单独提取\"></a>对 CSS 文件进行单独提取</h3><p>提取 css 需要安装对应的依赖：<code>npm install mini-css-extract-plugin -D</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// &#x27;style-loader&#x27;, // style-loader 将会通过 js 在 html 插入 style 标签，并将相应的样式填入（开发阶段）</span></span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"comment\">// 提取到单独的 css 文件中，通过 link 进行引入（生产阶段）</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ], <span class=\"comment\">// loader 将会从后往前进行加载</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对打包后的文件名字，如下打包将会放入 css 文件夹中</span></span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name]-css.css&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;css/[name].css&#x27;</span>, <span class=\"comment\">// 分包后的包文件名</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Hash、ContentHash、ChunkHash\"><a href=\"#Hash、ContentHash、ChunkHash\" class=\"headerlink\" title=\"Hash、ContentHash、ChunkHash\"></a>Hash、ContentHash、ChunkHash</h3><p>在给打包的文件进行命名的时候，会使用 placeholder，placeholder 中有几个比较常用的属性</p>\n<p>hash 本身使通过 MD4 的散列函数处理后，生成一个 128 位的 hash 值（32 个十六进制）</p>\n<ul>\n<li>fullhash：当某个文件发生改变时，所有文件的 hash 值都会重新生成，且一样<ul>\n<li>hash 值的生成和整个项目有关系</li>\n<li>当存在两个入口文件 index.js 和 main.js 时，他们分别会输出到不同的 bundle.js 文件中，并且在文件名称中我们有使用 hash</li>\n<li>这个时候，如果修改了 index.js 文件中的内容，那么 hash 会发生变化，意味着两个文件的名称都会发生变化</li>\n</ul>\n</li>\n<li>chunkhash：当某个文件发生改变时，只有改变的文件 hash 值会重新生成<ul>\n<li>可以有效解决上面的问题，他会根据不同的入口进行解析来生成 hash 值</li>\n<li>比如修改了 index.js，那么 main.js 的 chunkhash 是不会发生改变的</li>\n<li>chunkhash 根据不同的入口文件(entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。当某个文件内容发生变动时，再次执行打包，只有该文件以及依赖该文件的文件的打包结果 hash 值会发生改变</li>\n</ul>\n</li>\n<li>contenthash：表示生成的文件 hash 名称，只和内容有关（推荐）<ul>\n<li>比如我们的 index.js 引入了一个 style.css，style.css 有被抽取到一个独立的 css 文件</li>\n<li>这个 css 文件在命名时，如果我们使用的是 chunkhash，那么当 index.js 文件的内容发生变化时，css 文件的命名也会发生变化</li>\n<li>这个时候我们可以使用 contenthash</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"DLL-库\"><a href=\"#DLL-库\" class=\"headerlink\" title=\"DLL 库\"></a>DLL 库</h3><p>DLL 全程是动态链接库（Dynamic Link Library）</p>\n<ul>\n<li>它指的是我们可以共享，并且不经常改变的代码，抽取称一个共享的库</li>\n<li>这个库在之后编译的过程中，会被引入到其他项目的代码中</li>\n</ul>\n<p>使用过程：</p>\n<ol>\n<li>打包 DLL 库</li>\n<li>项目中引入 DLL 库</li>\n</ol>\n<p>现在已经不再使用，移除原因：webpack 4 已经提供很好的性能，没有必要再花费时间去维护 DLL</p>\n<h3 id=\"Terser\"><a href=\"#Terser\" class=\"headerlink\" title=\"Terser\"></a>Terser</h3><ul>\n<li><p>Terser 是一个 JavaScript 的解析（Parser）、Mangler（绞肉机）、Compressor（压缩机） 的工具集</p>\n</li>\n<li><p>早期我们会使用 uglify-js 来压缩、丑化我们的 JavaScript 代码，但是目前已经不再维护，并且不支持 ES6+ 的语法</p>\n</li>\n<li><p>Terser 是从 uglify-es fork 过来的，并且保留了他原来的大部分 API 以及适配 uglify-es 和 uglify-js@3 等</p>\n</li>\n</ul>\n<h4 id=\"命令行使用方式\"><a href=\"#命令行使用方式\" class=\"headerlink\" title=\"命令行使用方式\"></a>命令行使用方式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terser [filename] -o [outputfilename] -c [arguments] -m [arguments]</span><br></pre></td></tr></table></figure>\n\n<p>-c 表示压缩（compress）</p>\n<ul>\n<li>arrows：class 或 object 中的函数，转换成箭头函数</li>\n<li>arguments：将函数中使用的 arguments[index] 转成对应的形参名称</li>\n<li>dead_code：移除不可达的代码（tree shaking）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx terser a.js -o a.min.js -c arrows=<span class=\"literal\">true</span>,arguments=<span class=\"literal\">true</span>,dead_code=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>优化前代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name1, name2</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1, name2)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>], <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;234&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;lisi&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优化后代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name1,name2</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1,name2),<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1,name2)&#125;<span class=\"title function_\">test</span>(<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;234&quot;</span>);<span class=\"keyword\">const</span> obj=&#123;<span class=\"attr\">bar</span>:<span class=\"function\">()=&gt;</span><span class=\"string\">&quot;bar&quot;</span>&#125;;<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;name=<span class=\"string\">&quot;zhangsan&quot;</span>;<span class=\"title function_\">getName</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;lisi&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>-m 选项</p>\n<ul>\n<li><p>top_level：优化顶层所有变量名</p>\n</li>\n<li><p>keep_fnames：保持函数原名</p>\n</li>\n<li><p>keep_classnames：保持原类名</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx terser .\\src\\main.js -o main.min.js -c arrows=<span class=\"literal\">true</span>,arguments=<span class=\"literal\">true</span>,dead_code=<span class=\"literal\">true</span> -m toplevel=<span class=\"literal\">true</span>,keep_fnames=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">n,s</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n,s),<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n,s)&#125;<span class=\"title function_\">test</span>(<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;234&quot;</span>);<span class=\"keyword\">const</span> n=&#123;<span class=\"attr\">bar</span>:<span class=\"function\">()=&gt;</span><span class=\"string\">&quot;bar&quot;</span>&#125;;<span class=\"keyword\">class</span> <span class=\"title class_\">s</span>&#123;name=<span class=\"string\">&quot;zhangsan&quot;</span>;<span class=\"title function_\">getName</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;lisi&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-webpack-中配置-terser\"><a href=\"#在-webpack-中配置-terser\" class=\"headerlink\" title=\"在 webpack 中配置 terser\"></a>在 webpack 中配置 terser</h4><ul>\n<li>在 webpack 中有一个 minimizer 属性，在 production 模式下，默认就是使用 TerserPlugin 来处理我们的代码的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[contenthash:10]-[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 屏蔽第三方库中的注释</span></span><br><span class=\"line\">        <span class=\"attr\">extractComments</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 使用多进程并发提高构建速度，默认值是 true</span></span><br><span class=\"line\">        <span class=\"comment\">// 并发运行的默认数量是 os.cpu().length - 1</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们也可以设置自己的个数，使用默认即可</span></span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 配置函数中使用 arguments 进行优化</span></span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 未被引用的代码将被删除</span></span><br><span class=\"line\">            <span class=\"attr\">unused</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 配置 Mangler（绞肉机）</span></span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 对 mangle 传入的参数</span></span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CSS-压缩\"><a href=\"#CSS-压缩\" class=\"headerlink\" title=\"CSS 压缩\"></a>CSS 压缩</h3><p>需要安装对应的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 压缩通常是去除无用的空格等，它使用的是 cssnano 工具来进行优化、压缩 CSS 也可以单独使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CSSMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[contenthash:10]-[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CSSMinimizerPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;style/[name]-[contenthash:10].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置文件的拆分\"><a href=\"#webpack-配置文件的拆分\" class=\"headerlink\" title=\"webpack 配置文件的拆分\"></a>webpack 配置文件的拆分</h3><p>在编写 webpack 配置文件时，可以导出一个函数，并且可以通过 –env 给该函数传入相应的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> commonConfig</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;multiply_config&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack --config ./config/common.config.js --env development&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;^5.97.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^6.0.1&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 webpack-merge 插件进行拆分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> production = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./production.config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> development = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./development.config&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HTMLWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(commonConfig, production)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(commonConfig, development)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// development.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// production.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCSSExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CSSMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arrows</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_classnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CSSMinimizerPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCSSExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCSSExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name]-[contenthash:10].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TreeShaking\"><a href=\"#TreeShaking\" class=\"headerlink\" title=\"TreeShaking\"></a>TreeShaking</h3><p>通过使用 <code>optimization.userdExports: true</code> 联合 terser 进行删除不会使用的代码</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用该参数，将会在生成的代码中标注那些函数没被使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过 terser plugin 对标记的代码进行删除</span></span><br><span class=\"line\">    <span class=\"comment\">// plugin 模式下会自动开启该功能</span></span><br><span class=\"line\">    <span class=\"attr\">usedExports</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">arrows</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">arguments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_fnames</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">keep_classnames</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 sideEffects 方式删除多余代码在 package.json 中</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;multiply_config&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 告诉 webpack 所有文件都没有副作用，可以删除</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;sideEffects&quot;: false,</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过数组的方式告诉 webpack 那些文件存在副作用</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sideEffects&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;./src/utils/sideEffect.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;*.css&quot;</span> <span class=\"comment\">// 所有 css 将不会被优化删除</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/main.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在模块中使用类似 <code>window.a = &#39;123&#39;</code> 就时副作用代码</p>\n<h4 id=\"CSS-tree-shaking\"><a href=\"#CSS-tree-shaking\" class=\"headerlink\" title=\"CSS tree shaking\"></a>CSS tree shaking</h4><p>安装对应依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Scope-Hosting\"><a href=\"#Scope-Hosting\" class=\"headerlink\" title=\"Scope Hosting\"></a>Scope Hosting</h3><p>由于打包之后的文件每个模块会存在一个单独的作用域，在一个模块中使用另一个模块中的函数等将会涉及跨作用域的问题，从而导致的性能低下。</p>\n<p>该配置在 production 模式下是默认开启的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">ModuleConcatenationPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HTTP-压缩\"><a href=\"#HTTP-压缩\" class=\"headerlink\" title=\"HTTP 压缩\"></a>HTTP 压缩</h3><p>HTTP 压缩是一种内置在服务器和客户端之间的，以改进传输速度和带宽利用率的方式</p>\n<ol>\n<li><p>第一步，http 数据在服务器发送前就已经被压缩了；（可以在 webpack 中完成）</p>\n</li>\n<li><p>第二步，兼容的浏览器在向服务器发送请求时，或告知服务器自己支持哪些压缩格式</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/encrypted-area</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.example.com</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三步，服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Encoding</span><span class=\"punctuation\">: </span>gzip</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Gzip-压缩\"><a href=\"#Gzip-压缩\" class=\"headerlink\" title=\"Gzip 压缩\"></a>Gzip 压缩</h3><p>webpack 中相当于是实现了 HTTP 压缩的第一步操作，我们可以使用 CompressionPlugin</p>\n<ul>\n<li><p>安装 CompressionPlugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install compression-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 CompressionPlugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(css|js)$/</span>, <span class=\"comment\">// 匹配哪些文件将被压缩</span></span><br><span class=\"line\">      <span class=\"comment\">// threshold: 500, // 设置文件从多大开始压缩</span></span><br><span class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0.7</span>, <span class=\"comment\">// 至少压缩的比例</span></span><br><span class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;gzip&#x27;</span> <span class=\"comment\">// 采用的压缩算法</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"HTML-压缩\"><a href=\"#HTML-压缩\" class=\"headerlink\" title=\"HTML 压缩\"></a>HTML 压缩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTMLWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> production = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./production.config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> development = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./development.config&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = <span class=\"keyword\">function</span>(<span class=\"params\">isProduction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name]-[contenthash:10].js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../build&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HTMLWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当文件内容发生改变的时候才重新生成</span></span><br><span class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: isProduction ? &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 压缩时移除注释</span></span><br><span class=\"line\">          <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除空属性，例如 &lt;div class=&#x27;&#x27;&gt;&lt;/div&gt; =&gt; &lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">removeEmptyAttributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 移除多以的属性，例如：&lt;input type=&#x27;text&#x27;&gt; =&gt; &lt;input&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">removeRedundantAttributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除空行和空格</span></span><br><span class=\"line\">          <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 压缩内联 css</span></span><br><span class=\"line\">          <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 压缩内联 js</span></span><br><span class=\"line\">          <span class=\"attr\">minifyJS</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">mangle</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125; : <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.html&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;production environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">commonConfig</span>(<span class=\"literal\">true</span>), production)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;development environment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">commonConfig</span>(<span class=\"literal\">false</span>), development)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"针对于打包过程进行分析\"><a href=\"#针对于打包过程进行分析\" class=\"headerlink\" title=\"针对于打包过程进行分析\"></a>针对于打包过程进行分析</h3><p>需要安装 speed-measure-webpack-plugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install speed-measure-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对打包后的文件进行分析\"><a href=\"#对打包后的文件进行分析\" class=\"headerlink\" title=\"对打包后的文件进行分析\"></a>对打包后的文件进行分析</h3><p>方式一：添加 <code>--profile --json=stats.json</code> 将会生成 stats.json 文件，该文件可通过 webpack 的在线分析平台进行分析</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/common.config.js --env development --profile --json=stats.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:pro&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/common.config.js --env production&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>方式二：使用插件进行分析打包后的文件 <code>webpack-bundle-analyzer</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure>\n\n<p>在 webpack 中配置该插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">BundleAnalyzerPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方式会自动开启一个端口用于展示生成后的文件状态：localhost:8080 </p>\n<h2 id=\"Webpack-源码\"><a href=\"#Webpack-源码\" class=\"headerlink\" title=\"Webpack 源码\"></a>Webpack 源码</h2><h3 id=\"createCompiler\"><a href=\"#createCompiler\" class=\"headerlink\" title=\"createCompiler\"></a>createCompiler</h3><p>webpack 首先会创建 compiler，然后注册插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">WebpackOptions</span>&#125; rawOptions options object</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [compilerIndex] index of compiler</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Compiler</span>&#125; a compiler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createCompiler</span> = (<span class=\"params\">rawOptions, compilerIndex</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> options = <span class=\"title function_\">getNormalizedWebpackOptions</span>(rawOptions);</span><br><span class=\"line\">\t<span class=\"title function_\">applyWebpackOptionsBaseDefaults</span>(options);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler</span>(</span><br><span class=\"line\">\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string</span>&#125; */</span> (options.<span class=\"property\">context</span>),</span><br><span class=\"line\">\t\toptions</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">NodeEnvironmentPlugin</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">infrastructureLogging</span>: options.<span class=\"property\">infrastructureLogging</span></span><br><span class=\"line\">\t&#125;).<span class=\"title function_\">apply</span>(compiler);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(options.<span class=\"property\">plugins</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> plugin <span class=\"keyword\">of</span> options.<span class=\"property\">plugins</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当插件是一个函数时将会执行这个函数，传入 compiler，并给该函数绑定 compiler</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">WebpackPluginFunction</span>&#125; */</span></span><br><span class=\"line\">\t\t\t\t(plugin).<span class=\"title function_\">call</span>(compiler, compiler);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (plugin) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当插件时一个对象时，必须存在一个 apply 函数，compiler 将会传入这个函数</span></span><br><span class=\"line\">\t\t\t\tplugin.<span class=\"title function_\">apply</span>(compiler);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolvedDefaultOptions = <span class=\"title function_\">applyWebpackOptionsDefaults</span>(</span><br><span class=\"line\">\t\toptions,</span><br><span class=\"line\">\t\tcompilerIndex</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolvedDefaultOptions.<span class=\"property\">platform</span>) &#123;</span><br><span class=\"line\">\t\tcompiler.<span class=\"property\">platform</span> = resolvedDefaultOptions.<span class=\"property\">platform</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">environment</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">afterEnvironment</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebpackOptionsApply</span>().<span class=\"title function_\">process</span>(options, compiler);</span><br><span class=\"line\">\tcompiler.<span class=\"property\">hooks</span>.<span class=\"property\">initialize</span>.<span class=\"title function_\">call</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"webpack-解析过程\"><a href=\"#webpack-解析过程\" class=\"headerlink\" title=\"webpack 解析过程\"></a>webpack 解析过程</h3><h3 id=\"自定义-Loader\"><a href=\"#自定义-Loader\" class=\"headerlink\" title=\"自定义 Loader\"></a>自定义 Loader</h3><p>Loader 是用于对模块的源代码进行转换（处理），Loader 本质上是一个导出为函数的 Js 模块，Loader  runner 库会调用这个函数，然后将上一个 loader 产生的结果或者资源文件传入进去</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-[contenthash:6].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;./loaders/loader04.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: [</span></span><br><span class=\"line\">      <span class=\"comment\">//     // 可以使用相对路径，loader 将会从后往前进行加载</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader01.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader02.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//     &#x27;./loaders/loader03.js&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   ]</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如下代码也将会从后往前加载</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader01.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader02.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   test: /\\.js$/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   use: &#x27;./loaders/loader03.js&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>loader01.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"callback-函数\"><a href=\"#callback-函数\" class=\"headerlink\" title=\"callback 函数\"></a>callback 函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 callback 可以返回信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = <span class=\"variable language_\">this</span>.<span class=\"property\">callback</span></span><br><span class=\"line\">  <span class=\"comment\">// 当 return 和 callabck 同时存在时，callback 返回的内容将会传递给下一个 loader</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一： 异常信息</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：返回给下一个 loader 的内容</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// callback(null, content + &#x27;\\n//aaaaaaaaaaa&#x27;)</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当将 callback 放到异步函数里面，其返回值将不生效</span></span><br><span class=\"line\">    <span class=\"comment\">// 其后面的 loader 将不会延迟执行</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content + <span class=\"string\">&#x27;\\n//aaaaaaaaaaa&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==========2=========&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"async-函数（异步函数）\"><a href=\"#async-函数（异步函数）\" class=\"headerlink\" title=\"async 函数（异步函数）\"></a>async 函数（异步函数）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; content 上一个 loader 返回的结果或者文件的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; map 根 source map 有关</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; meta 元数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callabck = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 通过 async 返回的函数作为异步函数，该 loader 将被视为一个异步 loader</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下一个 loader 的 content 参数将会加上这个 loader 返回的结果，其优先级大于 return，return 返回的东西将不会生效</span></span><br><span class=\"line\">    <span class=\"comment\">// 其后面的 loader 将会延后执行</span></span><br><span class=\"line\">    <span class=\"title function_\">callabck</span>(<span class=\"literal\">null</span>, content + <span class=\"string\">&#x27;\\n//3333333&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==========3=========&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====================&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给-loader-传递参数\"><a href=\"#给-loader-传递参数\" class=\"headerlink\" title=\"给 loader 传递参数\"></a>给 loader 传递参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;loader-utils&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方式一：通过 loader-utils （webpack 开发）的库来获取</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>)) <span class=\"comment\">// 现在执行将会报错 TypeError: getOptions is not a function</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式二：通过 this.getOptions() 函数来获取</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getOptions</span>()) <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27;, age: 18 &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对传入的参数进行校验\"><a href=\"#对传入的参数进行校验\" class=\"headerlink\" title=\"对传入的参数进行校验\"></a>对传入的参数进行校验</h4><p>需要使用第三方库的支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install schema-utils -D</span><br></pre></td></tr></table></figure>\n\n<p>loader.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOptions</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一：校验的规则</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：需要校验的数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;username&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"markdown-loader\"><a href=\"#markdown-loader\" class=\"headerlink\" title=\"markdown loader\"></a>markdown loader</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; marked &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;marked&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> hljs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;highlight.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">code</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      type: &#x27;code&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      raw: &#x27;```javascript\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;const a = &#x27;213&#x27;\\n&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;let obj = &#123;\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;  age: 18\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;&#125;\\n&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">        &quot;console.log(&#x27;aaa&#x27;)\\n&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">        &#x27;```&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      lang: &#x27;javascript&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">      text: &quot;const a = &#x27;213&#x27;\\nlet obj = &#123;\\n  age: 18\\n&#125;\\nconsole.log(&#x27;aaa&#x27;)&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> language = hljs.<span class=\"title function_\">getLanguage</span>(obj.<span class=\"property\">lang</span>) ? obj.<span class=\"property\">lang</span> : <span class=\"string\">&#x27;plaintext&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> highlightedCode = hljs.<span class=\"title function_\">highlight</span>(obj.<span class=\"property\">text</span>, &#123; language &#125;).<span class=\"property\">value</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;pre&gt;&lt;code class=&quot;hljs <span class=\"subst\">$&#123;language&#125;</span>&quot;&gt;<span class=\"subst\">$&#123;highlightedCode&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;pre&gt;&lt;code class=&quot;hljs <span class=\"subst\">$&#123;language&#125;</span>&quot;&gt;<span class=\"subst\">$&#123;obj.text&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  marked.<span class=\"title function_\">use</span>(&#123; <span class=\"attr\">renderer</span>: renderer &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> htmlContent = <span class=\"title function_\">marked</span>(content)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleContent = <span class=\"string\">`var md = \\`<span class=\"subst\">$&#123;htmlContent&#125;</span>\\`; export default md`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> moduleContent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"自定义插件\"><a href=\"#自定义插件\" class=\"headerlink\" title=\"自定义插件\"></a>自定义插件</h3><p>webpack 中的compiler 和 compilation 通过注入插件的方式，来监听 webpack 的声明周期，其创建了 Tapable 库中的各种 Hook 的实例</p>\n<ol>\n<li>webpack 函数中的 createCompiler 方法中，注册了所有的插件</li>\n<li>在注册插件时，会调用插件函数或者插件对象的 apply 方法</li>\n<li>插件方法会接受 compiler 对象，我们可以通过 compiler 对象来注册 Hook 事件</li>\n<li>某些插件也会传入一个 compilation 的对象，我们也可以监听 compilation 的 hook 事件</li>\n</ol>\n<h4 id=\"Tapable\"><a href=\"#Tapable\" class=\"headerlink\" title=\"Tapable\"></a>Tapable</h4><p>Tapable 是管理着需要的 Hook，这些 Hook 可以被应用到我们的插件中</p>\n<ul>\n<li>bail：当有返回值时，就不会执行后续的事件触发了</li>\n<li>loop：当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容时，就退出事件</li>\n<li>waterfall：当返回值不为 undefined 时，会将这次放回的结果作为下次事件的第一个参数</li>\n<li>parallel：并行，会同时执行事件处理回调结束，不会等到这个事件执行结束才执行下一次事件处理回调</li>\n<li>series：串行，会等待上一次异步的 Hook</li>\n</ul>\n<p>官方提供的 Hook</p>\n<ul>\n<li>同步 Hook：SyncHook、SyncBailHook、SyncWatefallHook、SyncLoopHook</li>\n<li>异步 Hook，两个事件处理回调，不会等待上一次处理回调结果后再执行下一次回调<ul>\n<li>Paralle（并行）：AsyncPralleHook、AsyncParalleBailHook</li>\n<li>Series（串行）：AsyncSeriesHook、AsyncSeriesBailHook、AsyncSeriesWaterfallHook</li>\n</ul>\n</li>\n</ul>\n<p>安装 tapable 库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install tapable -D</span><br></pre></td></tr></table></figure>\n\n<p>基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">syncHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">syncHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>bail</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncBailHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">bailHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 当存在返回值时，后续的回调将不会执行</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">bailHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>loop</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncLoopHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">loopHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncLoopHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 当不存在返回值或者返回值为 undefined 时将会中断循环</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> count -- === <span class=\"number\">0</span> ? <span class=\"literal\">undefined</span> : count</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">loopHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>waterfall</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncWaterfallHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">waterfallHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncWaterfallHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      <span class=\"comment\">// 返回值不为 undefined 时，将作为下一个回调函数第一个参数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age) <span class=\"comment\">// hook1 execute 2 &#123; gender: &#x27;male&#x27; &#125; 18</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">waterfallHook</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<p>parallel</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">AsyncParallelHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">parallelHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">      &#125;, <span class=\"number\">900</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">parallelHook</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute 2 zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute zhangsan 18</span></span><br></pre></td></tr></table></figure>\n\n<p>series</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">AsyncSeriesHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tapable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 hook， name，age 为调用这个 hook 需要传递的参数</span></span><br><span class=\"line\">      <span class=\"attr\">serieslHook</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 hook 监听事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event1&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute&#x27;</span>, name, age)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 callback 下面的任务才会执行</span></span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;event2&#x27;</span>, <span class=\"function\">(<span class=\"params\">name, age, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hook1 execute 2&#x27;</span>, name, age)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">      &#125;, <span class=\"number\">900</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler1</span>()</span><br><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">serieslHook</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">18</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;all tasks finished&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// hook1 execute 2 zhangsan 18</span></span><br><span class=\"line\"><span class=\"comment\">// all tasks finished</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><blockquote>\n<p>babel 是一个工具链，主要用于就浏览器或者环境中的 ECMAScript2015 + 代码转化为向后兼容版本的 JavaScript</p>\n<ul>\n<li>包括：语法转换、源代码转换、Polyfill 实现目标环境缺少的功能等</li>\n<li>需下载 @babel&#x2F;core @babel&#x2F;cli</li>\n</ul>\n</blockquote>\n<p>在使用 babel 命令时可以设置 plugins 参数，将其转换为使用该插件后的代码：</p>\n<p>转化箭头函数为普通函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># transform arrow function to function</span></span><br><span class=\"line\">npm install @babel/plugin-transform-arrow-functions -D</span><br><span class=\"line\">npx babel src --out-dir dist --plugin@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure>\n\n<p>转化块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># transform block scoping</span></span><br><span class=\"line\">npm install @babel/plugin-transform-block-scoping -D</span><br><span class=\"line\">npm babel src --out-dir dist --plugin@babel/plugin-transform-block-scoping,@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析原理\"><a href=\"#解析原理\" class=\"headerlink\" title=\"解析原理\"></a>解析原理</h3><p><a href=\"https://github.com/jamiebuilds/the-super-tiny-compiler\">https://github.com/jamiebuilds/the-super-tiny-compiler</a></p>\n<p><img src=\"/paw/.%5Cimgs%5Cbabel\" alt=\"1735832299456\"></p>\n<ol>\n<li>解析阶段（Parsing）</li>\n<li>转换阶段（Transformation）</li>\n<li>生成阶段（Code Generation）</li>\n</ol>\n<h3 id=\"预设\"><a href=\"#预设\" class=\"headerlink\" title=\"预设\"></a>预设</h3><p>安装 @babel&#x2F;preset-env</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/preset-env -D</span><br><span class=\"line\"></span><br><span class=\"line\">npx babel ./src --out-dir ./dist --presets=@babel/preset-env</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-配置文件\"><a href=\"#babel-配置文件\" class=\"headerlink\" title=\"babel 配置文件\"></a>babel 配置文件</h3><p>可以将 babel 的配置信息编写到一个文件中</p>\n<ul>\n<li>babel.config.json（或 .js, .cjs, .mjs）文件（推荐）<ul>\n<li>可以直接作用于 Monorepos 项目的子包，更加推荐</li>\n</ul>\n</li>\n<li>.babelrc.json （或 .babelrc, .js, .cjs, .mjs）文件<ul>\n<li>早期使用较多的配置方案，但是对于配置 Monorepos 项目是比较麻烦的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Browserslist-插件\"><a href=\"#Browserslist-插件\" class=\"headerlink\" title=\"Browserslist 插件\"></a>Browserslist 插件</h2><p>Browserslist 可以在不同的的前端工具之间，共享目标浏览器和 Node.js 版本的配置</p>\n<p>条件查询使用的是 caiuse-lite 的工具，这个工具的数据来自于 caniuse 的网站上</p>\n<p>browserslist 编写规则：</p>\n<ul>\n<li>defaults：browserslist 的默认浏览器（&gt;0.5%, last 2 versions, Firefox ESR, not dead）</li>\n<li>5%：通过全局使用情况统计信息选择的浏览器版本，&gt;&#x3D;, &lt; 和 &lt;&#x3D;</li>\n</ul>\n<p>dead：24 个月内没有官方支持或更新的浏览器</p>\n<p>last 2 versions：每个浏览器的最后两个版本</p>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><ol>\n<li>可以在 package.json 文件中编写</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;browserlists&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;last 2 versions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;not dead&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;&gt; 0.2%&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 .browserslistrc 文件中编写（最常使用）<ol>\n<li>该配置将会在多个工具之间进行共享（postcss&#x2F;babel）</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 0.2%</span></span><br><span class=\"line\">last 2 versions</span><br><span class=\"line\">not dead</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>可以在 webpack.config.js 文件中配置（不常用）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">              [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">targets</span>: <span class=\"string\">&#x27;&gt;5%&#x27;</span>, <span class=\"comment\">// 将会覆盖 browserslist 文件中的内容</span></span><br><span class=\"line\">              &#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><p>将一些高版本 js 代码对应于低版本中不存在的 API（Promise，string.includes 等函数）采用补丁的方式进行替换</p>\n<p>安装对应依赖（开发和生产环境都需要依赖）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install core-js regenerator-runtime</span><br></pre></td></tr></table></figure>\n\n<p>useBuiltIns 属性的可选值：</p>\n<ol>\n<li>false：<ul>\n<li>打包后的文件不适用 polyfill 来进行适配</li>\n<li>并且这个时候是不需要设置 corejs 属性的</li>\n</ul>\n</li>\n<li>usage：<ul>\n<li>会根据源代码中出现的语言特性，自动检测所需要的 polyfill</li>\n<li>这样可以确保最终包离的 polyfill 数量的最小化，打包的包相对较小</li>\n<li>可以设置 corejs 属性来确定使用的 corejs 的版本</li>\n</ul>\n</li>\n<li>entry<ul>\n<li>如果我们依赖的某一个库本身使用了 polyfill 的特性，但是因为我们使用的是 usage，所以之后用户浏览器可能会报错，如果担心这种情况，可以使用 entry</li>\n<li>并且需要在入口文件中添加 <code>import &#39;core-js/stable&#39;; import &#39;regenerator-runtime/runtime&#39;;</code> </li>\n<li>这样做会根据 browserslist 目标导入所有的 polyfill，但是对应的包会很大</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&#x27;entry&#x27;</span> <span class=\"comment\">// 表示不使用 polyfill，可选值：【false|usage(使用polyfill进行填充)|entry】</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>入口文件 main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/stable&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;regenerator-runtime/runtime&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CDN-服务器\"><a href=\"#CDN-服务器\" class=\"headerlink\" title=\"CDN 服务器\"></a>CDN 服务器</h2><p>CDN 称之为内容分发网络（Content Delivery Network 或 Content Distribution Network）</p>\n<ul>\n<li>它是指通过相互连接的网络系统，利用最靠近每个用户的服务器</li>\n<li>更快、更可靠的将音乐、图片、视频、应用程序以及其他文件发送给用户</li>\n<li>来提供高性能、可扩展性及低成本的网络内容传递给用户</li>\n</ul>\n<p>在开发中，我们使用 CDN 主要是两种方式</p>\n<ol>\n<li><p>打包所有的静态资源，放到 CDN 服务器，用户所有资源都是通过 CDN 服务器加载的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]-bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name]_chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// path 必须指定绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// when rebuild, the output dir will be cleaned</span></span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;https://xxxcdn.com&#x27;</span>, <span class=\"comment\">// 设置 CDN 服务器域名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>一些第三方资源放到 CDN 服务器上</p>\n<p>国内 CDN 平台 <a href=\"https://www.bootcdn.cn/\">BOOTCDN</a> </p>\n<p>在 模板 index 中直接引入需要从 CDN 引用的第三方库</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/react/18.3.1/umd/react.production.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 webpack 中配置相应从 CDN 引用的包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key: 排除框架的名称，import xxx from &#x27;key&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// value：从 CDN 请求下来的 js 中提供的对应名称</span></span><br><span class=\"line\">    <span class=\"attr\">react</span>: <span class=\"string\">&#x27;React&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// react_dom: &#x27;ReactDom&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><p>gulp 的核心理念是 task runner</p>\n<ul>\n<li>可以定义自己的一系列任务，等待任务被执行</li>\n<li>基于文件 stream 的构建流</li>\n<li>我们可以使用 gulp 的插件体系来完成某些任务</li>\n</ul>\n<p>webpack 的核心理念是 module bundler</p>\n<ul>\n<li>webpack 是一个模块化的打包工具</li>\n<li>可以使用各种各样的 loader 来加载不同的模块</li>\n<li>可以使用各种各样的插件在 webpack 打包的生命周期完成其他任务</li>\n</ul>\n<p>gulp 相对于 webpack 的优缺点</p>\n<ul>\n<li>gulp 相对于 webpack 思想更加的简单、医用，更适合编写一些自动化的任务</li>\n<li>但是目前对于大型项目（Vue、React、Angular）并不会使用 gulp 来构建，比如默认 gulp 是不支持模块化的</li>\n</ul>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>安装对应依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp</span><br></pre></td></tr></table></figure>\n\n<p>编写 gulpfile 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 npx gulp foo1 执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;task 1 finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 需要调用 callback 才能知道该任务已完成</span></span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行方式二</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;foo2&#x27;</span>, <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;task 2 finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  foo1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认任务 通过 npx gulp</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">default</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default task finished&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-gulp-任务\"><a href=\"#创建-gulp-任务\" class=\"headerlink\" title=\"创建 gulp 任务\"></a>创建 gulp 任务</h3><p>每个 gulp 任务都是一个异步的 JavaScript 代码</p>\n<ul>\n<li>此函数可以接收一个 callback 作为参数，调用 callback 函数，那么该任务会结束</li>\n<li>或者是一个返回 stream、promise、event emitter、child process 或 observable 类型的函数</li>\n</ul>\n<p>任务可以是 public 或者 private 类型的</p>\n<ul>\n<li>公开任务（public tasks）从 gulpfile 中被导出（export），可以通过 gulp 命令直接调用</li>\n<li>私有任务（private tasks）被设计为在内部使用，通常作为 series() 或 parallel() 组合的组成部分</li>\n</ul>\n<p><em>在 gulp 4 之前，注册任务时需要通过 gulp.task 的方式进行注册，也即上面的方式二</em></p>\n<h3 id=\"多任务\"><a href=\"#多任务\" class=\"headerlink\" title=\"多任务\"></a>多任务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; series, parallel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 npx gulp foo1 执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo2</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo3</span> = (<span class=\"params\">callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo3&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 任务会依次执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> seriesTask = <span class=\"title function_\">series</span>(foo1, foo2, foo3)</span><br><span class=\"line\"><span class=\"comment\">// 任务将并行执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parallelTask = <span class=\"title function_\">parallel</span>(foo1, foo2, foo3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  seriesTask,</span><br><span class=\"line\">  parallelTask</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><p>gulp 暴露了 src 和 dest 函数，用于处理计算机存放的文件</p>\n<ul>\n<li>src 接收一个正则路径，并从文件系统中读取文件然后生成一个 Node 流（Stream），它将所有匹配的文件放入内存中并通过读取流（Stream进行处理）</li>\n<li>由 src 产生的流（Stream）应当从任务（task 函数）中返回并发出异步完成的信号</li>\n<li>dest 接收一个输出目录作为参数，并且它还会产生一个 Node 流（Stream），通过该流将文件内容输出到文件中</li>\n</ul>\n<p>pipe 方法接收一个转换流（Transform stream）或 可写流（Writable Stream）</p>\n<p>转换流或可写流，拿到数据之后可以对数据进行操作，再次传递给下一个转换流或可写流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyFile</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**&#x27;</span>).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  copyFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对-Js-文件进行转化和压缩\"><a href=\"#对-Js-文件进行转化和压缩\" class=\"headerlink\" title=\"对 Js 文件进行转化和压缩\"></a>对 Js 文件进行转化和压缩</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest, watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">zipFile</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123; <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]&#125;))</span><br><span class=\"line\">    <span class=\"comment\">// .pipe(terser(&#123; mangle: &#123; toplevel: true &#125;&#125;))</span></span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">terser</span>(&#123; <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置自动监听</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*js&#x27;</span>, zipFile)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  zipFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-babel gulp-terser gulp-htmlmin gulp-less gulp-inject -D</span><br></pre></td></tr></table></figure>\n\n<p>html 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- inject:css --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endinject --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- inject:js --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endinject --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>gulpfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest, series, parallel, watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-less&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> inject = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-inject&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;browser-sync&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jsTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123; <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">terser</span>(&#123; <span class=\"attr\">mangle</span>: &#123; <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span> &#125;&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/js&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cssTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.less&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">less</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/css&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">htmlTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.html&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注入时使用相对路径设置 relative 为 true</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">injectTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./dist/**/*.html&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">inject</span>(<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;./dist/**/*.js&#x27;</span>, <span class=\"string\">&#x27;./dist/**/*.css&#x27;</span>]), &#123; <span class=\"attr\">relative</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启本地服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bs = browserSync.<span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">serveTask</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  bs.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8000</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">files</span>: <span class=\"string\">&#x27;./dist/*&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">baseDir</span>: <span class=\"string\">&#x27;./dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> parallelTask = <span class=\"title function_\">parallel</span>(jsTask, cssTask, htmlTask)</span><br><span class=\"line\"><span class=\"keyword\">const</span> buildTask = <span class=\"title function_\">series</span>(parallelTask, injectTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*&#x27;</span>, buildTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"title function_\">series</span>(buildTask, serveTask)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  serve,</span><br><span class=\"line\">  buildTask</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">default</span> = buildTask</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Rollup\"><a href=\"#Rollup\" class=\"headerlink\" title=\"Rollup\"></a>Rollup</h2><p>Rollup 是一个 JavaScript 的模块化打包工具，可以帮助我们编译小的代码到一个大的，复杂的代码中，比如一个库一个应用程序</p>\n<h3 id=\"rollup-VS-webpack\"><a href=\"#rollup-VS-webpack\" class=\"headerlink\" title=\"rollup VS webpack\"></a>rollup VS webpack</h3><ul>\n<li>rollup 是一个模块化的打包工具，但是 rollup 主要是针对 ESModule 进行打包的</li>\n<li>另外 webpack 通常可以通过各种 loader 处理各样的文件，以及他们之间的依赖关系</li>\n<li>rollup 更多时候是专注于处理 JavaScript 代码的（当然也可以是 css、font、vue 等文件）</li>\n<li>另外 rollup 的配置和理念相对于 webpack 来说，更加的简洁和容易理解</li>\n<li>在早期 webpack 不支持 tree shaking 时，rollup 具备更强的优势</li>\n</ul>\n<p>通常在实际项目开发过程中，我们都会使用 webpack（比如 react、angular 项目都是基于 webpack）</p>\n<p>在对库文件进行打包时，我们通常会使用 rollup （比如 vue、react、dayjs 源码本身都是基于 rollup的，vite 底层使用 rollup）</p>\n<h3 id=\"rollup-基本使用\"><a href=\"#rollup-基本使用\" class=\"headerlink\" title=\"rollup 基本使用\"></a>rollup 基本使用</h3><p>安装 rollup</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rollup -D</span><br></pre></td></tr></table></figure>\n\n<p>使用命令进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包为 node 环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f cjs -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为浏览器环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f iife -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为 amd 环境</span></span><br><span class=\"line\">npx rollup ./src/main.js -f cjs -o dist/bundle.cjs</span><br><span class=\"line\"><span class=\"comment\"># 打包为所有环境都支持，此时必须要指定名字</span></span><br><span class=\"line\">npx rollup ./src/main.js -f umd --name foo -o dist/bundle.cjs</span><br></pre></td></tr></table></figure>\n\n<p>原始代码内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>打包后的代码结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">global</span>, factory</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> ? <span class=\"title function_\">factory</span>(<span class=\"built_in\">exports</span>) :</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span> ? <span class=\"title function_\">define</span>([<span class=\"string\">&#x27;exports&#x27;</span>], factory) :</span><br><span class=\"line\">  (<span class=\"variable language_\">global</span> = <span class=\"keyword\">typeof</span> globalThis !== <span class=\"string\">&#x27;undefined&#x27;</span> ? globalThis : <span class=\"variable language_\">global</span> || self, <span class=\"title function_\">factory</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">foo</span> = &#123;&#125;));</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>, (<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span></span>) &#123; <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对上述代码的解析</span></span><br><span class=\"line\"><span class=\"comment\">// 打包后的代码定义了一个函数，该函数接收两个参数 global 和 factory，factory 为函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">global</span>, factory</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否存在 exports，并且 module 存在，则将 exports 传入</span></span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> ? <span class=\"title function_\">factory</span>(<span class=\"built_in\">exports</span>) :</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span> ? <span class=\"title function_\">define</span>([<span class=\"string\">&#x27;exports&#x27;</span>], factory) :</span><br><span class=\"line\">  <span class=\"comment\">// 在浏览器中会存在 global 和 globalThis 变量指向 window，相当于传入 factory为 window.foo = &#123;&#125;</span></span><br><span class=\"line\">  (<span class=\"variable language_\">global</span> = <span class=\"keyword\">typeof</span> globalThis !== <span class=\"string\">&#x27;undefined&#x27;</span> ? globalThis : <span class=\"variable language_\">global</span> || self, <span class=\"title function_\">factory</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">foo</span> = &#123;&#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 this 和 另外一个函数 传入该函数，执行该函数后，将会对全局对象绑定对应的属性</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"variable language_\">this</span>, (<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span></span>) &#123; <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// exports 将为对应环境中的 this（浏览器环境中 window，globalThis，this） 或 exports（node 环境中）</span></span><br><span class=\"line\">  <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>编写相应配置文件，通过 <code>npx rollup -c</code> 执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./dist/bundle.umd.js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对项目进行打包</p>\n<p>一般情况下不需要打包 node_modules 文件中的内容，用户可以通过依赖进行安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 loadsh 是通过 commonjs 导出的，默认情况下，rollup 不会对其进行打包</span></span><br><span class=\"line\"><span class=\"comment\">// 需要安装 @rollup/plugin-commonjs 解决 使用 esmodule 方式导入 commonjs 包</span></span><br><span class=\"line\"><span class=\"comment\">// 安装 @rollup/plugin-node-resolve 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;loadsh&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">join</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>\n\n<p>rollup.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对代码进行转化并压缩</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// nodeResolve(),</span></span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h3><p>安装对应的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rollup-plugin-postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 rollup</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// nodeResolve(),</span></span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">terser</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对-vue-进行打包\"><a href=\"#对-vue-进行打包\" class=\"headerlink\" title=\"对 vue 进行打包\"></a>对 vue 进行打包</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development</span></span><br><span class=\"line\"><span class=\"comment\">// 所以需要执行该变量 process.env.NODE_ENV</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-replace&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// commonjs(),</span></span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;bundled&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// terser(),</span></span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.NODE_ENV&#x27;</span>: <span class=\"string\">&#x27;&quot;development&quot;&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建本地开发服务\"><a href=\"#搭建本地开发服务\" class=\"headerlink\" title=\"搭建本地开发服务\"></a>搭建本地开发服务</h3><p>安装对应依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 本地服务</span></span><br><span class=\"line\">npm install rollup-plugin-server -D</span><br><span class=\"line\"><span class=\"comment\"># 监听文件发生变化重新打包</span></span><br><span class=\"line\">npm install rollup-plugin-livereload -D</span><br></pre></td></tr></table></figure>\n\n<p>配置环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该插件可以通过 commonjs 导出，使用 esmodule 方式导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonjs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解决 打包 node_modules 文件中的内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeResolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;babel&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-babel&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对代码进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> terser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-terser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@rollup/plugin-html&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 由于 vue 中使用了 node 环境中的 process 去判断当前的环境是否 production 还是 development</span></span><br><span class=\"line\"><span class=\"comment\">// 所以需要执行该变量 process.env.NODE_ENV</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-replace&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-server&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rollup-plugin-livereload&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包后的格式</span></span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用 umd 时，需要执行名称</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件</span></span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./build/bundle.umd.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loadsh</span>: <span class=\"string\">&#x27;_&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// commonjs(),</span></span><br><span class=\"line\">    <span class=\"title function_\">nodeResolve</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">babelHelpers</span>: <span class=\"string\">&#x27;bundled&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// terser(),</span></span><br><span class=\"line\">    <span class=\"title function_\">postcss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-preset-env&#x27;</span>)]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// html(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   include: &#x27;./index.html&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.NODE_ENV&#x27;</span>: <span class=\"string\">&#x27;&quot;development&quot;&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">server</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">8000</span>,</span><br><span class=\"line\">      <span class=\"attr\">contentDir</span>: <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">livereload</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -w: watch</span></span><br><span class=\"line\">npx rollup -c -w</span><br></pre></td></tr></table></figure>\n\n<p>在执行 rollup 命令时，可以指定参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过设定 environment 设置环境变量，可以在 rollup.config.js 文件中 通过 process.env.NODE_ENV 拿到该变量</span></span><br><span class=\"line\">npx rollup --environment NODE_ENV:production</span><br><span class=\"line\">npx rollup --environment NODE_ENV:development</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vite\"><a href=\"#Vite\" class=\"headerlink\" title=\"Vite\"></a>Vite</h2><p>由于现在浏览器支持 esmodule 模块化的加载，在开发时，可以直接使用这个特性。但是仍存在如下的问题：</p>\n<ul>\n<li>在加载文件时，后缀名不能省略</li>\n<li>加载别的文件时，该文件的依赖也将会在浏览器中进行下载，导致浏览器下载了很多个文件，占用了很大的带宽</li>\n<li>不支持 ts、vue 等代码文件</li>\n</ul>\n<p>vite 对 css、ts 原生支持。对于 less 的使用，只需要安装 less 插件即可</p>\n<h3 id=\"配置对-vue-的支持\"><a href=\"#配置对-vue-的支持\" class=\"headerlink\" title=\"配置对 vue 的支持\"></a>配置对 vue 的支持</h3><p>需要安装配置 vue 的插件 @vite&#x2F;plugin-vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @vite/plugin-vue</span><br></pre></td></tr></table></figure>\n\n<p>配置 vite</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vite&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@vitejs/plugin-vue&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">vue</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义-CLI\"><a href=\"#自定义-CLI\" class=\"headerlink\" title=\"自定义 CLI\"></a>自定义 CLI</h2><p>在项目根目录下创建 bin 文件夹，文件夹里面存放 js 代码，在文件头部需要标明执行该文件的环境路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!<span class=\"attr\">D</span>:<span class=\"regexp\">/Dahui/</span><span class=\"title class_\">Environment</span>/<span class=\"title class_\">Node</span>/node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建 package.json 文件，并配置 bin ，其中 demo01 表示执行的命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cli&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;bin&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;demo01&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bin/test.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 npm link 命令创建一个连接，该命令将会将配置的 bin 生成一个 demo01（linux），demo01.cmd（cmd） 和 demo01.ps1（powershell） 文件，该文件被存放到 node_global 文件夹中，用于执行该命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用 commander 工具来解析传入的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!<span class=\"attr\">D</span>:<span class=\"regexp\">/Dahui/</span><span class=\"title class_\">Environment</span>/<span class=\"title class_\">Node</span>/node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(&#x27;test&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;D:\\\\Dahui\\\\Environment\\\\Node\\\\node.exe&#x27;, // node 路径</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;D:\\\\Dahui\\\\Environment\\\\Node\\\\node-v18.14.0-win-x64\\\\node_global\\\\node_modules\\\\cli\\\\bin\\\\test.js&#x27;, // 脚本路径</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#x27;--version&#x27; // 参数</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package.json&#x27;</span>).<span class=\"property\">version</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">version</span>(version, <span class=\"string\">&#x27;-V, --version&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;valuename&gt; 用于传值 valuename 用于表明传值到哪个属性中</span></span><br><span class=\"line\">program.<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-d, --destination &lt;destination&gt;&#x27;</span>, <span class=\"string\">&#x27;where to put the result&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听 --help 参数，当输入该参数将会执行里面的回调函数</span></span><br><span class=\"line\">program.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;--help&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;others&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;  1111111&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;  2222222&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对 destination 传入的值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(program.<span class=\"title function_\">opts</span>().<span class=\"property\">destination</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装自定义命令，并从远程仓库下载\"><a href=\"#封装自定义命令，并从远程仓库下载\" class=\"headerlink\" title=\"封装自定义命令，并从远程仓库下载\"></a>封装自定义命令，并从远程仓库下载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; useHelp &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./core/help&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useHelp</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>)</span><br></pre></td></tr></table></figure>\n\n<p>help.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createFromTemplate, createComponent &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./action&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useHelp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-d, --destination &lt;destination&gt;&#x27;</span>, <span class=\"string\">&#x27;the destination of direcotry&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&#x27;-r, --remove&#x27;</span>, <span class=\"string\">&#x27;remove the files&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&#x27;create &lt;template&gt; [args]&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&#x27;the template of project to create&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(createFromTemplate)</span><br><span class=\"line\"></span><br><span class=\"line\">  program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&#x27;create-cpn &lt;component&gt; [...args]&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&#x27;createt a component from template&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(createComponent)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  useHelp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 通过 promisify 使 download 变为一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"title function_\">promisify</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;download-git-repo&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; program &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加模板编译库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ejs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ejs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeCommand</span>(<span class=\"params\">command, args, opts</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 开启子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childProcess = <span class=\"title function_\">spawn</span>(command, args, opts)</span><br><span class=\"line\">    <span class=\"comment\">// 将输出传入到主进程的输出</span></span><br><span class=\"line\">    childProcess.<span class=\"property\">stdout</span>.<span class=\"title function_\">pipe</span>(process.<span class=\"property\">stdout</span>)</span><br><span class=\"line\">    childProcess.<span class=\"property\">stderr</span>.<span class=\"title function_\">pipe</span>(process.<span class=\"property\">stderr</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"title function_\">resolve</span>()&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFromTemplate</span>(<span class=\"params\">template, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(template, args)</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数一：下载地址 需要指定下载的分支</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数二：下载到哪里</span></span><br><span class=\"line\"><span class=\"comment\">   * 参数三：可选参数，设置为 clone 方式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">download</span>(<span class=\"string\">&#x27;direct:git@github.com:DaHui-BT/scoped-css-webpack-plugin.git#main&#x27;</span>, template, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> command = <span class=\"string\">&#x27;npm&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 判断当前平台，win 需要添加 .exe</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">platform</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">platform</span> == <span class=\"string\">&#x27;win32&#x27;</span>) &#123;</span><br><span class=\"line\">    command += <span class=\"string\">&#x27;.exe&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自动安装相关的依赖</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">executeCommand</span>(command, [<span class=\"string\">&#x27;install&#x27;</span>], &#123; <span class=\"attr\">cwd</span>: <span class=\"string\">`./<span class=\"subst\">$&#123;template&#125;</span>`</span>&#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 自动运行该项目</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">executeCommand</span>(command, [<span class=\"string\">&#x27;run&#x27;</span>, <span class=\"string\">&#x27;dev&#x27;</span>], &#123; <span class=\"attr\">cwd</span>: <span class=\"string\">`./<span class=\"subst\">$&#123;template&#125;</span>`</span>&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createComponent</span>(<span class=\"params\">component, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> templatePath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./template/template.vue.ejs&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 编译模板，并传入需要替换的字符</span></span><br><span class=\"line\">    ejs.<span class=\"title function_\">renderFile</span>(templatePath, &#123; <span class=\"attr\">name</span>: component, <span class=\"attr\">lowerName</span>: component.<span class=\"title function_\">toLowerCase</span>() &#125;, <span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> destination = program.<span class=\"title function_\">opts</span>().<span class=\"property\">destination</span> || <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">resolve</span>(__dirname, destination)</span><br><span class=\"line\">    <span class=\"comment\">// 判断文件路径是否存在，不存在则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(filePath)) &#123;</span><br><span class=\"line\">      fs.<span class=\"title function_\">mkdirSync</span>(filePath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 同步写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"property\">promises</span>.<span class=\"title function_\">writeFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;filePath&#125;</span>/<span class=\"subst\">$&#123;component&#125;</span>.vue`</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  createFromTemplate,</span><br><span class=\"line\">  createComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a><a href=\"https://www.aliyundrive.com/drive/file/all/backup/66f25f1481f8a5c9b2ec48bdb4953a2c7483f60a\">TODO</a></h1><p>802 day134_Rollup-Vite打包与原理-脚手架开发_14_(掌握)vite-esbuild构建工具的原理解析.mp4 </p>\n"}],"PostAsset":[{"_id":"source/_posts/broswer/ast生成过程.png","post":"cmf9kkfeo0001r44ygnm4ekmi","slug":"ast生成过程.png","modified":1,"renderable":0},{"_id":"source/_posts/broswer/v8.png","post":"cmf9kkfeo0001r44ygnm4ekmi","slug":"v8.png","modified":1,"renderable":0},{"_id":"source/_posts/broswer/浏览器渲染过程.png","post":"cmf9kkfeo0001r44ygnm4ekmi","slug":"浏览器渲染过程.png","modified":1,"renderable":0},{"_id":"source/_posts/408/三次握手.png","post":"cmf9kkff00003r44y6bmcgetm","slug":"三次握手.png","modified":1,"renderable":0},{"_id":"source/_posts/408/四次挥手.png","post":"cmf9kkff00003r44y6bmcgetm","slug":"四次挥手.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cmf9kkfeo0001r44ygnm4ekmi","category_id":"cmf9kkff30004r44y7v229d8d","_id":"cmf9kkffh000dr44yccttaiuw"},{"post_id":"cmf9kkff00003r44y6bmcgetm","category_id":"cmf9kkffe0009r44y8ye773yo","_id":"cmf9kkffi000ir44y6apd94l0"},{"post_id":"cmf9kkff60006r44yfl7q7a0k","category_id":"cmf9kkffh000er44ybikhbil3","_id":"cmf9kkffl000nr44ybpjgc2kq"},{"post_id":"cmf9kkff80007r44y66xvho9h","category_id":"cmf9kkffh000er44ybikhbil3","_id":"cmf9kkffm000qr44y77r4bsu7"},{"post_id":"cmf9kkffd0008r44y4a1megun","category_id":"cmf9kkffh000er44ybikhbil3","_id":"cmf9kkffn000tr44y53we29wh"},{"post_id":"cmf9kkfff000br44y6njm4hny","category_id":"cmf9kkffm000pr44y2kvug4jj","_id":"cmf9kkffo000yr44ydoer16ln"},{"post_id":"cmf9kkffg000cr44y0bdj07aw","category_id":"cmf9kkffh000er44ybikhbil3","_id":"cmf9kkffp0011r44y5gaudrlp"}],"PostTag":[{"post_id":"cmf9kkfeo0001r44ygnm4ekmi","tag_id":"cmf9kkff50005r44yg3xi850t","_id":"cmf9kkffi000gr44y2wkw7ns7"},{"post_id":"cmf9kkfeo0001r44ygnm4ekmi","tag_id":"cmf9kkffe000ar44y7zaf3qwb","_id":"cmf9kkffi000hr44y1c6ob5ao"},{"post_id":"cmf9kkff00003r44y6bmcgetm","tag_id":"cmf9kkffh000fr44y69885fo6","_id":"cmf9kkffl000lr44y9kpggv7v"},{"post_id":"cmf9kkff60006r44yfl7q7a0k","tag_id":"cmf9kkffj000kr44y665z374e","_id":"cmf9kkffn000sr44y72cf9rnd"},{"post_id":"cmf9kkff60006r44yfl7q7a0k","tag_id":"cmf9kkffl000or44y305f41pf","_id":"cmf9kkffn000vr44y3igug9qt"},{"post_id":"cmf9kkff80007r44y66xvho9h","tag_id":"cmf9kkffn000rr44yh0xuax0s","_id":"cmf9kkffo000xr44yfp7v00mj"},{"post_id":"cmf9kkffd0008r44y4a1megun","tag_id":"cmf9kkffo000wr44y6b5b48gd","_id":"cmf9kkffo0010r44y3lap1ohb"},{"post_id":"cmf9kkfff000br44y6njm4hny","tag_id":"cmf9kkffo000zr44ybv42f5sx","_id":"cmf9kkffp0013r44y5ft72mki"},{"post_id":"cmf9kkffg000cr44y0bdj07aw","tag_id":"cmf9kkffp0012r44y3lkg9kg6","_id":"cmf9kkffp0014r44yfkp23cmp"}],"Tag":[{"name":"浏览器","_id":"cmf9kkff50005r44yg3xi850t"},{"name":"渲染原理","_id":"cmf9kkffe000ar44y7zaf3qwb"},{"name":"HTTP","_id":"cmf9kkffh000fr44y69885fo6"},{"name":"CSS","_id":"cmf9kkffj000kr44y665z374e"},{"name":"BFC","_id":"cmf9kkffl000or44y305f41pf"},{"name":"JS","_id":"cmf9kkffn000rr44yh0xuax0s"},{"name":"React","_id":"cmf9kkffo000wr44y6b5b48gd"},{"name":"SEO","_id":"cmf9kkffo000zr44ybv42f5sx"},{"name":"Node","_id":"cmf9kkffp0012r44y3lkg9kg6"}]}}